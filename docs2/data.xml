<nzai>
  <page name="Overview">

    <section name="Welcome">


      Welcome to the official LÖVE documentation page. Here we have explanations of all the types and objects available for the Lua scripting.
      This does not describe the inner-workings of the engine itself (but we do have an SVN repository available on SourceForge if that's what you're looking for).
      To understand anything that's going on it is recommended that you have a little bit of programming experience, but hopefully LÖVE is straight-forward and simple
      enough for even novices to get into game creation.
      [br /][br /]
      We believe that thorough documentation is important for the survival of a program so if there is something missing or incorrect, please
      [a href="http://love.sourceforge.net/?page=contact"]contact us[/a].
    </section>

    <section name="Tutorials">
      This page has the bare documentation and, except for the simple examples, contain no actual tutorials.
      Tutorials are available from the tutorial page on the [a href="http://love.sourceforge.net/?page=documentation"]LÖVE website[/a].
    </section>

      <section name="TODO">
      These should require no further work:
      [ul]
      [li] love.mouse [/li]
      [li] love.keyboard [/li]
      [li] love.timer [/li]
      [/ul]
      These need examples, but are otherwise done:
      [ul]
      [li] love.system [/li]
      [li] love.audio [/li]
	  [li] love.filesystem [/li]
	  [li] love.graphics [/li]
      [/ul]
    </section>
  </page>

  <page name="License">


    <section name="Summary">

    LÖVE is licensed under the terms of the ZLIB license. This is a short license to begin with,
    but for the lazy, here's a summary:

    [ul]
    [li]Do not claim that you made this software.[/li]
    [li]Do not make an altered version and claim that it is the original software.[/li]
    [li]Otherwise, feel free to use this software in any situation, including commercial.[/li]
    [/ul]
    </section>

    <section name="ZLIB license (full)">

      Copyright © 2006-2008 LÖVE Development Team[br /]
      [br /]
      This software is provided 'as-is', without any express or implied
      warranty. In no event will the authors be held liable for any damages
      arising from the use of this software.[br /]
      [br /]
      Permission is granted to anyone to use this software for any purpose,
      including commercial applications, and to alter it and redistribute it
      freely, subject to the following restrictions:[br /]
      [br /]
      1. The origin of this software must not be misrepresented; you must not
      claim that you wrote the original software. If you use this software
      in a product, an acknowledgment in the product documentation would be
      appreciated but is not required.[br /]
      [br /]
      2. Altered source versions must be plainly marked as such, and must not be
      misrepresented as being the original software.[br /]
      [br /]
      3. This notice may not be removed or altered from any source
      distribution.[br /]

    </section>

    <section name="External libraries">

      LOVE uses many libraries, such as SDL, DevIL and FreeType. These all have their own licenses.
      An overview is presented here.

      [ul]
      [li]boost ([a href="http://www.boost.org/users/license.html"]BSL[/a])[/li]
      [li]SDL ([a href="http://www.opensource.org/licenses/lgpl-license.php"]LGPL[/a])[/li]
      [li]SDL_mixer ([a href="http://www.opensource.org/licenses/lgpl-license.php"]LGPL[/a])[/li]
      [li]DevIL ([a href="http://www.opensource.org/licenses/lgpl-license.php"]LGPL[/a])[/li]
      [li]FreeType 2 ([a href="http://www.freetype.org/FTL.TXT"]FTL[/a])[/li]
      [li]PhysFS ([a href="http://www.opensource.org/licenses/zlib-license.php"]ZLIB[/a])[/li]
      [li]Lua ([a href="http://www.opensource.org/licenses/mit-license.html"]MIT[/a])[/li]
      [/ul]

    </section>


  </page>

  <page name="Manual Improvements">
    <section name="Help us help you!">
      
    </section>
  </page>

  <module name="love.graphics">
    The graphics module is responsible for things like window management, Images, Animations,
    Fonts, and more.
	
    <type name="Image" brief="Represents a drawable image.">
      Images are created and drawn on screen using functions in love.graphics. Images do currently not exist in memory after they are created as GPU textures, thus methods
      for reading single pixel colors and similar are not available.[br /]
      [br /]Supported image formats:
      [ul]
      [li]PNG[/li]
      [li]BMP[/li]
      [li]GIF[/li]
      [li]JPEG[/li]
      [li]LBM[/li]
      [li]PCX[/li]
      [li]PNM[/li]
      [li]TGA[/li]
      [li]XCF[/li]
      [li]XPM[/li]
      [li]XV[/li]
      [li](And probably not TIFF)[/li]
      [/ul]
      <func name="getWidth" brief="Gets the width of an image.">
        <overload>
          <ret type="number" brief="The width of the image." />
        </overload>
      </func>
	  <func name="getHeight" brief="Gets the height of an image.">
        <overload>
          <ret type="number" brief="The height of the image." />
        </overload>
      </func>
      <func name="setCenter" brief="Sets the center of the image.">
        <overload>
          <param name="x" />
          <param name="y" />
		  For instance, a 128x64 image, will have a default center at [64,32] (the actual center). If you want the image to rotate around its top-left corner, you set the center to [0,0].
        </overload>
      </func>

      <see>
        love.graphics.newImage, Animation
      </see>

      <example id="1" />

    </type>



    <type name="Animation" brief="Represents a frame-by-frame animation.">
      Remember that Animations must be updated each frame. (See example)
	  
	  <func name="addFrame" brief="Adds a single frame to the Animation.">
	    <overload>
         <param name="x" brief="The position of the frame along the x-axis." />
          <param name="y" brief="The position of the frame along the y-axis." />
          <param name="w" brief="The width of the frame." />
          <param name="h" brief="The height of the frame." />
          <param name="delay" brief="The delay in seconds after the frame. " />
		</overload>
      </func>
	  
	  <func name="setMode" brief="Sets the animation mode.">
	    <overload>
          <param name="mode" brief="The animation mode." />
		</overload>
      </func>
	  
	  <func name="play" brief="Starts the Animation.">
	    <overload></overload>
      </func>
	  
	  <func name="stop" brief="Stops the Animation">
	    <overload></overload>
      </func>
	  
	  <func name="reset" brief="Sets the current frame to the first frame and resets timer." >
        <overload></overload>
      </func>
	  
	  <func name="seek" brief="Sets the current frame.">
        <overload>
		  <param name="frame" brief="The frame number. (0 = first)" />
		</overload>
      </func>
	  
	  <func name="getCurrentFrame" brief="Gets the current frame number">
        <overload>
		  <ret type="number" brief="The frame number, where 0 is the first frame."/>
		</overload>
      </func>
	  
	  <func name="getSize" brief="Gets the number of frames.">
        <overload>
		  <ret type="number" brief="The number of frames." />
		</overload>
      </func>
	  
	  <func name="setDelay" brief="Sets the delay of a specific frame." >
        <overload>
		  <param name="frame" brief="The frame number." />
          <param name="delay" brief="The new delay for the frame." />
		</overload>
      </func>
	  
	  <func name="setSpeed" brief="Sets the overall speed of the Animation.">
	    <overload>
          <param name="speed" brief="Speed factor, where a value of 1 means normal speed." />
		</overload>
      </func>
	  
	  <func name="getSpeed" brief="Returns the current speed of the Animation.">
        <overload>
		  <ret type="number" brief="The speed factor, where a value of 1 means normal speed." />
		</overload>
      </func>
	  
	  <func name="getWidth" brief="Gets the width of the current frame.">
        <overload>
		  <ret type="number" brief="The width of the current frame in pixels." />
		</overload>
      </func>
	  
	  <func name="getHeight" brief="Gets the height of the current frame.">
        <overload>
		  <ret type="number" brief="The height of the current frame in pixels." />
		</overload>
      </func>
	  
	  <func name="setCenter" brief="Changes the center of the Animation.">
		<overload>
          <param name="x" brief="The position of the center along the x-axis." />
          <param name="y" brief="The position of the center along the y-axis." />
		  For instance, a 128x64 Animation (assuming all frames have equal size), will have a default center at (0,0)
          (the actual center). If you want the Animation to rotate around its top-left corner, you set the center to (-64,-32). 
          Unlike Images, which have absolute centers, Animations have relative centers. This is because frames in an Animation
          can have variable dimensions.
		</overload>
      </func>
	  
	  <func name="update" brief="Updates the Animation">
	    <overload>
		  <param name="dt" brief="The time since last update." />
          Note that this must be called every frame for the Animation to run. See the example.
		</overload>
      </func>
	  
	  <see>
	    love.graphics.newAnimation, Image
	  </see>
	  
	  <example id="11" />
	  
    </type>
	

    <type name="Font" brief="Represents a font.">
	  
	  <func name="getHeight" brief="Returns the height of the font.">
        <overload>
          <ret type="number" brief="The height of the font." />
		  The height of the font is the size including any spacing; the height which it will need.
		</overload>
      </func>
	  
	  <func name="getWidth" brief="Returns the width of the line.">
        <overload>
          <param name="line" brief="A line of text." />
          <ret type="number" brief="The width of the font." />
		  Determines the line width. Does not support line-breaks.
		</overload>
      </func>
	  
	  <func name="setLineHeight" brief="Sets the line height of the font.">
	    <overload>
          <param name="height" brief="The new line height." />
		  When rendering the font in lines the actual height will be determined by the line height multiplied by the height of the font. The default is 1.0
		</overload>
      </func>
	  
	  <func name="getLineHeight" brief="Returns the line height.">
        <overload>
		  <ret type="number" brief="The line height." />
		</overload>
      </func>
	  
      <see>
	    love.graphics.newFont, love.graphics.newImageFont
	  </see>
	  
    </type>
	
	<type name="Color" brief="An object containing color information.">
      A Color object is created by calling any of the [b]love.graphics.newColor()[/b] functions.

      <func name="setRed" brief="Sets the amount of red in the color.">
        <overload>
		  <param name="red" brief="The amount of red." />
		</overload>
      </func>

      <func name="setGreen" brief="Sets the amount of green in the color.">
        <overload>
		  <param name="green" brief="The amount of green." />
		</overload>
      </func>

      <func name="setBlue" brief="Sets the amount of blue in the color.">
        <overload>
		  <param name="blue" brief="The amount of blue." />
		</overload>
      </func>

      <func name="setAlpha" brief="Sets the amount of alpha in the color.">
        <overload>
		  <param name="alpha" brief="The amount of alpha." />
		</overload>
      </func>

      <func name="getRed" brief="Gets the amount of red in the color.">
        <overload>
		  <ret type="number" brief="The amount of red." />
		</overload>
      </func>

      <func name="getGreen" brief="Gets the amount of green in the color.">
        <overload>
		  <ret type="number" brief="The amount of green." />
		</overload>
      </func>

      <func name="getBlue" brief="Gets the amount of blue in the color.">
        <overload>
		  <ret type="number" brief="The amount of blue." />
		</overload>
      </func>

      <func name="getAlpha" brief="Gets the amount of alpha in the color.">
        <overload>
		  <ret type="number" brief="The amount of alpha." />
		</overload>
      </func>
	  
	  <see>love.graphics.newColor</see>

    </type>
	
	<type name="ParticleSystem" brief="Contains information for a particle system.">
      The particle systems are created and drawn on the screen using functions in love.graphics. They also need to be updated in the update(dt) callback
      for you to see any changes in the particles emitted

      <func name="setBufferSize" brief="Sets the size of the buffer (the max allowed amount of particles in the system).">
        <overload>
		  <param name="size">The buffer size.</param>
		</overload>
      </func>
	  
	  <func name="setSprite" brief="Sets the image which is to be emitted.">
        <overload>
		  <param name="sprite">An Image.</param>
		</overload>
      </func>

      <func name="setEmissionRate" brief="Sets the amount of particles emitted per second.">
        <overload>
		  <param name="rate">The amount of particles per second.</param>
		</overload>
      </func>

      <func name="setLifetime" brief="Sets how long the particle system should emit particles (if -1 then it emits particles forever).">
        <overload>
		  <param name="life">The lifetime of the emitter (in seconds).</param>
		</overload>
      </func>

      <func name="setParticleLife" brief="Sets the life of the particles.">
        <overload>
		  <param name="life">The life of the particles (in seconds).</param>
		</overload>
        <overload>
		  <param name="min">The minumum life of the particles (in seconds).</param>
          <param name="max">The maximum life of the particles (in seconds).</param>
		  Every particle created will have a lifetime between min and max.
		</overload>
      </func>
	  
	  <func name="setPosition" brief="Sets the position of the emitter.">
	    <overload>
		  <param name="x">The x-coordinate.</param>
		  <param name="y">The y-coordinate.</param>
		</overload>
	  </func>

      <func name="setDirection" brief="Sets the direction the particles will be emitted in (in degrees).">
        <overload>
		  <param name="direction">The direction of the particles (in degrees).</param>
		</overload>
        <overload>
		  <param name="direction">The direction of the particles (in degrees).</param>
          <param name="spread">The amount of spread.</param>
		</overload>
      </func>

      <func name="setSpeed" brief="Sets the speed of the particles.">
        <overload>
		  <param name="speed">The speed (in pixels per second).</param>
		</overload>
        <overload>
		  <param name="min">The minimum speed (in pixels per second).</param>
          <param name="max">The maximum speed (in pixels per second).</param>
		  Every particle created will have a speed between min and max.
		</overload>
      </func>

      <func name="setGravity" brief="Sets the gravity affecting the particles (acceleration along the y-axis).">
        <overload>
		  <param name="gravity">The amount of gravity.</param>
		</overload>
        <overload>
		  <param name="min">The minimum gravity.</param>
          <param name="max">The maximum gravity.</param>
		  Every particle created will have a gravity between min and max.
		</overload>
      </func>

      <func name="setRadialAcceleration" brief="Sets the radial acceleration (acceleration towards the emitter).">
        <overload>
		  <param name="acceleration">The amount of acceleration.</param>
		</overload>
        <overload>
		  <param name="min">The minimum acceleration.</param>
          <param name="max">The maximum acceleration.</param>
		  Every particle created will have an acceleration between min and max.
		</overload>
      </func>

      <func name="setTangentialAcceleration" brief="Sets the tangential acceleration (acceleration perpendicular to the particle's direction).">
        <overload>
		  <param name="acceleration">The amount of acceleration.</param>
		</overload>
        <overload>
		  <param name="min">The minimum acceleration.</param>
          <param name="max">The maximum acceleration.</param>
		  Every particle created will have an acceleration between min and max.
		</overload>
      </func>

      <func name="setSize" brief="Sets the size of the image (1.0 being normal size).">
        <overload>
		  <param name="size">The size of the image.</param>
		</overload>
        <overload>
		  <param name="start">The size of the image upon creation.</param>
          <param name="end">The size of the image upon death.</param>
		  The particles will grow/shrink from the starting size to the ending size.
		</overload>
        <overload>
		  <param name="start">The size of the image upon creation.</param>
          <param name="end">The size of the image upon death.</param>
          <param name="variation">The degree of variation (0 meaning no variation and 1 meaning full variation between start and end).</param>
		  The particles will grow/shrink from the starting size to the ending size. The variation affects starting size only.
		</overload>
      </func>

      <func name="setSizeVariation" brief="Sets the degree of variation (0 meaning no variation and 1 meaning full variation between start and end).">
        <overload>
		  <param name="variation">The degree of variation.</param>
		</overload>
      </func>

      <func name="setRotation" brief="Sets the rotation of the image upon particle creation (in degrees).">
        <overload>
		  <param name="rotation">The rotation of the image (in degrees).</param>
		</overload>
        <overload>
		  <param name="min">The minimum amount of rotation.</param>
          <param name="max">The maximum amount of rotation.</param>
		  Every particle created will have a rotation between min and max.
		</overload>
      </func>
	  
	  <func name="setSpin" brief="Sets the spin of the sprite.">
        <overload>
		  <param name="size">The amount of spin.</param>
		</overload>
        <overload>
		  <param name="start">The amount of spin upon creation.</param>
          <param name="end">The amount of spin upon death.</param>
		</overload>
        <overload>
		  <param name="start">The amount of spin upon creation.</param>
          <param name="end">The amount of spin upon death.</param>
          <param name="variation">The degree of variation (0 meaning no variation and 1 meaning full variation between start and end).</param>
		</overload>
      </func>

      <func name="setSpinVariation" brief="Sets the degree of variation (0 meaning no variation and 1 meaning full variation between start and end).">
        <overload>
		  <param name="variation">The degree of variation.</param>
		</overload>
      </func>

      <func name="setColor" brief="Sets the color of the image (color modulation needs to be activated for it to have any effect).">
        <overload>
		  <param name="color">A Color object.</param>
		</overload>
        <overload>
		  <param name="start">A Color object.</param>
          <param name="end">A Color object.</param>
		</overload>
      </func>
	  
	  <func name="getX" brief="Gets the x-coordinate of the particle emitter's position.">
	    <overload>
		  <ret type="number" brief="The x-coordinate." />
		</overload>
	  </func>
	  
	  <func name="getY" brief="Gets the y-coordinate of the particle emitter's position.">
	    <overload>
		  <ret type="number" brief="The y-coordinate." />
		</overload>
	  </func>
	  
	  <func name="getDirection" brief="Gets the direction of the particle emitter (in degrees).">
	    <overload>
		  <ret type="number" brief="The direction." />
		</overload>
	  </func>
	  
	  <func name="getSpread" brief="Gets the amount of directional spread of the particle emitter (in degrees).">
	    <overload>
		  <ret type="number" brief="The amount of spread." />
		</overload>
	  </func>

      <func name="count" brief="Gets the amount of particles that are currently in the system.">
        <overload>
		  <ret type="number" brief="The amount of particles." />
		</overload>
      </func>

      <func name="start" brief="Starts the particle emitter.">
	    <overload></overload>
      </func>

      <func name="stop" brief="Stops the particle emitter, resetting the lifetime counter.">
	    <overload></overload>
      </func>

      <func name="pause" brief="Pauses the particle emitter.">
	    <overload></overload>
      </func>

      <func name="reset" brief="Resets the particle emitter, removing any existing particles and resetting the lifetime counter.">
	    <overload></overload>
      </func>

      <func name="isActive" brief="Checks whether the particle system is actively emitting particles.">
        <overload>
		  <ret type="boolean" brief="Whether the particle system is active." />
		</overload>
      </func>

      <func name="isEmpty" brief="Checks whether the particle system is empty of particles.">
        <overload>
		  <ret type="boolean" brief="Whether the particle system is empty." />
		</overload>
      </func>

      <func name="isFull" brief="Checks whether the particle system is full of particles.">
        <overload>
		  <ret type="boolean" brief="Whether the particle system is full." />
		</overload>
      </func>

      <func name="update" brief="Updates the particle system; moving, creating and killing particles.">
        <overload>
		  <param name="dt">The amount of time that has passed since last time the function was called.</param>
		</overload>
      </func>
	  
	  <see>love.graphics.newParticleSystem</see>

    </type>


    <func name="newImage" brief="Loads an image.">
      <overload brief="Creates an Image.">
        <param name="filename" brief="The filepath to the image file." />
        <ret type="Image" brief="An Image object containing the display data." />
      </overload>
      <overload brief="Creates an Image with a certain mode.">
        <param name="filename" brief="The filepath to the image file." />
        <param name="mode" brief="The type of image mode (padded, optimized, or both)." />
        <ret type="Image" brief="An Image object containing the display data." />
      </overload>
    </func>
	
	<func name="newAnimation" brief="Creates an Animation.">
	  <overload>
        <param name="image" brief="The source Image for the Animation."/>
        <ret type="Animation" brief="An Animation object with no frames." />
	  </overload>
	  <overload>
        <param name="image" brief="The source Image for the Animation."/>
        <param name="fw" brief="The width of each frame."/>
        <param name="fh" brief="The height of each frame."/>
        <param name="delay" brief="The delay (seconds) between each frame."/>
        <param name="frames" brief="The number of frames to include. (0 = all)" />
        <ret type="Animation" />
		This method assumes that

        [ol]
        [li]The frames are all of equal size[/li]
        [li]The frames are ordered from top-left to bottom-right[/li]
        [li]The frame size fx*fh must also fit with the width and height of the source image.[/li]
        [/ol]
	  </overload>
    </func>
	
	<func name="newColor" brief="Creates a color.">
	  <overload>
        <param name="red" brief="The amount of red." />
        <param name="green" brief="The amount of green." />
        <param name="blue" brief="The amount of blue." />
        <param name="alpha" brief="The amount of alpha." />
        <ret type="Color" brief="A Color object containing the color data." />
	  </overload>
      <overload>
        <param name="red" brief="The amount of red." />
        <param name="green" brief="The amount of green." />
        <param name="blue" brief="The amount of blue." />
        <ret type="Color" brief="A Color object containing the color data." />
	  </overload>
    </func>
	
	<func name="newFont" brief="Creates a new font by loading the font file.">
	  <overload>
        <param name="filename" brief="The filepath to the font file." />
        <param name="size" brief="The size of the font." />
        <ret type="Font" brief="A Font object containing the font data." />
	  </overload>
    </func>
	
	<func name="newImageFont" brief="Creates a new font by loading a specifically formatted image.">
	  <overload>
        An image font is created by having a series of characters set next to each other in a horizontal row.
        Between all the characters and on the left and right sides should be a dividing line consisting of a single color
        (which is not found in the actual characters themselves).[br /]
        This [a href="gfx/imagefont.png"]example image[/a] is consiting of black and white glyphs on a transparent background
        where they are separated by yellow lines. The yellow will be used in determining where each character begins and ends.
        <param name="filename" brief="The filepath to the image file." />
        <param name="glyphs" brief="A list of the characters as they are in the image." />
        <ret type="Font" brief="A Font object containing the font data." />
	  </overload>
	  <overload>
        An image font is created by having a series of characters set next to each other in a horizontal row.
        Between all the characters and on the left and right sides should be a dividing line consisting of a single color
        (which is not found in the actual characters themselves).[br /]
        This [a href="gfx/imagefont.png"]example image[/a] is consiting of black and white glyphs on a pink background (background can be transparent)
        where they are separated by yellow lines. The yellow will be used in determining where each character begins and ends.[br /]
        <param name="filename" brief="The filepath to the image file." />
        <param name="glyphs" brief="A list of the characters as they are in the image." />
        <param name="spacing" brief="The spacing factor." />
        <ret type="Font" brief="A Font object containing the font data." />
	  </overload>
    </func>
	
	<func name="newParticleSystem" brief="Creates a particle emitter.">
	  <overload>
        <param name="image" brief="An Image object." />
        <param name="buffer" brief="The maximum amount of particles that are allowed by the system." />
        <ret type="ParticleSystem" brief="A particle system containing the apporpriate information." />
	  </overload>
    </func>
	
	<func name="checkMode" brief="Checks if a display mode is supported.">
	  <overload>
        <param name="width" brief="Display width." />
        <param name="height" brief="Display height." />
        <param name="fullscreen" brief="Fullscreen (true), or windowed (false)." />
        <ret type="boolean" brief="True if supported, false otherwise" />
	  </overload>
    </func>
	
	<func name="setMode" brief="Changes the display mode.">
	  <overload>
        <param name="width" brief="Display width." />
        <param name="height" brief="Display height." />
        <param name="fullscreen" brief="Fullscreen (true), or windowed (false)." />
        <param name="vsync" brief="True if LOVE should wait for vsync, false otherwise (normally true)." />
        <param name="fsaa" brief="The number of FSAA-buffers (normally 0)." />
        <ret type="boolean" brief="True if successful, false otherwise" />

        Do not change the display mode unless you know that that mode is supported. Use love.graphics.checkMode to
        check whether a mode is supported or not. [br /]
        [br /]
        Also note that calling this function will cause the entire display context to reload. This
        means that all Images, Fonts and other graphical objects will have to be reloaded. It is
        therefore advisable to call this function when as few objects as possible has been loaded.

        [br /]
        [br /]
        FSAA stands for Full Scene Anti-Aliasing, and it is recommended to set this number to 0 (the default), 
        unless you need anti-aliasing of the edges on primitves and images. Most machines who support this feature support
        1, 2 and 4 FSAA buffers. The more buffers, the better the anti-aliasing and the slower the performance. 
        Assuming you're not using filled primites, you do not really need FSAA as long as you pad the sprites with some empty space; in this case FSAA will have no effect 
        on the visuals at all, it will only hinder performance.
      </overload>
    </func>
	
	<func name="toggleFullscreen" brief="Toggles fullscreen.">
	  <overload>
        <ret type="boolean" brief="True if successful" />
        The same goes for this method as for love.graphics.setMode: Do not change the display mode unless you know that that mode is supported. Use love.graphics.checkMode to
        check whether a mode is supported or not. [br /]
        [br /]
        Also note that calling this function will cause the entire display context to reload. This
        means that all Images, Fonts and other graphical objects will have to be reloaded. It is
        therefore advisable to call this function when as few objects as possible has been loaded.
	  </overload>
    </func>
	
	<func name="isCreated" brief="Checks if the display has been set.">
	  <overload>
        <ret type="boolean" brief="True if display has been set, false otherwise" />
        When configuring the display manually, it is useful to know if the display
        has been created. This way, we can avoid unnecessary display changes when
        the game reloads. The example below should make it more clear.[br /]
        [br /]
        Note that the configuration option display_auto must be set to false to 
        use manual configuration of the display.
      </overload>
	</func>
	
	<func name="getModes" brief="Gets a list of supported fullscreen modes.">
	  <overload>
        <ret type="table" brief="A table of width/height pairs." />
        This function does not include windowed modes, because they are generally supported with 
        any screen resolution. To see the exact nature of the returned table, see example below.
      </overload>
    </func>
	
	<func name="setColor" brief="Sets the current color.">
      <overload>
        <param name="color" brief="A Color object." />
      </overload>
      <overload>
        <param name="red" brief="The amount of red." />
        <param name="green" brief="The amount of green." />
        <param name="blue" brief="The amount of blue." />
      </overload>
      <overload>
        <param name="red" brief="The amount of red." />
        <param name="green" brief="The amount of green." />
        <param name="blue" brief="The amount of blue." />
        <param name="alpha" brief="The amount of alpha." />
	  </overload>
    </func>
	
	<func name="setBackgroundColor" brief="Sets the background color.">
      <overload>
		[b]Note:[/b] The alpha value of the Color will be ignored as the background cannot be transparent.
        <param name="color" brief="A Color object." />
      </overload>
      <overload>
        <param name="red" brief="The amount of red." />
        <param name="green" brief="The amount of green." />
        <param name="blue" brief="The amount of blue." />
	  </overload>
    </func>
	
	<func name="setFont" brief="Sets the current font.">
	  <overload>
        <param name="font" brief="A Font object." />
	  </overload>
    </func>
	
	<func name="setLineWidth" brief="Sets the line width.">
      <overload>
	    <param name="width" brief="The width of the line." />
	  </overload>
    </func>
	
	<func name="setLineStyle" brief="Sets line anti-aliasing.">
	  <overload>
        Possible line styles are love.line_smooth and love.line_rough.
        <param name="style" brief="Line style." />
      </overload>
    </func>
	
	<func name="setLine" brief="Sets the width of the line used when drawing outlined primitives.">
	  <overload>
        <param name="width" brief="The width of the line." />
      </overload>
      <overload>
        <param name="width" brief="The width of the line." />
        <param name="type" brief="The type of line (smooth/rough)." />
	  </overload>
    </func>
	
	<func name="getLineWidth" brief="Gets the current line width.">
      <overload>
        <ret type="number" brief="The current line width." />
	  </overload>
    </func>

    <func name="getLineStyle" brief="Gets the current line style.">
      <overload>
        <ret name="number" brief="love.line_smooth or love.line_rough." />
	  </overload>
    </func>
	
	<func name="setBlendMode" brief="Sets the blending mode.">
      <overload>
		The blending mode controls the way transparent elements blend together.
        <param name="mode" brief="The blending mode." />
	  </overload>
    </func>
	
	<func name="setColorMode" brief="Sets the color mode.">
      <overload>
		The color mode controls how the current color affects elements.
        <param name="mode" brief="The color mode." />
	  </overload>
    </func>
	
	<func name="setCaption" brief="Sets the window caption.">
	  <overload>
        <param name="caption" brief="The new window caption." />
	  </overload>
    </func>
	
	<func name="getColor" brief="Gets the current color.">
      <overload>
        <ret type="Color" brief="The current color." />
	  </overload>
    </func>

    <func name="getBackgroundColor" brief="Gets the current background color.">
      <overload>
        <ret type="Color" brief="The current background color." />
	  </overload>
    </func>

    <func name="getBlendMode" brief="Gets the current blend mode.">
      <overload>
        <ret type="number" brief="And int representing the current blend mode." />
	  </overload>
    </func>
    
	<func name="getColorMode" brief="Gets the current color mode.">
      <overload>
        <ret type="number" brief="And int representing the current color mode." />
	  </overload>
    </func>

    <func name="getFont" brief="Gets the current font.">
      <overload>
        <ret type="Font" brief="The current font." />
	  </overload>
    </func>
	
	<func name="getWidth" brief="Gets the width of the window.">
	  <overload>
        <ret type="number" brief="The width of the game window." />
	  </overload>
    </func>

    <func name="getHeight" brief="Gets the height of the window.">
	  <overload>
        <ret type="number" brief="The height of the game window." />
	  </overload>
    </func>
	
	<func name="draw" brief="Draws.">
	  <overload brief="Draws text on screen.">
        Draws text in the current color.
        <param name="string" brief="A text string." />
        <param name="x" brief="The position on the x-axis." />
        <param name="y" brief="The position on the y-axis." />
      </overload>
      <overload brief="Draws rotated text on screen.">
        Draws rotated text in the current color.
        <param name="string" brief="A text string." />
        <param name="x" brief="The position on the x-axis." />
        <param name="y" brief="The position on the y-axis." />
        <param name="angle" brief="The angle of rotation (in degrees)." />
      </overload>
      <overload brief="Draws rotated/scaled text on screen.">
        Draws rotated text in the current color.
        <param name="string" brief="A text string." />
        <param name="x" brief="The position on the x-axis." />
        <param name="y" brief="The position on the y-axis." />
        <param name="angle" brief="The angle of rotation (in degrees)." />
        <param name="s" brief="The scale factor." />
      </overload>
      <overload brief="Draws rotated/scaled text on screen.">
        Draws rotated text in the current color.
        <param name="string" brief="A text string." />
        <param name="x" brief="The position on the x-axis." />
        <param name="y" brief="The position on the y-axis." />
        <param name="angle" brief="The angle of rotation (in degrees)." />
        <param name="sx" brief="The scale factor along the x-axis." />
        <param name="sy" brief="The scale factor along the y-axis." />
      </overload>
	  <overload brief="Draws an Image or Animation on screen.">
        <param name="sprite" brief="An Image or Animation object." />
        <param name="x" brief="The position on the x-axis." />
        <param name="y" brief="The position on the y-axis." />
      </overload>
      <overload brief="Draws a rotated Image or Animation on screen.">
        <param name="sprite" brief="An Image or Animation object." />
        <param name="x" brief="The position on the x-axis." />
        <param name="y" brief="The position on the y-axis." />
        <param name="angle" brief="The angle of rotation (in degrees)." />
      </overload>
      <overload brief="Draws a rotated/scaled Image or Animation on screen.">
        <param name="sprite" brief="An Image or Animation object." />
        <param name="x" brief="The position on the x-axis." />
        <param name="y" brief="The position on the y-axis." />
        <param name="angle" brief="The angle of rotation (in degrees)." />
        <param name="s" brief="The scale factor." />
      </overload>
      <overload brief="Draws a rotated/scaled Image or Animation on screen.">
        <param name="sprite" brief="An Image or Animation object." />
        <param name="x" brief="The position on the x-axis." />
        <param name="y" brief="The position on the y-axis." />
        <param name="angle" brief="The angle of rotation (in degrees)." />
        <param name="sx" brief="The scale factor along the x-axis." />
        <param name="sy" brief="The scale factor along the y-axis." />
      </overload>
	  <overload brief="Draws a particle system on screen.">
        <param name="particlesystem" brief="A ParticleSystem object." />
        <param name="x" brief="The position on the x-axis." />
        <param name="y" brief="The position on the y-axis." />
      </overload>
	</func>

	<func name="drawf" brief="Draws formatted text on screen, with word wrap.">
	  <overload>
        Draws text in the current color, with word wrap.
        <param name="string" brief="A text string." />
        <param name="x" brief="The position on the x-axis." />
        <param name="y" brief="The position on the y-axis." />
        <param name="limit" brief="Wrap the line after this many horizontal pixels." />
      </overload>
      <overload>
        Draws text in the current color, with word wrap and alignment.
        <param name="string" brief="A text string." />
        <param name="x" brief="The position on the x-axis." />
        <param name="y" brief="The position on the y-axis." />
        <param name="limit" brief="Wrap the line after this many horizontal pixels." />
        <param name="align" brief="The alignment" />
      </overload>
	 </func>
	 
	 
	<func name="draws" brief="Draws a subsprite of an Image.">
	  <overload brief="Draws a subsprite of an Image.">
        <param name="image" brief="An Image object." />
        <param name="x" brief="The position on the x-axis." />
        <param name="y" brief="The position on the y-axis." />
        <param name="cx" brief="The x-position of the image section (top-left)." />
        <param name="cy" brief="The y-position of the image section (top-left)." />
        <param name="w" brief="The width of the image section." />
        <param name="h" brief="The height of the image section." />
      </overload>
	  <overload brief="Draws a rotated subsprite of an Image.">
        <param name="image" brief="An Image object." />
        <param name="x" brief="The position on the x-axis." />
        <param name="y" brief="The position on the y-axis." />
        <param name="cx" brief="The x-position of the image section (top-left)." />
        <param name="cy" brief="The y-position of the image section (top-left)." />
        <param name="w" brief="The width of the image section." />
        <param name="h" brief="The height of the image section." />
        <param name="angle" brief="The angle of rotation (in degrees)." />
      </overload>
      <overload brief="Draws a rotated/scaled subsprite of an Image.">
        <param name="image" brief="An Image object." />
        <param name="x" brief="The position on the x-axis." />
        <param name="y" brief="The position on the y-axis." />
        <param name="cx" brief="The x-position of the image section (top-left)." />
        <param name="cy" brief="The y-position of the image section (top-left)." />
        <param name="w" brief="The width of the image section." />
        <param name="h" brief="The height of the image section." />
        <param name="angle" brief="The angle of rotation (in degrees)." />
        <param name="s" brief="The scale factor." />
      </overload>
      <overload brief="Draws a rotated/scaled subsprite of an Image.">
        <param name="image" brief="An Image object." />
        <param name="x" brief="The position on the x-axis." />
        <param name="y" brief="The position on the y-axis." />
        <param name="cx" brief="The x-position of the image section (top-left)." />
        <param name="cy" brief="The y-position of the image section (top-left)." />
        <param name="w" brief="The width of the image section." />
        <param name="h" brief="The height of the image section." />
        <param name="angle" brief="The angle of rotation (in degrees)." />
        <param name="sx" brief="The scale factor along the x-axis." />
        <param name="sy" brief="The scale factor along the y-axis." />
      </overload>
      <overload brief="Draws a rotated/scaled subsprite of an Image, rotating around a different center.">
        <param name="image" brief="An Image object." />
        <param name="x" brief="The position on the x-axis." />
        <param name="y" brief="The position on the y-axis." />
        <param name="cx" brief="The x-position of the image section (top-left)." />
        <param name="cy" brief="The y-position of the image section (top-left)." />
        <param name="w" brief="The width of the image section." />
        <param name="h" brief="The height of the image section." />
        <param name="angle" brief="The angle of rotation (in degrees)." />
        <param name="sx" brief="The scale factor along the x-axis." />
        <param name="sy" brief="The scale factor along the y-axis." />
        <param name="ox" brief="The x-coordinate of the center." />
        <param name="oy" brief="The y-coordinate of the center." />
      </overload>
	</func>
	
	<func name="point" brief="Draws a point at (x,y).">
	  <overload>
        <param name="x" brief="Position along x-axis." />
        <param name="y" brief="Position along y-axis." />
      </overload>
	</func>

    <func name="line" brief="Draws a line from (x1,y1) to (x2,y2).">
	  <overload>
        <param name="x1" brief="First x-coordinate." />
        <param name="y1" brief="First y-coordinate." />
        <param name="x2" brief="Second x-coordinate." />
        <param name="y2" brief="Second y-coordinate." />
	  </overload>
    </func>

    <func name="triangle" brief="Draws a triangle usign the passed coordinates.">
	  <overload>
        [b]Note:[/b] When drawing a filled triangle, the coordinates must be passed in a counter-clockwise order.
        <param name="type" brief="The type of triangle (outline/filled)." />
        <param name="x1" brief="First x-coordinate." />
        <param name="y1" brief="First y-coordinate." />
        <param name="x2" brief="Second x-coordinate." />
        <param name="y2" brief="Second y-coordinate." />
        <param name="x3" brief="Third x-coordinate." />
        <param name="y3" brief="Third y-coordinate." />
	  </overload>
    </func>

    <func name="rectangle" brief="Draws a rectangle.">
      <overload>	
        <param name="type" brief="The type of rectangle (outline/filled)." />
        <param name="x" brief="X-coordinate of top-left corner." />
        <param name="y" brief="Y-coordinate of top-left corder." />
        <param name="w" brief="Width of the rectangle." />
        <param name="h" brief="Height of the rectangle." />
	  </overload>
    </func>
	
	<func name="quad" brief="Draws a quadrilateral usign the passed coordinates.">
	  <overload>
        [b]Note:[/b] When drawing a filled quadrilateral, the coordinates must be passed in a counter-clockwise order.
        <param name="type" brief="The type of quad (outline/filled)." />
        <param name="x1" brief="First x-coordinate." />
        <param name="y1" brief="First y-coordinate." />
        <param name="x2" brief="Second x-coordinate." />
        <param name="y2" brief="Second y-coordinate." />
        <param name="x3" brief="Third x-coordinate." />
        <param name="y3" brief="Third y-coordinate." />
        <param name="x4" brief="Fourth x-coordinate." />
        <param name="y4" brief="Fourht y-coordinate." />
	  </overload>
    </func>

    <func name="circle" brief="Draws a circle usign the passed information.">
	  <overload>
        <param name="type" brief="The type of circle (outline/filled)." />
        <param name="x" brief="The position on the x-axis." />
        <param name="y" brief="The position on the y-axis." />
        <param name="radius" brief="Radius of the circle." />
      </overload>
      <overload>
        <param name="type" brief="The type of circle (outline/filled)." />
        <param name="x" brief="The position on the x-axis." />
        <param name="y" brief="The position on the y-axis." />
        <param name="radius" brief="Radius of the circle." />
        <param name="points" brief="The amount of points to use to draw the circle." />
      </overload>
    </func>


    <example id="1" />
  </module>


  <module name="love.audio">

    The audio module is currently a wrapper around SDL_mixer, and has very limited
    features as of yet.

    <type name="Sound" brief="A sound effect.">
      Can load the following formats: WAVE, OGG, AIFF, RIFF and VOC. Sound is fully
      expanded into memory when the game loads. This means that if you load a
      5MB compressed .ogg file as a sound, it would consume ~50MB RAM when fully
      decompressed. Consider using Music in such cases.[br /]
      [br /]
      Note that the Sound object does not contain funcs to play itself back;
      love.audio.play must be used for this.
      <func name="setVolume" brief="Sets the volume the sound should be played at.">
        <overload>
          <param name="volume" brief="The volume (a number between 0 and 1.0)." />
        </overload>
      </func>
    </type>
    <type name="Music" brief="Streaming sound.">
      Can load the following formats: MP3, OGG, MIDI, XM, MOD,
      and a variety of other tracker formats.

      Music, unlike Sound, isn't fully decoded and expanded into
      memory when the game loads; decoding takes place during run-time.[br /]
      [br /]
      Note that the Music object itself has no funcs; it is currently only used as a handle. To play Music,
      use love.audio.play.
      <see>
        Sound, love.audio, love.audio.newMusic
      </see>
    </type>

    <func name="newSound" brief="Loads a sound file.">
      <overload>
        <param name="filename" brief="The filepath to the sound file." />
        <ret type="Sound" brief="A Sound object containing the audio data." />
      </overload>
    </func>

    <func name="newMusic" brief="Loads a music file.">
      <overload>
        <param name="filename" brief="The filepath to the music file." />
        <ret type="Music" brief="A Music object containing the audio data." />
      </overload>
    </func>

    <func name="play" brief="Plays a sound.">
      <overload>
        <param name="sound" brief="The sound to play." />
        The Sound is played a single time, on the first available channel.
      </overload>
      <overload>
        <param name="sound" brief="The sound to play." />
        <param name="loop" brief="The number of times to loop. (1 = play once, 0 = forever)." />
      </overload>
      <overload>
        <param name="music" brief="The Music object to play." />
        Remember that only one Music can play at any time. (See love.audio).
      </overload>
      <overload>
        <param name="music" brief="The Music object to play." />
        <param name="loop" brief="The number of times to loop. (1 = play once, 0 = forever)." />
        Remember that only one Music can play at any time. (See love.audio).
      </overload>
    </func>

    <func name="pause" brief="Pauses all audio playback.">
      <overload>

      </overload>
    </func>

    <func name="resume" brief="Resumes all audio playback.">
      <overload>
      </overload>
    </func>

    <func name="stop" brief="Stops all audio playback.">
      <overload>
      </overload>
    </func>

    <func name="isPlaying" brief="Checks whether (any) audio is playing or not.">
      <overload>
        <ret type="boolean" brief="True if audio is playing, false otherwise" />
      </overload>
    </func>

    <func name="isPaused" brief="Checks whether audio playback is paused or not.">
      <overload>
        <ret type="boolean" brief="True if audio is paused, false otherwise." />
      </overload>
    </func>

    <func name="setChannels" brief="Sets the amount of channels for sounds.">
      <overload>
        <param name="channels" brief="A number. Any number below 0 will have no effect." />
      </overload>
    </func>

    <func name="setMode" brief="Sets the mode for audio mixing and playback.">
      <overload>
        <param name="frequency" brief="The amount of Hz to use." />
		<param name="mode" brief="The audio mode (1 = mono, 2 = stereo)." />
		<param name="buffersize" brief="The size of the buffer (bits per output per sample)." />
      </overload>
    </func>

    <func name="setVolume" brief="Changes the master volume.">
      <overload>
        <param name="volume" brief="A number between 0 (min) and 1 (max)." />
      </overload>
    </func>

  </module>
  
  <!--<module name="love.physics">
  </module>-->
  <module name="love.mouse">
    Keeps track of the state of the mouse.

    <func name="getX" brief="Gets the current x-position of the mouse.">
      <overload>
        Gets the current x-position of the mouse. Use this if you for some reason
        only need the position along the x-axis. Otherwise, you probably want to use love.mouse.getPosition.
        <ret type="number" brief="Current x-position." />
        <see>
          love.mouse.getPosition, love.mouse.getY
        </see>
        <example id="3" />
      </overload>
    </func>

    <func name="getY" brief="Gets the current y-position of the mouse.">
      <overload>
        Gets the current y-position of the mouse. Use this if you for some reason
        only need the position along the y-axis. Otherwise, you probably want to use love.mouse.getPosition.
        <ret type="number" brief="Current y-position." />
        <see>
          love.mouse.getPosition, love.mouse.getX
        </see>
        <example id="3" />
      </overload>
    </func>

    <func name="getPosition" brief="Gets the current position of the mouse.">
      <overload>
        Gets the current x- and y-position of the mouse in one call. Since getting the mouse position (along both axes) is
        a fairly common task, this func was created to make it prettier.
        <ret type="number" brief="The current x position." />
        <ret type="number" brief="The current y position." />
        <example id="2" />
      </overload>
    </func>

    <func name="setPosition" brief="Sets the current position of the mouse.">
      <overload>
        Sets the current position of the mouse. Note that this generates a mousemoved event.
        If you just want to confine the mouse to the screen area, take a look at love.system.grabInput.
        <param name="x" brief="The new x-position." />
        <param name="y" brief="The new y-position." />
        <see>
          love.system.grabInput
        </see>
        <example id="4" />
      </overload>
    </func>


    <func name="isDown" brief="Checks whether a certain button is down.">
      <overload>
        Checks whether a certain mouse button is down.
        <param name="button" brief="A mouse button." />
        <ret type="boolean" brief="Whether the button is down." />
        <see>
          Constants
        </see>
        <example id="5" />
      </overload>
    </func>

    <func name="setVisible" brief="Controls cursor visbility.">
      <overload>
        Controls cursor visbility. Goes great with love.system.grabInput.
        <param name="visible" brief="True for visible, false for invisible." />
        <see>
          love.system.grabInput
        </see>
        <example id="6" />
      </overload>
    </func>

    <func name="isVisible" brief="Checks cursor visbility.">
      <overload>
        Checks cursor visbility.
        <ret type="boolean" brief="True if visible, false otherwise." />
        <see>
          love.mouse.setVisible
        </see>
        <example id="6" />
      </overload>
    </func>

    <example id="2" />

  </module>
  <module name="love.keyboard">
    Keeps track of the state of the keyboard.

    <func name="isDown" brief="Checks whether a certain key is down.">
      <overload>
        Checks whether a certain key is down. For list of accepted keys, see Constants.
        <param name="key" brief="The key in question." />
        <ret type="boolean" brief="Whether the passed key is pressed down." />
        <see>
          Constants, keypressed, keyrelreased
        </see>
        <example id="10" />
      </overload>
    </func>
    <example id="10" />
  </module>
  <module name="love.filesystem">
    This module provides access to Files in two places, and two places only:
    [ul]
    [li]The root folder of the .love-file. (Alternatively a directory).[/li]
    [li]The root folder of the save directory.[/li]
    [/ul]
    Each game is granted a single diretory on the user system where files can be saved.
    Full access to normal file I/O is no longer present due to security concerns.
    The directories will typically be something like:
    [ul]
    [li]C:\Documents and Settings\user\.love\game[/li]
    [li]/home/user/.love/game[/li]
    [/ul]
    Files that are opened for write or append will always be created in the
    save directory. The same goes for other operations that involve writing to
    the filesystem, like mkdir.
    [p]
    Files that are opened for read will be looked for in the game root folder, and then
    the save directory (in that order). So if a file with a certain filename (and
    path) exist in both the .love-file and the save folder, the one in the .love-file takes precedence.
    [/p]
	
    <type name="File" brief="A file that can be read from or written to.">
      A File should only be needed in these situations:
      [ul]
      [li]You need to read data directly from a file.[/li]
      [li]You need to write to a file.[/li]
      [/ul]
      In other cases, you can (and must) specify filenames directly when creating objects
      such as Image, Font and Sound.
	  <func name="getSize" brief="ets the size of the file in bytes.">
        <overload>
          <ret type="number" brief="The size of the file." />
		  Gets the size of the file in bytes. This requires that the File was created for reading, otherwise this functioin will return 0.
        </overload>
      </func>
      <see>love.filesystem.newFile</see>
    </type>
    
	<func name="newFile" brief="Constructs a File with the given filename.">
	  <overload>
	    <param name="file" brief="The filename." />
		<ret type="File" brief="The newly created file." />
		The file is in read mode only.
	  </overload>
	  <overload>
	    <param name="file" brief="The filename." />
		<param name="mode" brief="The filesystem mode (read, write, append)." />
		<ret type="File" brief="The newly created file." />
	  </overload>
	</func>
	
	<func name="exists" brief="Check whether a file exists.">
	  <overload>
	    <param name="filename" brief="The name of the file to check." />
		<ret type="boolean" brief="Whether the file exists." />
	  </overload>
	</func>
	
	<func name="isDirectory" brief="Check whether something is a directory.">
	  <overload>
	    <param name="dirname" brief="Name of the directory to check." />
		<ret type="boolean" brief="Whether it's a directory." />
	  </overload>
	</func>
	
	<func name="isFile" brief="Check whether something is a file.">
	  <overload>
	    <param name="filename" brief="Name of the file to check." />
		<ret type="boolean" brief="Whether it's a file." />
	  </overload>
	</func>
	
	<func name="mkdir" brief="Creates a directory.">
	  <overload>
	    <param name="dirname" brief="Name of the new directory." />
		<ret type="boolean" brief="Whether the operation was successful." />
	  </overload>
	</func>
	
	<func name="remove" brief="Removes a file (or directory).">
	  <overload>
	    <param name="filename" brief="Name of the file (or directory(." />
		<ret type="boolean" brief="Whether the operation was successful." />
	  </overload>
	</func>
	
	<func name="open" brief="Opens the file for reading/writing (depending on its mode).">
	  <overload>
	    <param name="file" brief="A File object of the file to open." />
		<ret type="boolean" brief="Whether the operation was successful." />
		<see>love.filesystem.newFile, love.filesystem.close</see>
	  </overload>
	</func>
	
	<func name="closes" brief="Closes the file.">
	  <overload>
	    <param name="file" brief="A File object of the file to close." />
		<ret type="boolean" brief="Whether the operation was successful." />
		<see>love.filesystem.newFile, love.filesystem.open</see>
	  </overload>
	</func>
	
	<func name="read" brief="Reads bytes from an opened file.">
	  <overload>
	    <param name="file" brief="An opened File object of the file to read." />
		<ret type="string" brief="The bytes contained in the file." />
		<see>love.filesystem.newFile, love.filesystem.open</see>
	  </overload>
	  <overload>
	    <param name="file" brief="An opened File object of the file to read." />
		<param name="bytes" brief="The amount of bytes to open." />
		<ret type="string" brief="The bytes contained in the file." />
		<see>love.filesystem.newFile, love.filesystem.open</see>
	  </overload>
	</func>
	
	<func name="write" brief="Writes bytes to an opened file.">
	  <overload>
	    <param name="file" brief="An opened File object of the file to write to." />
		<param name="data" brief="A string of bytes to write to the file." />
		<ret type="boolean" brief="Whether the operation was successful." />
		<see>love.filesystem.newFile, love.filesystem.open</see>
	  </overload>
	</func>
	
	<func name="eof" brief="Check if end-of-file is reached.">
	  <overload>
	    <param name="file" brief="A File object." />
		<ret type="boolean" brief="Whether the EOF has been reached." />
		<see>love.filesystem.read</see>
	  </overload>
	</func>
	
	<func name="tell" brief="Gets the current position in a file.">
	  <overload>
	    <param name="file" brief="A File object." />
		<ret type="number" brief="The current position." />
		<see>love.filesystem.read</see>
	  </overload>
	</func>
	
	<func name="seek" brief="Seek to a position within a file.">
	  <overload>
	    <param name="file" brief="A File object." />
		<param name="pos" brief="The position to seek to." />
		<ret type="boolean" brief="Whether the operation was successful." />
		<see>love.filesystem.read</see>
	  </overload>
	</func>
	
	<func name="enumerate" brief="Gets a list of files in the given directory.">
	  <overload>
		<ret type="list" brief="All the files (and subdirs) in the directory." />
	  </overload>
	</func>
	
	<func name="require" brief="Includes and runs a Lua file (once).">
	  <overload>
        <param name="filename" brief="The filename of the file to read." />
	    It is safe to include the same file more than once. LÖVE keeps track of included
        files to prevent reparsing. (If you want the same file to be included multiple
        times, take a look at love.filesystem.include( filename ).
	  </overload>
    </func>

    <func name="include" brief="Includes and runs a Lua file.">
	  <overload>
        <param name="filename" brief="The filename of the file to read." />
	    Includes and runs a Lua file every time the function is called. (Does not check if the file is included already).
	  </overload>
    </func>
  
  </module>
  <module name="love.timer">

    The timer module keeps track of time between frames, so that game
    objects can be updated in a FPS-independet fashion. The precision of the
    timer is usually 1ms, although this [i]may[/i] vary from system to system. Hardware timers
    with higher precision are planned, but not implemented at the time of writing.

    <func name="getFPS" brief="Gets the current FPS.">
      <overload>
        ret the current frames-per-second. Since it is meant for display-purposes,
        the value is only updated each second (this makes the value non-erratic and human-readable
        when drawn on screen).
        <ret type="number" brief="The FPS." />
        <example id="8" />
      </overload>
    </func>
    <func name="getDelta" brief="ret the current timestep.">
      <overload>
        ret the time (in seconds) since last frame. This is the same value that is
        passed with the update-callback each frame, so you should't really need to
        use this func for antying but display purposes.
        <example id="8" />
      </overload>
      <ret type="number" brief="The current timestep." />
    </func>
    <func name="sleep" brief="Delays exection for an amount of time.">
      <overload>
        <param name="ms" brief="The amount of milliseconds." />
        Delays execution for the specified amount of milliseconds. Tragically,
        the precision varies from system to system, and is generally not very good.
        Do not expect to get better precision than the nearest 10ms.
        <example id="7" />
      </overload>
    </func>
    <func name="getTime" brief="Gets approximate time since startup.">
      <overload>
        Note that this func does not get the current time! It is meant for
        timing pieces of code. [br /][br /]Also, this func is not very precise at the moment,
        since SDL's timer is used. This will change in some time in the future when modules for timers
        with higher resolutions are created.
        <ret type="number" brief="The (approximate) time in seconds since startup." />
        <example id="9" />
      </overload>
    </func>

    <example id="7" />
    <example id="9" />

  </module>
  <module name="love.system">

    The system module controls the currently running game and provides information about
    the running LOVE version. It is not related to the underlying operating system.
    <func name="getVersion" brief="Gets the current LOVE version.">
      <overload>
        <ret type="string" brief="String containing the version." />
      </overload>
    </func>
    <func name="getCodename" brief="Gets the codename of the current LOVE version.">
      <overload>
        <ret type="string" brief="String containing the codename." />
      </overload>
    </func>
    <func name="getPlatform" brief="Gets the current platform.">
      <overload>
        <ret type="string" brief="String containing Windows, Linux ..." />
      </overload>
    </func>
    <func name="exit" brief="Exits LOVE.">
      <overload>
        Calling this func will immediately exit LOVE and free resources.
      </overload>
    </func>
    <func name="restart" brief="Restarts the current game.">
      <overload>
        The current immediately restarts.
      </overload>
    </func>
    <func name="suspend" brief="Takes LOVE to the error handler.">
      <overload>
        Calling this func will cause LOVE to enter error mode, just like when
        an error occurs. NOTE! If you actually want to cause an error, do not
        call this func, use the built-in Lua func error() instead.
      </overload>
    </func>
    <func name="resume" brief="Takes LOVE back to the main game.">
      <overload>
        This func is meant to be called from error handler scripts, and has no
        effect if called from a normal game.
      </overload>
    </func>
    <func name="grabInput" brief="Sends as much input as possible to LOVE.">
      <overload>
        <param name="grab" brief="True to grab, false to ungrab." />
        When grabbing is on, the mouse is confined to the window,
        and as much keyboard input as possible is passed directly to the current game.
        Some key combinations may still be interpreted by the window manager, such
        as Alt+Tab, Ctrl+Alt+Delete, etc.
      </overload>
    </func>
  </module>


  <callback name="load" brief="Called when the game should load.">
    This function is called exacly once at the beginning of the game. This is where
    resources such as images and sounds should be loaded.
    <example id="51" />
  </callback>

  <callback name="update" brief="Called each timestep when the game should be updated.">
    This function should update the state of the game according to the time value dt.
    <param name="dt" brief="The time since last update in seconds." />
	<example id="51" />
  </callback>
  
  <callback name="draw" brief="Called each timestep right after update.">
    This is where you should draw things onto the screen.
	<example id="51" />
  </callback>
  
  <callback name="mousepressed" brief="Called when the mouse is pressed.">
    <param name="x" brief="The position of the mouse on the x-axis." />
    <param name="y" brief="The position of the mouse on the y-axis." />
    <param name="button" brief="Which button is pressed." />
	<example id="52" />
  </callback>
  
  <callback name="mousereleased" brief="Called when the mouse is released.">
    <param name="x" brief="The position of the mouse on the x-axis." />
    <param name="y" brief="The position of the mouse on the y-axis." />
    <param name="button" brief="Which button is released." />
	<example id="52" />
  </callback>
  
  <callback name="keypressed" brief="Called when a key is pressed.">
    <param name="key" brief="The key code of the pressed key." />
	<example id="53" />
  </callback>
  
  <callback name="keyreleased" brief="Called when a key is released.">
    <param name="key" brief="The key code of the released key." />
	<example id="53" />
  </callback>


  <misc name="Function List">
    Whooptido.
  </misc>

  <misc name="Example List">
    Whooptido TWOOOO.
  </misc>

  <misc name="Constants" title="List of constants">
    This is the complete list of constants available in LOVE.
    <item name="love.key_unknown" brief="Represents an unknown key" />
    <item name="love.key_first" />
    <item name="love.key_backspace" brief="Backspace key" />
    <item name="love.key_tab" brief="Tab key" />
    <item name="love.key_clear" />
    <item name="love.key_return" brief="Carriage return key" />
    <item name="love.key_pause" brief="Pause key" />
    <item name="love.key_escape" brief="Escape key" />
    <item name="love.key_space" brief="Spacebar key" />
    <item name="love.key_exclaim" brief="! key" />
    <item name="love.key_quotedbl" />
    <item name="love.key_hash" brief="# key" />
    <item name="love.key_dollar" brief="$ key" />
    <item name="love.key_ampersand" brief="&amp; key" />
    <item name="love.key_quote" brief='" key' />
    <item name="love.key_leftparen" brief="( key" />
    <item name="love.key_rightparen" brief=") key" />
    <item name="love.key_asterisk" brief="* key" />
    <item name="love.key_plus" brief="+ key" />
    <item name="love.key_comma" brief=", key" />
    <item name="love.key_minus" brief="- key" />
    <item name="love.key_period" brief=". key" />
    <item name="love.key_slash" brief="/ key" />
    <item name="love.key_0" brief="0 key" />
    <item name="love.key_1" brief="1 key" />
    <item name="love.key_2" brief="2 key" />
    <item name="love.key_3" brief="3 key" />
    <item name="love.key_4" brief="4 key" />
    <item name="love.key_5" brief="5 key" />
    <item name="love.key_6" brief="6 key" />
    <item name="love.key_7" brief="7 key" />
    <item name="love.key_8" brief="8 key" />
    <item name="love.key_9" brief="9 key" />
    <item name="love.key_colon" brief=": key" />
    <item name="love.key_semicolon" brief="; key" />
    <item name="love.key_less" brief="&lt; key" />
    <item name="love.key_equals" brief="= key" />
    <item name="love.key_greater" brief="&gt; key" />
    <item name="love.key_question" brief="? key" />
    <item name="love.key_at" brief="@ key" />

    <item name="love.key_leftbracket" brief="[ key" />
    <item name="love.key_backslash" brief="\ key" />
    <item name="love.key_rightbracket" brief="] key" />
    <item name="love.key_caret" brief="^ key" />
    <item name="love.key_underscore" brief="_ key" />
    <item name="love.key_backquote" brief=" key" />
    <item name="love.key_a" brief="A key" />
    <item name="love.key_b" brief="B key" />
    <item name="love.key_c" brief="C key" />
    <item name="love.key_d" brief="D key" />
    <item name="love.key_e" brief="E key" />
    <item name="love.key_f" brief="F key" />
    <item name="love.key_g" brief="G key" />
    <item name="love.key_h" brief="H key" />
    <item name="love.key_i" brief="I key" />
    <item name="love.key_j" brief="J key" />
    <item name="love.key_k" brief="K key" />
    <item name="love.key_l" brief="L key" />
    <item name="love.key_m" brief="M key" />
    <item name="love.key_n" brief="N key" />
    <item name="love.key_o" brief="O key" />
    <item name="love.key_p" brief="P key" />
    <item name="love.key_q" brief="Q key" />
    <item name="love.key_r" brief="R key" />
    <item name="love.key_s" brief="S key" />
    <item name="love.key_t" brief="T key" />
    <item name="love.key_u" brief="U key" />
    <item name="love.key_v" brief="V key" />
    <item name="love.key_w" brief="W key" />
    <item name="love.key_x" brief="X key" />
    <item name="love.key_y" brief="Y key" />
    <item name="love.key_z" brief="Z key" />
    <item name="love.key_delete" brief="Delete key" />

    <item name="love.key_kp0" brief="Keypad 0" />
    <item name="love.key_kp1" brief="Keypad 1" />
    <item name="love.key_kp2" brief="Keypad 2" />
    <item name="love.key_kp3" brief="Keypad 3" />
    <item name="love.key_kp4" brief="Keypad 4" />
    <item name="love.key_kp5" brief="Keypad 5" />
    <item name="love.key_kp6" brief="Keypad 6" />
    <item name="love.key_kp7" brief="Keypad 7" />
    <item name="love.key_kp8" brief="Keypad 8" />
    <item name="love.key_kp9" brief="Keypad 9" />
    <item name="love.key_kp_period" brief="Keypad ." />
    <item name="love.key_kp_divide" brief="Keypad /" />
    <item name="love.key_kp_multiply" brief="Keypad *" />
    <item name="love.key_kp_minus" brief="Keypad -" />
    <item name="love.key_kp_plus" brief="Keypad +" />
    <item name="love.key_kp_enter" brief="Keypad enter" />
    <item name="love.key_kp_equals" brief="Keypad =" />

    <item name="love.key_up" brief="Up key" />
    <item name="love.key_down" brief="Down key" />
    <item name="love.key_right" brief="Right key" />
    <item name="love.key_left" brief="Left key" />
    <item name="love.key_insert" brief="Insert key" />
    <item name="love.key_home" brief="Home key" />
    <item name="love.key_end" brief="End key" />
    <item name="love.key_pageup" brief="Page Up key" />
    <item name="love.key_pagedown" brief="Page Down key" />

    <item name="love.key_f1" brief="F1 key" />
    <item name="love.key_f2" brief="F2 key" />
    <item name="love.key_f3" brief="F3 key" />
    <item name="love.key_f4" brief="F4 key" />
    <item name="love.key_f5" brief="F5 key" />
    <item name="love.key_f6" brief="F6 key" />
    <item name="love.key_f7" brief="F7 key" />
    <item name="love.key_f8" brief="F8 key" />
    <item name="love.key_f9" brief="F9 key" />
    <item name="love.key_f10" brief="F10 key" />
    <item name="love.key_f11" brief="F11 key" />
    <item name="love.key_f12" brief="F12 key" />
    <item name="love.key_f13" brief="F13 key" />
    <item name="love.key_f14" brief="F14 key" />
    <item name="love.key_f15" brief="F15 key" />

    <item name="love.key_numlock" brief="Num lock key" />
    <item name="love.key_capslock" brief="Caps lock key" />
    <item name="love.key_scrollock" brief="Scroll lock key" />
    <item name="love.key_rshift" brief="Right shift key" />
    <item name="love.key_lshift" brief="Left shift key" />
    <item name="love.key_rctrl" brief="Right control key" />
    <item name="love.key_lctrl" brief="Left control key" />
    <item name="love.key_ralt" brief="Right alt key" />
    <item name="love.key_lalt" brief="Left alt key" />
    <item name="love.key_rmeta" brief="Right meta key" />
    <item name="love.key_lmeta" brief="Left meta key" />
    <item name="love.key_rsuper" brief="Right super key" />
    <item name="love.key_lsuper" brief="Left super key" />
    <item name="love.key_mode" brief="Mode key" />
    <item name="love.key_compose" brief="Compose key" />

    <item name="love.key_help" brief="Help key" />
    <item name="love.key_print" brief="Print key" />
    <item name="love.key_sysreq" brief="System request key" />
    <item name="love.key_break" brief="Break key" />
    <item name="love.key_menu" brief="Menu key" />
    <item name="love.key_power" brief="Power key" />
    <item name="love.key_euro" brief="€ key" />
    <item name="love.key_undo" brief="Undo key" />

    <item name="love.mouse_left" brief="The left mouse button." />
    <item name="love.mouse_middle" brief="The middle mouse button."  />
    <item name="love.mouse_right" brief="The right mouse button."  />
    <item name="love.mouse_wheelup" brief="Mouse wheel scrolled upwards."  />
    <item name="love.mouse_wheeldown" brief="Mouse wheel scrolled downwards."  />

    <item name="love.align_left" brief="Align to the left side." />
    <item name="love.align_center" brief="Align in the center (vertically or horizontally)." />
    <item name="love.align_right" brief="Align to the right side." />
    <item name="love.align_top" brief="Align to the top." />
    <item name="love.align_bottom" brief="Align to the bottom." />

    <item name="love.mode_loop" brief="Loops continuesly." />
    <item name="love.mode_once" brief="Plays once." />
    <item name="love.mode_bounce" brief="Bounces back and forth." />

    <item name="love.event_message" brief="A message event." />
    <item name="love.event_gui" brief="A GUI event." />

    <item name="love.blend_normal" brief="Normal blendig mode." />
    <item name="love.blend_additive" brief="Additive blending mode." />
    <item name="love.color_normal" brief="Normal color mode." />
    <item name="love.color_modulate" brief="Modulation color mode." />
    <item name="love.file_read" brief="For file reading." />
    <item name="love.file_write" brief="For file writing." />
    <item name="love.file_append" brief="For file appending." />
    <item name="love.default_font" brief="The default font (Vera)." />
    <item name="love.draw_line" brief="Draws the primitive using lines." />
    <item name="love.draw_fill" brief="Draws a filled primitive." />
    <item name="love.line_smooth" brief="Sets the lines as smooth." />
    <item name="love.line_rough" brief="Sets the lines as rough (best when drawing straight 1px wide lines)." />
    <item name="love.audio_loop" brief="Loops music or sound." />
    <item name="love.audio_mode_mono" brief="Sets the audio mode as mono." />
    <item name="love.audio_mode_stereo" brief="Sets the audio mode as stereo." />
    <item name="love.audio_quality_low" brief="Designates low audio quality (11.025KHz)." />
    <item name="love.audio_quality_medium" brief="Designates medium audio quality (22.050KHz)." />
    <item name="love.audio_quality_high" brief="Designates high audio quality (44.100KHz)." />
    <item name="love.audio_buffer_default" brief="The default buffer size for audio mixing-" />
    <item name="love.image_pad" brief="Used to pad an image upon creation." />
    <item name="love.image_optimize" brief="Used to optimize an image upon creation." />
    <item name="love.image_pad_and_optimize" brief="Used to pad &amp; optimize an image upon creation." />



  </misc>

  <misc name="Config Files" title="List of config file attributes">
  
    Each game should have a config file that specifies game title, author, version, etc. The name of this file must be "game.conf".
    A full listing of available attributes is presented below. [br /]
    [br /]
    All values are optional, but it is highly recommended to at least include title, author, and [b]love_version[/b].[br /]
	[br /]
	[div class="section"]
	  [div class="title"]Example file:[/div]
	  
        [i]# Title / author[/i][br /]
        title = "Epic Quest III"[br /]
        author = "Awesome Games"[br /]
        [i]# Display resolution[/i][br /]
        width = 800[br /]
        height = 600[br /]
        [i]# Was made for this version of LOVE:[/i][br /]
        love_version = "0.3.2"[br /]
	[/div]

    <item name="title" type="string" brief="The game title."/>
    <item name="author" type="string" brief="The author of the game."/>
    <item name="width" brief="Display resolution width."/>
    <item name="height" brief="Display resolution height."/>
    <item name="fullscreen" brief="True if fullscreen, false otherwise." />
    <item name="vsync" brief="True if attemt to enable, false otherwise." />
    <item name="fsaa" brief="Number of FSAA-buffers." />
    <item name="display_auto" type="boolean" brief="Set this to false if you want to configure the display in Lua manually." />
    <item name="love_version" type="string" brief="The LOVE-version this game was made for."/>
  
  </misc>
  
  <misc name="Keyboard shortcuts">
    All keyboard shortcuts have been removed as of version 0.3.0. The functionality they provided can now be accessed through love.system.
  </misc>


</nzai>