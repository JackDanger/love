<nzai>
  <page name="Overview">
    <section name="Introduction">
      Hello, this is the new documentation.

      [p]
      The symbolizer should be more awesome now.
      [i]Does html work?[/i] Seems like it. Ok time to test the symbolizer:
      [/p]

      [p]
      Image, Animation, love.graphics, and others. Also, there's love.mouse.setPosition.
      Now we can even talk about plural types, like Images, Fonts, and the like. List time:
      [/p]

      [ul]
      [li]OpenGL[/li]
      [li]OpenAL[/li]
      [li]FreeType[/li]
      [li]etc[/li]
      [/ul]

    </section>
    <section name="Tutorials">
    </section>
    <section name="Examples">
    </section>
    <section name="TODO">
      These should require no further work:
      [ul]
      [li] love.mouse [/li]
      [li] love.keyboard [/li]
      [li] love.timer [/li]
      [/ul]
      These need examples, but are otherwise done:
      [ul]
      [li] love.system [/li]
      [li] love.audio [/li]
      [/ul]
    </section>
  </page>

  <page name="License">
    <section name="Summary">
      Blah blah, take part in Manual Improvements!
    </section>
  </page>

  <page name="Manual Improvements">
    <section name="Help us help you!">
      
    </section>
  </page>

  <module name="love.graphics">
    The graphics module is responsible for things like window management, Images, Animations,
    Fonts, and more.


    <type name="Image" brief="Represents a drawable image.">
      Some info about image.
      <func name="getWidth" brief="Gets the width of a window.">
        <overload>
          <ret type="number" brief="The width of the image." />
        </overload>
      </func>
      <func name="setCenter" brief="Sets the center of the image.">
        <overload>
          <param name="x" />
          <param name="y" />
        </overload>
      </func>

      <see>
        love.graphics.newImage, Animation
      </see>

      <example id="1" />

    </type>



    <type name="Animation" brief="Represents your mother.">
      Some info about Animation.
    </type>

    <type name="Font" brief="Represents your mother.">
      Some info about Animation.
    </type>


    <func name="newImage" brief="Loads an image.">
      <overload brief="Loads an image given a filename.">
        <param name="filename" brief="The filepath to the image file." />
        <ret type="Image" brief="An Image object containing the display data." />
      </overload>
      <overload brief="Loads an image with a certain mode.">
        <param name="filename" brief="The filepath to the image file." />
        <param name="mode" brief="The type of image mode (padded, optimized, or both)." />
        <ret type="Image" brief="An Image object containing the display data." />
      </overload>
    </func>


    <example id="1" />
  </module>


  <module name="love.audio">

    The audio module is currently a wrapper around SDL_mixer, and has very limited
    features as of yet.

    <type name="Sound" brief="A sound effect.">
      Can load the following formats: WAVE, OGG, AIFF, RIFF and VOC. Sound is fully
      expanded into memory when the game loads. This means that if you load a
      5MB compressed .ogg file as a sound, it would consume ~50MB RAM when fully
      decompressed. Consider using Music in such cases.[br /]
      [br /]
      Note that the Sound object does not contain funcs to play itself back;
      love.audio.play must be used for this.
      <func name="setVolume" brief="Sets the volume the sound should be played at.">
        <overload>
          <param name="volume" brief="The volume (a number between 0 and 1.0)." />
        </overload>
      </func>
    </type>
    <type name="Music" brief="Streaming sound.">
      Can load the following formats: MP3, OGG, MIDI, XM, MOD,
      and a variety of other tracker formats.

      Music, unlike Sound, isn't fully decoded and expanded into
      memory when the game loads; decoding takes place during run-time.[br /]
      [br /]
      Note that the Music object itself has no funcs; it is currently only used as a handle. To play Music,
      use love.audio.play.
      <see>
        Sound, love.audio, love.audio.newMusic
      </see>
    </type>

    <func name="newSound" brief="Loads a sound file.">
      <overload>
        <param name="filename" brief="The filepath to the sound file." />
        <ret type="Sound" brief="A Sound object containing the audio data." />
      </overload>
    </func>

    <func name="newMusic" brief="Loads a music file.">
      <overload>
        <param name="filename" brief="The filepath to the music file." />
        <ret type="Music" brief="A Music object containing the audio data." />
      </overload>
    </func>

    <func name="play" brief="Plays a sound.">
      <overload>
        <param name="sound" brief="The sound to play." />
        The Sound is played a single time, on the first available channel.
      </overload>
      <overload>
        <param name="sound" brief="The sound to play." />
        <param name="loop" brief="The number of times to loop. (1 = play once, 0 = forever)." />
      </overload>
      <overload>
        <param name="music" brief="The Music object to play." />
        Remember that only one Music can play at any time. (See love.audio).
      </overload>
      <overload>
        <param name="music" brief="The Music object to play." />
        <param name="loop" brief="The number of times to loop. (1 = play once, 0 = forever)." />
        Remember that only one Music can play at any time. (See love.audio).
      </overload>
    </func>

    <func name="pause" brief="Pauses all audio playback.">
      <overload>

      </overload>
    </func>

    <func name="resume" brief="Resumes all audio playback.">
      <overload>
      </overload>
    </func>

    <func name="stop" brief="Stops all audio playback.">
      <overload>
      </overload>
    </func>

    <func name="isPlaying" brief="Checks whether (any) audio is playing or not.">
      <overload>
        <ret type="boolean" brief="True if audio is playing, false otherwise" />
      </overload>
    </func>

    <func name="isPaused" brief="Checks whether audio playback is paused or not.">
      <overload>
        <ret type="boolean" brief="True if audio is paused, false otherwise." />
      </overload>
    </func>

    <func name="setChannels" brief="Sets the amount of channels for sounds.">
      <overload>
        <param name="channels" brief="A number. Any number below 0 will have no effect." />
      </overload>
    </func>

    <func name="setMode" brief="Sets the mode for audio mixing and playback.">
      <overload>
        <param name="frequency" brief="The amount of Hz to use (love.audio_quality_low, love.audio_quality_medium, love.audio_quality_hight, or custom value)." />
        <param name="mode" brief="The audio mode (love.audio_mode_mono or love.audio_mode_stereo)." />
        <param name="buffersize" brief="The size of the buffer (bits per output per sample, use love.audio_buffer_default for default value)." />
      </overload>
    </func>

    <func name="setVolume" brief="Changes the master volume.">
      <overload>
        <param name="volume" brief="A number between 0 (min) and 1 (max)." />
      </overload>
    </func>

  </module>
  <module name="love.filesystem">
  </module>
  <!--<module name="love.physics">
  </module>-->
  <module name="love.mouse">
    Keeps track of the state of the mouse.

    <func name="getX" brief="Gets the current x-position of the mouse.">
      <overload>
        Gets the current x-position of the mouse. Use this if you for some reason
        only need the position along the x-axis. Otherwise, you probably want to use love.mouse.getPosition.
        <ret type="number" brief="Current x-position." />
        <see>
          love.mouse.getPosition, love.mouse.getY
        </see>
        <example id="3" />
      </overload>
    </func>

    <func name="getY" brief="Gets the current y-position of the mouse.">
      <overload>
        Gets the current y-position of the mouse. Use this if you for some reason
        only need the position along the y-axis. Otherwise, you probably want to use love.mouse.getPosition.
        <ret type="number" brief="Current y-position." />
        <see>
          love.mouse.getPosition, love.mouse.getX
        </see>
        <example id="3" />
      </overload>
    </func>

    <func name="getPosition" brief="Gets the current position of the mouse.">
      <overload>
        Gets the current x- and y-position of the mouse in one call. Since getting the mouse position (along both axes) is
        a fairly common task, this func was created to make it prettier.
        <ret type="number" brief="The current x position." />
        <ret type="number" brief="The current y position." />
        <example id="2" />
      </overload>
    </func>

    <func name="setPosition" brief="Sets the current position of the mouse.">
      <overload>
        Sets the current position of the mouse. Note that this generates a mousemoved event.
        If you just want to confine the mouse to the screen area, take a look at love.system.grabInput.
        <param name="x" brief="The new x-position." />
        <param name="y" brief="The new y-position." />
        <see>
          love.system.grabInput
        </see>
        <example id="4" />
      </overload>
    </func>


    <func name="isDown" brief="Checks whether a certain button is down.">
      <overload>
        Checks whether a certain mouse button is down.
        <param name="button" brief="A mouse button." />
        <ret type="boolean" brief="Whether the button is down." />
        <see>
          Constants
        </see>
        <example id="5" />
      </overload>
    </func>

    <func name="setVisible" brief="Controls cursor visbility.">
      <overload>
        Controls cursor visbility. Goes great with love.system.grabInput.
        <param name="visible" brief="True for visible, false for invisible." />
        <see>
          love.system.grabInput
        </see>
        <example id="6" />
      </overload>
    </func>

    <func name="isVisible" brief="Checks cursor visbility.">
      <overload>
        Checks cursor visbility.
        <ret type="boolean" brief="True if visible, false otherwise." />
        <see>
          love.mouse.setVisible
        </see>
        <example id="6" />
      </overload>
    </func>

    <example id="2" />

  </module>
  <module name="love.keyboard">
    Keeps track of the state of the keyboard.

    <func name="isDown" brief="Checks whether a certain key is down.">
      <overload>
        Checks whether a certain key is down. For list of accepted keys, see Constants.
        <param name="key" brief="The key in question." />
        <ret type="boolean" brief="Whether the passed key is pressed down." />
        <see>
          Constants, keypressed, keyrelreased
        </see>
        <example id="10" />
      </overload>
    </func>
    <example id="10" />
  </module>
  <module name="love.timer">

    The timer module keeps track of time between frames, so that game
    objects can be updated in a FPS-independet fashion. The precision of the
    timer is usually 1ms, although this [i]may[/i] vary from system to system. Hardware timers
    with higher precision are planned, but not implemented at the time of writing.

    <func name="getFPS" brief="Gets the current FPS.">
      <overload>
        ret the current frames-per-second. Since it is meant for display-purposes,
        the value is only updated each second (this makes the value non-erratic and human-readable
        when drawn on screen).
        <ret type="number" brief="The FPS." />
        <example id="8" />
      </overload>
    </func>
    <func name="getDelta" brief="ret the current timestep.">
      <overload>
        ret the time (in seconds) since last frame. This is the same value that is
        passed with the update-callback each frame, so you should't really need to
        use this func for antying but display purposes.
        <example id="8" />
      </overload>
      <ret type="number" brief="The current timestep." />
    </func>
    <func name="sleep" brief="Delays exection for an amount of time.">
      <overload>
        <param name="ms" brief="The amount of milliseconds." />
        Delays execution for the specified amount of milliseconds. Tragically,
        the precision varies from system to system, and is generally not very good.
        Do not expect to get better precision than the nearest 10ms.
        <example id="7" />
      </overload>
    </func>
    <func name="getTime" brief="Gets approximate time since startup.">
      <overload>
        Note that this func does not get the current time! It is meant for
        timing pieces of code. [br /][br /]Also, this func is not very precise at the moment,
        since SDL's timer is used. This will change in some time in the future when modules for timers
        with higher resolutions are created.
        <ret type="number" brief="The (approximate) time in seconds since startup." />
        <example id="9" />
      </overload>
    </func>

    <example id="7" />
    <example id="9" />

  </module>
  <module name="love.system">

    The system module controls the currently running game and provides information about
    the running LOVE version. It is not related to the underlying operating system.
    <func name="getVersion" brief="Gets the current LOVE version.">
      <overload>
        <ret type="string" brief="String containing the version." />
      </overload>
    </func>
    <func name="getCodename" brief="Gets the codename of the current LOVE version.">
      <overload>
        <ret type="string" brief="String containing the codename." />
      </overload>
    </func>
    <func name="getPlatform" brief="Gets the current platform.">
      <overload>
        <ret type="string" brief="String containing Windows, Linux ..." />
      </overload>
    </func>
    <func name="exit" brief="Exits LOVE.">
      <overload>
        Calling this func will immediately exit LOVE and free resources.
      </overload>
    </func>
    <func name="restart" brief="Restarts the current game.">
      <overload>
        The current immediately restarts.
      </overload>
    </func>
    <func name="suspend" brief="Takes LOVE to the error handler.">
      <overload>
        Calling this func will cause LOVE to enter error mode, just like when
        an error occurs. NOTE! If you actually want to cause an error, do not
        call this func, use the built-in Lua func error() instead.
      </overload>
    </func>
    <func name="resume" brief="Takes LOVE back to the main game.">
      <overload>
        This func is meant to be called from error handler scripts, and has no
        effect if called from a normal game.
      </overload>
    </func>
    <func name="grabInput" brief="Sends as much input as possible to LOVE.">
      <overload>
        <param name="grab" brief="True to grab, false to ungrab." />
        When grabbing is on, the mouse is confined to the window,
        and as much keyboard input as possible is passed directly to the current game.
        Some key combinations may still be interpreted by the window manager, such
        as Alt+Tab, Ctrl+Alt+Delete, etc.
      </overload>
    </func>
  </module>


  <callback name="load" brief="Called when the game should load.">
    This function is called exacly once at the beginning of the game. This is where
    resources such as images and sounds should be loaded.
    <example id="51" />
  </callback>

  <callback name="update" brief="Called each timestep when the game should be updated.">
    This function should update the state of the game according to the time value dt.
    <param name="dt" brief="The time since last update in seconds." />
  </callback>
  <callback name="draw" brief="Called each timestep right after update.">
    This is where you should draw things onto the screen.
  </callback>
  <callback name="mousepressed" brief="Called when the mouse is pressed.">
    <param name="x" brief="The position of the mouse on the x-axis." />
    <param name="y" brief="The position of the mouse on the y-axis." />
    <param name="button" brief="Which button is pressed." />

  </callback>
  <callback name="mousereleased" brief="Called when the mouse is released.">
    <param name="x" brief="The position of the mouse on the x-axis." />
    <param name="y" brief="The position of the mouse on the y-axis." />
    <param name="button" brief="Which button is released." />
  </callback>
  <callback name="keypressed" brief="Called when a key is pressed.">
    <param name="key" brief="The key code of the pressed key." />
  </callback>
  <callback name="keyreleased" brief="Called when a key is released.">
    <param name="key" brief="The key code of the released key." />
  </callback>


  <misc name="Function List">
    Whooptido.
  </misc>

  <misc name="Example List">
    Whooptido TWOOOO.
  </misc>

  <misc name="Constants" title="List of constants">
    This is the complete list of constants available in LOVE.
    <item name="love.key_unknown" brief="Represents an unknown key" />
    <item name="love.key_first" />
    <item name="love.key_backspace" brief="Backspace key" />
    <item name="love.key_tab" brief="Tab key" />
    <item name="love.key_clear" />
    <item name="love.key_return" brief="Carriage return key" />
    <item name="love.key_pause" brief="Pause key" />
    <item name="love.key_escape" brief="Escape key" />
    <item name="love.key_space" brief="Spacebar key" />
    <item name="love.key_exclaim" brief="! key" />
    <item name="love.key_quotedbl" />
    <item name="love.key_hash" brief="# key" />
    <item name="love.key_dollar" brief="$ key" />
    <item name="love.key_ampersand" brief="&amp; key" />
    <item name="love.key_quote" brief='" key' />
    <item name="love.key_leftparen" brief="( key" />
    <item name="love.key_rightparen" brief=") key" />
    <item name="love.key_asterisk" brief="* key" />
    <item name="love.key_plus" brief="+ key" />
    <item name="love.key_comma" brief=", key" />
    <item name="love.key_minus" brief="- key" />
    <item name="love.key_period" brief=". key" />
    <item name="love.key_slash" brief="/ key" />
    <item name="love.key_0" brief="0 key" />
    <item name="love.key_1" brief="1 key" />
    <item name="love.key_2" brief="2 key" />
    <item name="love.key_3" brief="3 key" />
    <item name="love.key_4" brief="4 key" />
    <item name="love.key_5" brief="5 key" />
    <item name="love.key_6" brief="6 key" />
    <item name="love.key_7" brief="7 key" />
    <item name="love.key_8" brief="8 key" />
    <item name="love.key_9" brief="9 key" />
    <item name="love.key_colon" brief=": key" />
    <item name="love.key_semicolon" brief="; key" />
    <item name="love.key_less" brief="&lt; key" />
    <item name="love.key_equals" brief="= key" />
    <item name="love.key_greater" brief="&gt; key" />
    <item name="love.key_question" brief="? key" />
    <item name="love.key_at" brief="@ key" />

    <item name="love.key_leftbracket" brief="[ key" />
    <item name="love.key_backslash" brief="\ key" />
    <item name="love.key_rightbracket" brief="] key" />
    <item name="love.key_caret" brief="^ key" />
    <item name="love.key_underscore" brief="_ key" />
    <item name="love.key_backquote" brief=" key" />
    <item name="love.key_a" brief="A key" />
    <item name="love.key_b" brief="B key" />
    <item name="love.key_c" brief="C key" />
    <item name="love.key_d" brief="D key" />
    <item name="love.key_e" brief="E key" />
    <item name="love.key_f" brief="F key" />
    <item name="love.key_g" brief="G key" />
    <item name="love.key_h" brief="H key" />
    <item name="love.key_i" brief="I key" />
    <item name="love.key_j" brief="J key" />
    <item name="love.key_k" brief="K key" />
    <item name="love.key_l" brief="L key" />
    <item name="love.key_m" brief="M key" />
    <item name="love.key_n" brief="N key" />
    <item name="love.key_o" brief="O key" />
    <item name="love.key_p" brief="P key" />
    <item name="love.key_q" brief="Q key" />
    <item name="love.key_r" brief="R key" />
    <item name="love.key_s" brief="S key" />
    <item name="love.key_t" brief="T key" />
    <item name="love.key_u" brief="U key" />
    <item name="love.key_v" brief="V key" />
    <item name="love.key_w" brief="W key" />
    <item name="love.key_x" brief="X key" />
    <item name="love.key_y" brief="Y key" />
    <item name="love.key_z" brief="Z key" />
    <item name="love.key_delete" brief="Delete key" />

    <item name="love.key_kp0" brief="Keypad 0" />
    <item name="love.key_kp1" brief="Keypad 1" />
    <item name="love.key_kp2" brief="Keypad 2" />
    <item name="love.key_kp3" brief="Keypad 3" />
    <item name="love.key_kp4" brief="Keypad 4" />
    <item name="love.key_kp5" brief="Keypad 5" />
    <item name="love.key_kp6" brief="Keypad 6" />
    <item name="love.key_kp7" brief="Keypad 7" />
    <item name="love.key_kp8" brief="Keypad 8" />
    <item name="love.key_kp9" brief="Keypad 9" />
    <item name="love.key_kp_period" brief="Keypad ." />
    <item name="love.key_kp_divide" brief="Keypad /" />
    <item name="love.key_kp_multiply" brief="Keypad *" />
    <item name="love.key_kp_minus" brief="Keypad -" />
    <item name="love.key_kp_plus" brief="Keypad +" />
    <item name="love.key_kp_enter" brief="Keypad enter" />
    <item name="love.key_kp_equals" brief="Keypad =" />

    <item name="love.key_up" brief="Up key" />
    <item name="love.key_down" brief="Down key" />
    <item name="love.key_right" brief="Right key" />
    <item name="love.key_left" brief="Left key" />
    <item name="love.key_insert" brief="Insert key" />
    <item name="love.key_home" brief="Home key" />
    <item name="love.key_end" brief="End key" />
    <item name="love.key_pageup" brief="Page Up key" />
    <item name="love.key_pagedown" brief="Page Down key" />

    <item name="love.key_f1" brief="F1 key" />
    <item name="love.key_f2" brief="F2 key" />
    <item name="love.key_f3" brief="F3 key" />
    <item name="love.key_f4" brief="F4 key" />
    <item name="love.key_f5" brief="F5 key" />
    <item name="love.key_f6" brief="F6 key" />
    <item name="love.key_f7" brief="F7 key" />
    <item name="love.key_f8" brief="F8 key" />
    <item name="love.key_f9" brief="F9 key" />
    <item name="love.key_f10" brief="F10 key" />
    <item name="love.key_f11" brief="F11 key" />
    <item name="love.key_f12" brief="F12 key" />
    <item name="love.key_f13" brief="F13 key" />
    <item name="love.key_f14" brief="F14 key" />
    <item name="love.key_f15" brief="F15 key" />

    <item name="love.key_numlock" brief="Num lock key" />
    <item name="love.key_capslock" brief="Caps lock key" />
    <item name="love.key_scrollock" brief="Scroll lock key" />
    <item name="love.key_rshift" brief="Right shift key" />
    <item name="love.key_lshift" brief="Left shift key" />
    <item name="love.key_rctrl" brief="Right control key" />
    <item name="love.key_lctrl" brief="Left control key" />
    <item name="love.key_ralt" brief="Right alt key" />
    <item name="love.key_lalt" brief="Left alt key" />
    <item name="love.key_rmeta" brief="Right meta key" />
    <item name="love.key_lmeta" brief="Left meta key" />
    <item name="love.key_rsuper" brief="Right super key" />
    <item name="love.key_lsuper" brief="Left super key" />
    <item name="love.key_mode" brief="Mode key" />
    <item name="love.key_compose" brief="Compose key" />

    <item name="love.key_help" brief="Help key" />
    <item name="love.key_print" brief="Print key" />
    <item name="love.key_sysreq" brief="System request key" />
    <item name="love.key_break" brief="Break key" />
    <item name="love.key_menu" brief="Menu key" />
    <item name="love.key_power" brief="Power key" />
    <item name="love.key_euro" brief="€ key" />
    <item name="love.key_undo" brief="Undo key" />

    <item name="love.mouse_left" brief="The left mouse button." />
    <item name="love.mouse_middle" brief="The middle mouse button."  />
    <item name="love.mouse_right" brief="The right mouse button."  />
    <item name="love.mouse_wheelup" brief="Mouse wheel scrolled upwards."  />
    <item name="love.mouse_wheeldown" brief="Mouse wheel scrolled downwards."  />

    <item name="love.align_left" brief="Align to the left side." />
    <item name="love.align_center" brief="Align in the center (vertically or horizontally)." />
    <item name="love.align_right" brief="Align to the right side." />
    <item name="love.align_top" brief="Align to the top." />
    <item name="love.align_bottom" brief="Align to the bottom." />

    <item name="love.mode_loop" brief="Loops continuesly." />
    <item name="love.mode_once" brief="Plays once." />
    <item name="love.mode_bounce" brief="Bounces back and forth." />

    <item name="love.event_message" brief="A message event." />
    <item name="love.event_gui" brief="A GUI event." />

    <item name="love.blend_normal" brief="Normal blendig mode." />
    <item name="love.blend_additive" brief="Additive blending mode." />
    <item name="love.color_normal" brief="Normal color mode." />
    <item name="love.color_modulate" brief="Modulation color mode." />
    <item name="love.file_read" brief="For file reading." />
    <item name="love.file_write" brief="For file writing." />
    <item name="love.file_append" brief="For file appending." />
    <item name="love.default_font" brief="The default font (Vera)." />
    <item name="love.draw_line" brief="Draws the primitive using lines." />
    <item name="love.draw_fill" brief="Draws a filled primitive." />
    <item name="love.line_smooth" brief="Sets the lines as smooth." />
    <item name="love.line_rough" brief="Sets the lines as rough (best when drawing straight 1px wide lines)." />
    <item name="love.audio_loop" brief="Loops music or sound." />
    <item name="love.audio_mode_mono" brief="Sets the audio mode as mono." />
    <item name="love.audio_mode_stereo" brief="Sets the audio mode as stereo." />
    <item name="love.audio_quality_low" brief="Designates low audio quality (11.025KHz)." />
    <item name="love.audio_quality_medium" brief="Designates medium audio quality (22.050KHz)." />
    <item name="love.audio_quality_high" brief="Designates high audio quality (44.100KHz)." />
    <item name="love.audio_buffer_default" brief="The default buffer size for audio mixing-" />
    <item name="love.image_pad" brief="Used to pad an image upon creation." />
    <item name="love.image_optimize" brief="Used to optimize an image upon creation." />
    <item name="love.image_pad_and_optimize" brief="Used to pad &amp; optimize an image upon creation." />



  </misc>

  <misc name="Config Files">

  </misc>


</nzai>