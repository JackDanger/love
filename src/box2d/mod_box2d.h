/*
* LOVE: Totally Awesome 2D Gaming.
* Website: http://love.sourceforge.net
* Licence: ZLIB/libpng
* Copyright (c) 2006-2008 LOVE Development Team
*
* This file was AUTOGENERATED by swigfusion! Please
* do not edit this file manually.
* 
* @author Anders Ruud / swigfusion
* @date 2008-08-12
**/

#ifndef LOVE_MOD_FUSION_BOX2D_H
#define LOVE_MOD_FUSION_BOX2D_H

// Boost
#include <boost/shared_ptr.hpp>


// Function from SWIG which opens the module.
extern "C" {
    int luaopen_mod_box2d(lua_State * L);
}

// Types found:
// Contact (SWIGTYPE_p_boost__shared_ptrT_love_box2d__Contact_t)
// PolygonShape (SWIGTYPE_p_boost__shared_ptrT_love_box2d__PolygonShape_t)
// World (SWIGTYPE_p_boost__shared_ptrT_love_box2d__World_t)
// CircleShape (SWIGTYPE_p_boost__shared_ptrT_love_box2d__CircleShape_t)
// Shape (SWIGTYPE_p_boost__shared_ptrT_love_box2d__Shape_t)
// Body (SWIGTYPE_p_boost__shared_ptrT_love_box2d__Body_t)

// Fused: 
// World::getCallback => _wrap_method_World_getCallback
// World::setCallback => _wrap_method_World_setCallback
// Body::getPosition => _wrap_method_Body_getPosition
// Shape::getCategory => _wrap_method_Shape_getCategory
// Shape::getData => _wrap_method_Shape_getData
// Shape::setCategory => _wrap_method_Shape_setCategory
// Shape::setData => _wrap_method_Shape_setData
// Shape::getMask => _wrap_method_Shape_getMask
// Shape::setMask => _wrap_method_Shape_setMask
// CircleShape::getCategory => _wrap_method_CircleShape_getCategory
// CircleShape::getData => _wrap_method_CircleShape_getData
// CircleShape::setCategory => _wrap_method_CircleShape_setCategory
// CircleShape::setData => _wrap_method_CircleShape_setData
// CircleShape::getMask => _wrap_method_CircleShape_getMask
// CircleShape::setMask => _wrap_method_CircleShape_setMask
// PolygonShape::getCategory => _wrap_method_PolygonShape_getCategory
// PolygonShape::getData => _wrap_method_PolygonShape_getData
// PolygonShape::getPoints => _wrap_method_PolygonShape_getPoints
// PolygonShape::setCategory => _wrap_method_PolygonShape_setCategory
// PolygonShape::setData => _wrap_method_PolygonShape_setData
// PolygonShape::getMask => _wrap_method_PolygonShape_getMask
// PolygonShape::setMask => _wrap_method_PolygonShape_setMask
// Contact::getPosition => _wrap_method_Contact_getPosition
// Contact::getVelocity => _wrap_method_Contact_getVelocity
// Contact::getNormal => _wrap_method_Contact_getNormal

namespace love_box2d
{

	//Forward declarations.
	class Contact;
	class PolygonShape;
	class World;
	class CircleShape;
	class Shape;
	class Body;

	bool mod_is_contact(lua_State * L, int idx);
	boost::shared_ptr<Contact> mod_to_contact(lua_State * L, int idx);
	void mod_push_contact(lua_State * L, boost::shared_ptr<Contact> contact);

	bool mod_is_polygonshape(lua_State * L, int idx);
	boost::shared_ptr<PolygonShape> mod_to_polygonshape(lua_State * L, int idx);
	void mod_push_polygonshape(lua_State * L, boost::shared_ptr<PolygonShape> polygonshape);

	bool mod_is_world(lua_State * L, int idx);
	boost::shared_ptr<World> mod_to_world(lua_State * L, int idx);
	void mod_push_world(lua_State * L, boost::shared_ptr<World> world);

	bool mod_is_circleshape(lua_State * L, int idx);
	boost::shared_ptr<CircleShape> mod_to_circleshape(lua_State * L, int idx);
	void mod_push_circleshape(lua_State * L, boost::shared_ptr<CircleShape> circleshape);

	bool mod_is_shape(lua_State * L, int idx);
	boost::shared_ptr<Shape> mod_to_shape(lua_State * L, int idx);
	void mod_push_shape(lua_State * L, boost::shared_ptr<Shape> shape);

	bool mod_is_body(lua_State * L, int idx);
	boost::shared_ptr<Body> mod_to_body(lua_State * L, int idx);
	void mod_push_body(lua_State * L, boost::shared_ptr<Body> body);

} // love_box2d

#endif
