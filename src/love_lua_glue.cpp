// Made by AutoLOVE
// IGNORE WARNINGS PLZ
#pragma warning( push )
#pragma warning ( disable : 4005)
#pragma warning ( disable : 4244)
#pragma warning ( disable : 4102)
#pragma warning ( disable : 4800)


/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.29
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC)
#   if (__SUNPRO_CC <= 0x560)
#     define SWIGTEMPLATEDISAMBIGUATOR template
#   else
#     define SWIGTEMPLATEDISAMBIGUATOR 
#   endif
# else
#   define SWIGTEMPLATEDISAMBIGUATOR 
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic CAPI SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "2"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The swig conversion methods, as ConvertPtr, return and integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old swig versions, you usually write code as:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit as:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   that seems to be the same, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   requires also to SWIG_ConvertPtr to return new result values, as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   swig errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()


 */
#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))


/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif




#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store inforomation on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (l1 - f1) - (l2 - f2);
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/* think of this as a c++ template<> or a scheme macro */
#define SWIG_TypeCheck_Template(comparison, ty)         \
  if (ty) {                                             \
    swig_cast_info *iter = ty->cast;                    \
    while (iter) {                                      \
      if (comparison) {                                 \
        if (iter == ty->cast) return iter;              \
        /* Move iter to the top of the linked list */   \
        iter->prev->next = iter->next;                  \
        if (iter->next)                                 \
          iter->next->prev = iter->prev;                \
        iter->next = ty->cast;                          \
        iter->prev = 0;                                 \
        if (ty->cast) ty->cast->prev = iter;            \
        ty->cast = iter;                                \
        return iter;                                    \
      }                                                 \
      iter = iter->next;                                \
    }                                                   \
  }                                                     \
  return 0

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  SWIG_TypeCheck_Template(strcmp(iter->type->name, c) == 0, ty);
}

/* Same as previous function, except strcmp is replaced with a pointer comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *into) {
  SWIG_TypeCheck_Template(iter->type == from, into);
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <assert.h>	/* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5

/* Structure for command table (replaced by luaLib's luaL_reg) */
/*typedef struct {
  const char *name;
  lua_CFunction wrapper;
} swig_lua_command_info;*/

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

typedef struct {
  const char     *name;
  lua_CFunction   method;
} swig_lua_method;

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;

typedef struct swig_lua_class {
  const char         *name;
  swig_type_info   **type;
  lua_CFunction       constructor;
  void              (*destructor)(void *);
  swig_lua_method        *methods;
  swig_lua_attribute     *attributes;
  struct swig_lua_class **bases;
} swig_lua_class;

typedef struct {
  void             *ptr;
  swig_type_info   *type;
  int               own;	/* 1 if owned & must be destroyed */
} swig_lua_userdata;


/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner) \
  SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags) \
	SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname) \
	SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { lua_pushstring(L, (char *) msg); goto fail; } else



/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(I) {lua_pushfstring(L,"argument %d incorrect/missing",I);goto fail;}

#define SWIG_Lua_get_table(L,n) \
	(lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
		   (lua_pushstring(L, n), \
			lua_pushcfunction(L, f), \
			lua_rawset(L,-3))

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* the module.get method used for getting linked data */
SWIGINTERN int SWIG_Lua_module_get(lua_State* L)
{
/*	there should be 2 params passed in
	(1) table (not the meta table)
	(2) string name of the attribute
	printf("SWIG_Lua_module_get %p(%s) '%s'\n",
				lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
				lua_tostring(L,2));
*/
	/* get the metatable */
	assert(lua_istable(L,1));	/* just in case */
	lua_getmetatable(L,1);	/* get the metatable */
	assert(lua_istable(L,-1));	/* just in case */
	SWIG_Lua_get_table(L,".get");	/* get the .get table */
	lua_remove(L,3);	/* remove metatable */
	if (lua_istable(L,-1))
	{
		/* look for the key in the .get table */
		lua_pushvalue(L,2);  /* key */
		lua_rawget(L,-2);
		lua_remove(L,3);	/* remove .get */
		if (lua_iscfunction(L,-1))
		{	/* found it so call the fn & return its value */
			lua_call(L,0,1);
			return 1;
		}
		lua_pop(L,1);	/* remove the top */
	}
	lua_pop(L,1);	/* remove the .get */
	lua_pushnil(L);	/* return a nil */
    return 1;
}

/* the module.set method used for setting linked data */
SWIGINTERN int SWIG_Lua_module_set(lua_State* L)
{
/*	there should be 3 params passed in
	(1) table (not the meta table)
	(2) string name of the attribute
	(3) any for the new value
*/
	/* get the metatable */
	assert(lua_istable(L,1));	/* just in case */
	lua_getmetatable(L,1);	/* get the metatable */
	assert(lua_istable(L,-1));	/* just in case */
	SWIG_Lua_get_table(L,".set");	/* get the .set table */
	lua_remove(L,4);	/* remove metatable */
	if (lua_istable(L,-1))
	{
		/* look for the key in the .set table */
		lua_pushvalue(L,2);  /* key */
		lua_rawget(L,-2);
		lua_remove(L,4);	/* remove .set */
		if (lua_iscfunction(L,-1))
		{	/* found it so call the fn & return its value */
			lua_pushvalue(L,3);  /* value */
			lua_call(L,1,0);
			return 0;
		}
		lua_pop(L,1);	/* remove the top */
	}
	lua_pop(L,1);	/* remove the .set */
    return 0;
}

/* registering a module in lua */
SWIGINTERN void  SWIG_Lua_module_begin(lua_State* L,const char* name)
{
	assert(lua_istable(L,-1));	/* just in case */
	lua_pushstring(L,name);
	lua_newtable(L);				/* the table */
	/* add meta table */
	lua_newtable(L);		/* the meta table */
	SWIG_Lua_add_function(L,"__index",SWIG_Lua_module_get);
	SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_module_set);
	lua_pushstring(L,".get");
	lua_newtable(L);		/* the .get table */
	lua_rawset(L,-3);       /* add .get into metatable */
	lua_pushstring(L,".set");
	lua_newtable(L);		/* the .set table */
	lua_rawset(L,-3);       /* add .set into metatable */
	lua_setmetatable(L,-2);	/* sets meta table in module */
	lua_rawset(L,-3);                  /* add module into parent */
	SWIG_Lua_get_table(L,name);				/* get the table back out */
}

/* ending the register */
SWIGINTERN void  SWIG_Lua_module_end(lua_State* L)
{
	lua_pop(L,1);                      /* tidy stack (remove module) */
}

/* adding a linked variable to the module */
SWIGINTERN void SWIG_Lua_module_add_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
	assert(lua_istable(L,-1));	/* just in case */
	lua_getmetatable(L,-1);	/* get the metatable */
	assert(lua_istable(L,-1));	/* just in case */
	SWIG_Lua_get_table(L,".get"); /* find the .get table */
	assert(lua_istable(L,-1));	/* should be a table: */
	SWIG_Lua_add_function(L,name,getFn);
	lua_pop(L,1);                      /* tidy stack (remove table) */
	if (setFn)	/* if there is a set fn */
	{
		SWIG_Lua_get_table(L,".set"); /* find the .set table */
		assert(lua_istable(L,-1));	/* should be a table: */
		SWIG_Lua_add_function(L,name,setFn);
		lua_pop(L,1);                      /* tidy stack (remove table) */
	}
	lua_pop(L,1);                      /* tidy stack (remove meta) */
}

/* adding a function module */
SWIGINTERN void  SWIG_Lua_module_add_function(lua_State* L,const char* name,lua_CFunction fn)
{
	SWIG_Lua_add_function(L,name,fn);
}

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

/* the class.get method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_get(lua_State* L)
{
/*	there should be 2 params passed in
	(1) userdata (not the meta table)
	(2) string name of the attribute
*/
	assert(lua_isuserdata(L,-2));	/* just in case */
	lua_getmetatable(L,-2);		/* get the meta table */
	assert(lua_istable(L,-1));	/* just in case */
	SWIG_Lua_get_table(L,".get"); /* find the .get table */
	assert(lua_istable(L,-1));	/* just in case */
	/* look for the key in the .get table */
	lua_pushvalue(L,2);  /* key */
	lua_rawget(L,-2);
	lua_remove(L,-2); /* stack tidy, remove .get table */
	if (lua_iscfunction(L,-1))
	{	/* found it so call the fn & return its value */
		lua_pushvalue(L,1);  /* the userdata */
		lua_call(L,1,1);	/* 1 value in (userdata),1 out (result) */
		lua_remove(L,-2); /* stack tidy, remove metatable */
		return 1;
	}
	lua_pop(L,1);	/* remove whatever was there */
	/* ok, so try the .fn table */
	SWIG_Lua_get_table(L,".fn"); /* find the .get table */
	assert(lua_istable(L,-1));	/* just in case */
	lua_pushvalue(L,2);  /* key */
	lua_rawget(L,-2);	/* look for the fn */
	lua_remove(L,-2); /* stack tidy, remove .fn table */
	if (lua_iscfunction(L,-1))
	{	/* found it so return the fn & let lua call it */
		lua_remove(L,-2); /* stack tidy, remove metatable */
		return 1;
	}
	lua_pop(L,1);	/* remove whatever was there */
	/* NEW: looks for the __getitem() fn
	this is a user provided get fn */
	SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
	if (lua_iscfunction(L,-1))	/* if its there */
	{	/* found it so call the fn & return its value */
		lua_pushvalue(L,1);  /* the userdata */
		lua_pushvalue(L,2);  /* the parameter */
		lua_call(L,2,1);	/* 2 value in (userdata),1 out (result) */
		lua_remove(L,-2); /* stack tidy, remove metatable */
		return 1;
	}
	return 0;	/* sorry not known */
}

/* the class.set method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_set(lua_State* L)
{
/*	there should be 3 params passed in
	(1) table (not the meta table)
	(2) string name of the attribute
	(3) any for the new value
printf("SWIG_Lua_class_set %p(%s) '%s' %p(%s)\n",
			lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
			lua_tostring(L,2),
			lua_topointer(L,3),lua_typename(L,lua_type(L,3)));*/

	assert(lua_isuserdata(L,1));	/* just in case */
	lua_getmetatable(L,1);		/* get the meta table */
	assert(lua_istable(L,-1));	/* just in case */

	SWIG_Lua_get_table(L,".set"); /* find the .set table */
	if (lua_istable(L,-1))
	{
		/* look for the key in the .set table */
		lua_pushvalue(L,2);  /* key */
		lua_rawget(L,-2);
		if (lua_iscfunction(L,-1))
		{	/* found it so call the fn & return its value */
			lua_pushvalue(L,1);  /* userdata */
			lua_pushvalue(L,3);  /* value */
			lua_call(L,2,0);
			return 0;
		}
		lua_pop(L,1);	/* remove the value */
	}
	lua_pop(L,1);	/* remove the value .set table */
	/* NEW: looks for the __setitem() fn
	this is a user provided set fn */
	SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
	if (lua_iscfunction(L,-1))	/* if its there */
	{	/* found it so call the fn & return its value */
		lua_pushvalue(L,1);  /* the userdata */
		lua_pushvalue(L,2);  /* the parameter */
		lua_pushvalue(L,3);  /* the value */
		lua_call(L,3,0);	/* 3 values in ,0 out */
		lua_remove(L,-2); /* stack tidy, remove metatable */
		return 1;
	}
	return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State* L)
{
/*	there should be 1 params passed in
	(1) userdata (not the meta table) */
	swig_lua_userdata* usr;
	swig_lua_class* clss;
	assert(lua_isuserdata(L,-1));	/* just in case */
	usr=(swig_lua_userdata*)lua_touserdata(L,-1);	/* get it */
	/* if must be destroyed & has a destructor */
	if (usr->own) /* if must be destroyed */
	{
		clss=(swig_lua_class*)usr->type->clientdata;	/* get the class */
		if (clss && clss->destructor)	/* there is a destroy fn */
		{
			clss->destructor(usr->ptr);	/* bye bye */
		}
	}
	return 0;
}

/* gets the swig class registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State* L)
{
	/* add this all into the swig registry: */
	lua_pushstring(L,"SWIG");
	lua_rawget(L,LUA_REGISTRYINDEX);	/* get the registry */
	if (!lua_istable(L,-1))	/* not there */
	{	/* must be first time, so add it */
		lua_pop(L,1);	/* remove the result */
		lua_pushstring(L,"SWIG");
		lua_newtable(L);
		lua_rawset(L,LUA_REGISTRYINDEX);
		/* then get it */
		lua_pushstring(L,"SWIG");
		lua_rawget(L,LUA_REGISTRYINDEX);
	}
}

/* helper fn to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State* L,const char* cname)
{
	SWIG_Lua_get_class_registry(L);	/* get the registry */
	lua_pushstring(L,cname);	/* get the name */
	lua_rawget(L,-2);		/* get it */
	lua_remove(L,-2);		/* tidy up (remove registry) */
}

/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_class_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
	assert(lua_istable(L,-1));	/* just in case */
	SWIG_Lua_get_table(L,".get"); /* find the .get table */
	assert(lua_istable(L,-1));	/* just in case */
	SWIG_Lua_add_function(L,name,getFn);
	lua_pop(L,1);                      /* tidy stack (remove table) */
	if (setFn)
	{
		SWIG_Lua_get_table(L,".set"); /* find the .set table */
		assert(lua_istable(L,-1));	/* just in case */
		SWIG_Lua_add_function(L,name,setFn);
		lua_pop(L,1);                      /* tidy stack (remove table) */
	}
}

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_details(lua_State* L,swig_lua_class* clss)
{
	int i;
	/* call all the base classes first: we can then override these later: */
	for(i=0;clss->bases[i];i++)
	{
		SWIG_Lua_add_class_details(L,clss->bases[i]);
	}
	/* add fns */
	for(i=0;clss->attributes[i].name;i++){
		SWIG_Lua_add_class_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
	}
	/* add methods to the metatable */
	SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
	assert(lua_istable(L,-1));	/* just in case */
	for(i=0;clss->methods[i].name;i++){
		SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
	}
	lua_pop(L,1);                      /* tidy stack (remove table) */
	/* 	add operator overloads
		these look ANY method which start with "__" and assume they
		are operator overloads & add them to the metatable
		(this might mess up is someone defines a method __gc (the destructor)*/
	for(i=0;clss->methods[i].name;i++){
		if (clss->methods[i].name[0]=='_' && clss->methods[i].name[1]=='_'){
			SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
		}
	}
}

/* performs the entire class registration process */
SWIGINTERN void  SWIG_Lua_class_register(lua_State* L,swig_lua_class* clss)
{
/*	add its constructor to module with the name of the class
	so you can do MyClass(...) as well as new_MyClass(...)
	BUT only if a constructor is defined
	(this overcomes the problem of pure virtual classes without constructors)*/
	if (clss->constructor)
		SWIG_Lua_add_function(L,clss->name,clss->constructor);

	SWIG_Lua_get_class_registry(L);	/* get the registry */
	lua_pushstring(L,clss->name);	/* get the name */
	lua_newtable(L);		/* create the metatable */
	/* add string of class name called ".type" */
	lua_pushstring(L,".type");
	lua_pushstring(L,clss->name);
	lua_rawset(L,-3);
	/* add a table called ".get" */
	lua_pushstring(L,".get");
	lua_newtable(L);
	lua_rawset(L,-3);
	/* add a table called ".set" */
	lua_pushstring(L,".set");
	lua_newtable(L);
	lua_rawset(L,-3);
	/* add a table called ".fn" */
	lua_pushstring(L,".fn");
	lua_newtable(L);
	lua_rawset(L,-3);
	/* add accessor fns for using the .get,.set&.fn */
	SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
	SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
	SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
	/* add it */
	lua_rawset(L,-3);	/* metatable into registry */
	lua_pop(L,1);           /* tidy stack (remove registry) */

	SWIG_Lua_get_class_metatable(L,clss->name);
	SWIG_Lua_add_class_details(L,clss);	/* recursive adding of details (atts & ops) */
	lua_pop(L,1);           /* tidy stack (remove class metatable) */
}

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State* L,void* ptr,swig_type_info *type, int own)
{
	swig_lua_userdata* usr;
	if (!ptr){
		lua_pushnil(L);
		return;
	}
	usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));	/* get data */
	usr->ptr=ptr;	/* set the ptr */
	usr->type=type;
	usr->own=own;
	if (type->clientdata)	/* there is clientdata: so add the metatable */
	{
		SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->name);
		if (lua_istable(L,-1))
		{
			lua_setmetatable(L,-2);
		}
		else
		{
			lua_pop(L,1);
		}
	}
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State* L,int index,void** ptr,swig_type_info *type,int flags)
{
	swig_lua_userdata* usr;
	swig_cast_info *cast;
	usr=(swig_lua_userdata*)lua_touserdata(L,index);	/* get data */
	if (usr)
	{
		cast=SWIG_TypeCheckStruct(usr->type,type);
		if (cast)
		{
			*ptr=SWIG_TypeCast(cast,usr->ptr);
			return 0;	/* ok */
		}
	}
	return 1;	/* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State* L,int index,swig_type_info *type,int flags,
						int argnum,const char* func_name){
	void* result;
	if (SWIG_ConvertPtr(L,index,&result,type,flags)){
		lua_pushfstring(L,"Error in %s, expected a %s at argument number %d\n",
			func_name,(type && type->str)?type->str:"void*",argnum);
		lua_error(L);
	}
	return result;
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State* L)
{
	swig_lua_userdata* usr;
	if (!lua_isuserdata(L,1))	/* just in case */
		return 0;	/* nil reply */
	usr=(swig_lua_userdata*)lua_touserdata(L,1);	/* get data */
	lua_pushstring(L,usr->type->name);
	return 1;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_equal(lua_State* L)
{
	int result;
	swig_lua_userdata *usr1,*usr2;
	if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))	/* just in case */
		return 0;	/* nil reply */
	usr1=(swig_lua_userdata*)lua_touserdata(L,1);	/* get data */
	usr2=(swig_lua_userdata*)lua_touserdata(L,2);	/* get data */
	result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type);
	lua_pushboolean(L,result);
	return 1;
}


/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State* L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(double)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(double)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
    /* TODO?? */
/*      obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype)); */
      break;
    default:
      break;
    }
  }
}

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State* L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
  	ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);	/* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State* L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_Vector swig_types[0]
#define SWIGTYPE_boost__shared_ptrTlove__AbstractColor_t swig_types[1]
#define SWIGTYPE_boost__shared_ptrTlove__AbstractFont_t swig_types[2]
#define SWIGTYPE_love__DisplayMode swig_types[3]
#define SWIGTYPE_pEvent swig_types[4]
#define SWIGTYPE_p_Color swig_types[5]
#define SWIGTYPE_p_GUIList swig_types[6]
#define SWIGTYPE_p_Vector swig_types[7]
#define SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t swig_types[8]
#define SWIGTYPE_p_boost__shared_ptrTlove__AbstractDisplay_t swig_types[9]
#define SWIGTYPE_p_boost__shared_ptrTlove__AbstractFont_t swig_types[10]
#define SWIGTYPE_p_boost__shared_ptrTlove__AbstractGraphics_t swig_types[11]
#define SWIGTYPE_p_boost__shared_ptrTlove__AbstractImage_t swig_types[12]
#define SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t swig_types[13]
#define SWIGTYPE_p_boost__shared_ptrTlove__AbstractMusic_t swig_types[14]
#define SWIGTYPE_p_boost__shared_ptrTlove__AbstractSoundDevice_t swig_types[15]
#define SWIGTYPE_p_boost__shared_ptrTlove__AbstractSound_t swig_types[16]
#define SWIGTYPE_p_boost__shared_ptrTlove__Bezier_t swig_types[17]
#define SWIGTYPE_p_boost__shared_ptrTlove__Button_t swig_types[18]
#define SWIGTYPE_p_boost__shared_ptrTlove__CheckBox_t swig_types[19]
#define SWIGTYPE_p_boost__shared_ptrTlove__DisplayMode_t swig_types[20]
#define SWIGTYPE_p_boost__shared_ptrTlove__DropDown_t swig_types[21]
#define SWIGTYPE_p_boost__shared_ptrTlove__Event_t swig_types[22]
#define SWIGTYPE_p_boost__shared_ptrTlove__FrameAnimation_t swig_types[23]
#define SWIGTYPE_p_boost__shared_ptrTlove__GUIElement_t swig_types[24]
#define SWIGTYPE_p_boost__shared_ptrTlove__GUIEvent_t swig_types[25]
#define SWIGTYPE_p_boost__shared_ptrTlove__Label_t swig_types[26]
#define SWIGTYPE_p_boost__shared_ptrTlove__ListBox_t swig_types[27]
#define SWIGTYPE_p_boost__shared_ptrTlove__LuaGL_t swig_types[28]
#define SWIGTYPE_p_boost__shared_ptrTlove__Menu_t swig_types[29]
#define SWIGTYPE_p_boost__shared_ptrTlove__MessageEvent_t swig_types[30]
#define SWIGTYPE_p_boost__shared_ptrTlove__MultilineLabel_t swig_types[31]
#define SWIGTYPE_p_boost__shared_ptrTlove__ObjectFactory_t swig_types[32]
#define SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t swig_types[33]
#define SWIGTYPE_p_boost__shared_ptrTlove__RadioButton_t swig_types[34]
#define SWIGTYPE_p_boost__shared_ptrTlove__Slider_t swig_types[35]
#define SWIGTYPE_p_boost__shared_ptrTlove__TextBox_t swig_types[36]
#define SWIGTYPE_p_boost__shared_ptrTlove__TextField_t swig_types[37]
#define SWIGTYPE_p_boost__shared_ptrTlove__Timer_t swig_types[38]
#define SWIGTYPE_p_gcn__ActionEvent swig_types[39]
#define SWIGTYPE_p_gcn__Graphics swig_types[40]
#define SWIGTYPE_p_gcn__Widget swig_types[41]
#define SWIGTYPE_p_int swig_types[42]
#define SWIGTYPE_p_listTlove__particle_t swig_types[43]
#define SWIGTYPE_p_love__AbstractColor swig_types[44]
#define SWIGTYPE_p_love__AbstractDisplay swig_types[45]
#define SWIGTYPE_p_love__AbstractFont swig_types[46]
#define SWIGTYPE_p_love__AbstractGUI swig_types[47]
#define SWIGTYPE_p_love__AbstractGraphics swig_types[48]
#define SWIGTYPE_p_love__AbstractImage swig_types[49]
#define SWIGTYPE_p_love__AbstractMenu swig_types[50]
#define SWIGTYPE_p_love__AbstractMusic swig_types[51]
#define SWIGTYPE_p_love__AbstractSound swig_types[52]
#define SWIGTYPE_p_love__AbstractSoundDevice swig_types[53]
#define SWIGTYPE_p_love__Bezier swig_types[54]
#define SWIGTYPE_p_love__Button swig_types[55]
#define SWIGTYPE_p_love__CheckBox swig_types[56]
#define SWIGTYPE_p_love__DisplayMode swig_types[57]
#define SWIGTYPE_p_love__DropDown swig_types[58]
#define SWIGTYPE_p_love__Event swig_types[59]
#define SWIGTYPE_p_love__FrameAnimation swig_types[60]
#define SWIGTYPE_p_love__GUIContainer swig_types[61]
#define SWIGTYPE_p_love__GUIElement swig_types[62]
#define SWIGTYPE_p_love__GUIEvent swig_types[63]
#define SWIGTYPE_p_love__Keyboard swig_types[64]
#define SWIGTYPE_p_love__Label swig_types[65]
#define SWIGTYPE_p_love__ListBox swig_types[66]
#define SWIGTYPE_p_love__LuaGL swig_types[67]
#define SWIGTYPE_p_love__LuaGame swig_types[68]
#define SWIGTYPE_p_love__Menu swig_types[69]
#define SWIGTYPE_p_love__MessageEvent swig_types[70]
#define SWIGTYPE_p_love__Mouse swig_types[71]
#define SWIGTYPE_p_love__MultilineLabel swig_types[72]
#define SWIGTYPE_p_love__Object swig_types[73]
#define SWIGTYPE_p_love__ObjectFactory swig_types[74]
#define SWIGTYPE_p_love__Padded swig_types[75]
#define SWIGTYPE_p_love__ParticleSystem swig_types[76]
#define SWIGTYPE_p_love__RadioButton swig_types[77]
#define SWIGTYPE_p_love__Slider swig_types[78]
#define SWIGTYPE_p_love__Sprite swig_types[79]
#define SWIGTYPE_p_love__TextBox swig_types[80]
#define SWIGTYPE_p_love__TextField swig_types[81]
#define SWIGTYPE_p_love__Timer swig_types[82]
#define SWIGTYPE_p_love__Updateable swig_types[83]
#define SWIGTYPE_p_love__interval swig_types[84]
#define SWIGTYPE_p_love__particle swig_types[85]
#define SWIGTYPE_p_pAbstractImage swig_types[86]
#define SWIGTYPE_p_pAbstractMusic swig_types[87]
#define SWIGTYPE_p_pAbstractSound swig_types[88]
#define SWIGTYPE_p_pAnimatedColor swig_types[89]
#define SWIGTYPE_p_pBezier swig_types[90]
#define SWIGTYPE_p_pEvent swig_types[91]
#define SWIGTYPE_p_pSprite swig_types[92]
#define SWIGTYPE_p_string swig_types[93]
#define SWIGTYPE_string swig_types[94]
static swig_type_info *swig_types[96];
static swig_module_info swig_module = {swig_types, 95, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Love_Init
#define SWIG_name    "love"
#define SWIG_import  luaopen_love



#include "love.h"
#include "lualove_globals.h"

#include "ObjectFactory.h"
#include "AbstractGraphics.h"
#include "AbstractSoundDevice.h"

#include "AbstractState.h"
#include "ActorState.h"
#include "ScriptableActorState.h"
#include "Actor.h"

#include "Particle.h"
#include "ScriptableParticle.h"
#include "ParticleEmitter.h"

#include "AbstractColor.h"
#include "Color.h"
#include "AnimatedColor.h"
#include "AbstractFont.h"
#include "Font.h"
#include "ImageFont.h"
#include "Text.h"

#include "love_globals.h"
#include "Container.h"
#include "Object.h"
#include "Vector.h"
#include "Listener.h"
#include "MouseListener.h"
#include "KeyListener.h"
#include "Updateable.h"
#include "Renderable.h"
#include "AbstractEntity.h"
#include "Entity.h"
#include "VisualEntity.h"
#include "ParticleSystem.h"

#include "AbstractSound.h" 
#include "AbstractMusic.h"
#include "AbstractDisplay.h"

#include "Keyboard.h"
#include "Mouse.h"

#include "Game.h"
#include "LuaGame.h"
#include "Timer.h"
#include "DisplayMode.h"
#include "LuaGL.h"

#include "AbstractImage.h"
#include "FrameAnimation.h"

#include "Padded.h"
#include "GUIElement.h"
#include "Button.h"
#include "DropDown.h"
#include "Label.h"
#include "MultilineLabel.h"
#include "TextField.h"
#include "RadioButton.h"
#include "CheckBox.h"
#include "Slider.h"
#include "ListBox.h"
#include "TextBox.h"
#include "AbstractMenu.h"
#include "Menu.h"
#include "GUIContainer.h"
#include "AbstractGUI.h"

#include "Bezier.h"

#include "GUIEvent.h"
#include "MessageEvent.h"

using namespace love;



SWIGINTERN void love_AbstractGraphics_setColor__SWIG_4(love::AbstractGraphics *self,love::pAbstractColor const *color){
		self->setColor(*color);
	}
SWIGINTERN void love_AbstractGraphics_setBackgroundColor__SWIG_2(love::AbstractGraphics *self,love::pAbstractColor const *color){
		self->setBackgroundColor(*color);
	}
SWIGINTERN void love_AbstractGraphics_setFont(love::AbstractGraphics *self,love::pAbstractFont const *font){
		self->setFont(*font);
	}
SWIGINTERN void love_AbstractGraphics_draw__SWIG_0(love::AbstractGraphics const *self,pAbstractImage const *sprite,float x=0,float y=0){
		self->draw((pSprite)*sprite, x, y);
	}
SWIGINTERN void love_AbstractGraphics_draw__SWIG_3(love::AbstractGraphics const *self,pAbstractImage const *sprite,float x,float y,float width,float height){
		self->draw((pSprite)*sprite, x, y, width, height);
	}
SWIGINTERN void love_AbstractGraphics_draw__SWIG_4(love::AbstractGraphics const *self,love::pFrameAnimation const *sprite,float x=0,float y=0){
		self->draw((pSprite)*sprite, x, y);
	}
SWIGINTERN void love_AbstractGraphics_draw__SWIG_7(love::AbstractGraphics const *self,love::pFrameAnimation const *sprite,float x,float y,float width,float height){
		self->draw((pSprite)*sprite, x, y, width, height);
	}
SWIGINTERN void love_AbstractGraphics_draw__SWIG_8(love::AbstractGraphics const *self,love::pParticleSystem const *particleSystem,float x=0,float y=0){
		self->draw(*particleSystem, x, y);
	}
SWIGINTERN void love_AbstractGraphics_draw__SWIG_11(love::AbstractGraphics const *self,char const *str,float x=0,float y=0,float limit=0,int align=1){
		self->draw(str, x, y, limit, align);
	}
SWIGINTERN char const *love_AbstractSoundDevice_fist(love::AbstractSoundDevice *self){
		return "Diznick";
	}
SWIGINTERN void love_AbstractSoundDevice_play__SWIG_0(love::AbstractSoundDevice const *self,pAbstractSound const *sound,int loop=0,int channel=-1){
		self->play(*sound, loop, channel);
	}
SWIGINTERN void love_AbstractSoundDevice_play__SWIG_3(love::AbstractSoundDevice const *self,pAbstractMusic const *music,int loop=0){
		self->play(*music, loop);
	}
#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_Updateable_update(lua_State* L) {
  int SWIG_arg = -1;
  love::Updateable *arg1 = (love::Updateable *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Updateable *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Updateable,0,1,"Updateable_update");
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->update(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_Updateable(lua_State* L) {
  int SWIG_arg = -1;
  love::Updateable *arg1 = (love::Updateable *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Updateable *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Updateable,0,1,"delete_Updateable");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Updateable(void *obj) {
love::Updateable *arg1 = (love::Updateable *) obj;
delete arg1;
}
static swig_lua_method swig_love_Updateable_methods[] = {
    {"update", _wrap_Updateable_update}, 
    {0,0}
};
static swig_lua_attribute swig_love_Updateable_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_love_Updateable_bases[] = {0};
swig_lua_class _wrap_class_love_Updateable = { "Updateable", &SWIGTYPE_p_love__Updateable,0, swig_delete_Updateable, swig_love_Updateable_methods, swig_love_Updateable_attributes, swig_love_Updateable_bases };

static int _wrap_delete_Object(lua_State* L) {
  int SWIG_arg = -1;
  love::Object *arg1 = (love::Object *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Object *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Object,0,1,"delete_Object");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Object(void *obj) {
love::Object *arg1 = (love::Object *) obj;
delete arg1;
}
static swig_lua_method swig_love_Object_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_love_Object_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_love_Object_bases[] = {0};
swig_lua_class _wrap_class_love_Object = { "Object", &SWIGTYPE_p_love__Object,0, swig_delete_Object, swig_love_Object_methods, swig_love_Object_attributes, swig_love_Object_bases };

static int _wrap_Keyboard_isDown(lua_State* L) {
  int SWIG_arg = -1;
  love::Keyboard *arg1 = (love::Keyboard *) 0 ;
  int arg2 ;
  bool result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Keyboard *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Keyboard,0,1,"Keyboard_isDown");
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->isDown(arg2);
  SWIG_arg=0;
  lua_pushboolean(L,(int)result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_Keyboard(lua_State* L) {
  int SWIG_arg = -1;
  love::Keyboard *arg1 = (love::Keyboard *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Keyboard *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Keyboard,0,1,"delete_Keyboard");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Keyboard(void *obj) {
love::Keyboard *arg1 = (love::Keyboard *) obj;
delete arg1;
}
static swig_lua_method swig_love_Keyboard_methods[] = {
    {"isDown", _wrap_Keyboard_isDown}, 
    {0,0}
};
static swig_lua_attribute swig_love_Keyboard_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_love_Keyboard_bases[] = {0};
swig_lua_class _wrap_class_love_Keyboard = { "Keyboard", &SWIGTYPE_p_love__Keyboard,0, swig_delete_Keyboard, swig_love_Keyboard_methods, swig_love_Keyboard_attributes, swig_love_Keyboard_bases };

static int _wrap_Mouse_getButtons(lua_State* L) {
  int SWIG_arg = -1;
  love::Mouse *arg1 = (love::Mouse *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Mouse *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Mouse,0,1,"Mouse_getButtons");
  result = (int)((love::Mouse const *)arg1)->getButtons();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mouse_getX(lua_State* L) {
  int SWIG_arg = -1;
  love::Mouse *arg1 = (love::Mouse *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Mouse *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Mouse,0,1,"Mouse_getX");
  result = (float)((love::Mouse const *)arg1)->getX();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mouse_getY(lua_State* L) {
  int SWIG_arg = -1;
  love::Mouse *arg1 = (love::Mouse *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Mouse *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Mouse,0,1,"Mouse_getY");
  result = (float)((love::Mouse const *)arg1)->getY();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mouse_setVisible(lua_State* L) {
  int SWIG_arg = -1;
  love::Mouse *arg1 = (love::Mouse *) 0 ;
  bool arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isboolean(L,2)) SWIG_fail_arg(2);
  arg1=(love::Mouse *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Mouse,0,1,"Mouse_setVisible");
  arg2 = (bool)lua_toboolean(L, 2);
  (arg1)->setVisible(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mouse_isVisible(lua_State* L) {
  int SWIG_arg = -1;
  love::Mouse *arg1 = (love::Mouse *) 0 ;
  bool result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Mouse *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Mouse,0,1,"Mouse_isVisible");
  result = (bool)((love::Mouse const *)arg1)->isVisible();
  SWIG_arg=0;
  lua_pushboolean(L,(int)result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mouse_isDown(lua_State* L) {
  int SWIG_arg = -1;
  love::Mouse *arg1 = (love::Mouse *) 0 ;
  int arg2 ;
  bool result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Mouse *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Mouse,0,1,"Mouse_isDown");
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)((love::Mouse const *)arg1)->isDown(arg2);
  SWIG_arg=0;
  lua_pushboolean(L,(int)result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_Mouse(lua_State* L) {
  int SWIG_arg = -1;
  love::Mouse *arg1 = (love::Mouse *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Mouse *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Mouse,0,1,"delete_Mouse");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Mouse(void *obj) {
love::Mouse *arg1 = (love::Mouse *) obj;
delete arg1;
}
static swig_lua_method swig_love_Mouse_methods[] = {
    {"getButtons", _wrap_Mouse_getButtons}, 
    {"getX", _wrap_Mouse_getX}, 
    {"getY", _wrap_Mouse_getY}, 
    {"setVisible", _wrap_Mouse_setVisible}, 
    {"isVisible", _wrap_Mouse_isVisible}, 
    {"isDown", _wrap_Mouse_isDown}, 
    {0,0}
};
static swig_lua_attribute swig_love_Mouse_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_love_Mouse_bases[] = {0};
swig_lua_class _wrap_class_love_Mouse = { "Mouse", &SWIGTYPE_p_love__Mouse,0, swig_delete_Mouse, swig_love_Mouse_methods, swig_love_Mouse_attributes, swig_love_Mouse_bases };

static int _wrap_Sprite_getWidth(lua_State* L) {
  int SWIG_arg = -1;
  love::Sprite *arg1 = (love::Sprite *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Sprite *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Sprite,0,1,"Sprite_getWidth");
  result = (float)((love::Sprite const *)arg1)->getWidth();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sprite_getHeight(lua_State* L) {
  int SWIG_arg = -1;
  love::Sprite *arg1 = (love::Sprite *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Sprite *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Sprite,0,1,"Sprite_getHeight");
  result = (float)((love::Sprite const *)arg1)->getHeight();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_Sprite(lua_State* L) {
  int SWIG_arg = -1;
  love::Sprite *arg1 = (love::Sprite *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Sprite *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Sprite,0,1,"delete_Sprite");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Sprite(void *obj) {
love::Sprite *arg1 = (love::Sprite *) obj;
delete arg1;
}
static swig_lua_method swig_love_Sprite_methods[] = {
    {"getWidth", _wrap_Sprite_getWidth}, 
    {"getHeight", _wrap_Sprite_getHeight}, 
    {0,0}
};
static swig_lua_attribute swig_love_Sprite_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_love_Sprite_bases[] = {0};
swig_lua_class _wrap_class_love_Sprite = { "Sprite", &SWIGTYPE_p_love__Sprite,0, swig_delete_Sprite, swig_love_Sprite_methods, swig_love_Sprite_attributes, swig_love_Sprite_bases };

static int _wrap_delete_AbstractImage(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractImage *arg1 = (love::AbstractImage *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractImage *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractImage,0,1,"delete_AbstractImage");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AbstractImage(void *obj) {
love::AbstractImage *arg1 = (love::AbstractImage *) obj;
delete arg1;
}
static swig_lua_method swig_love_AbstractImage_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_love_AbstractImage_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_love_AbstractImage_bases[] = {&_wrap_class_love_Sprite,0};
swig_lua_class _wrap_class_love_AbstractImage = { "AbstractImage", &SWIGTYPE_p_love__AbstractImage,0, swig_delete_AbstractImage, swig_love_AbstractImage_methods, swig_love_AbstractImage_attributes, swig_love_AbstractImage_bases };

static int _wrap_SmartAbstractImage___deref__(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractImage > *arg1 = (boost::shared_ptr<love::AbstractImage > *) 0 ;
  love::AbstractImage *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractImage > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractImage_t,0,1,"SmartAbstractImage___deref__");
  result = (love::AbstractImage *)((boost::shared_ptr<love::AbstractImage > const *)arg1)->operator ->();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__AbstractImage,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_SmartAbstractImage(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractImage > *arg1 = (boost::shared_ptr<love::AbstractImage > *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractImage > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractImage_t,0,1,"delete_SmartAbstractImage");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAbstractImage_getWidth(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractImage > *arg1 = (boost::shared_ptr<love::AbstractImage > *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractImage > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractImage_t,0,1,"SmartAbstractImage_getWidth");
  result = (float)(*arg1)->getWidth();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAbstractImage_getHeight(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractImage > *arg1 = (boost::shared_ptr<love::AbstractImage > *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractImage > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractImage_t,0,1,"SmartAbstractImage_getHeight");
  result = (float)(*arg1)->getHeight();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SmartAbstractImage(void *obj) {
boost::shared_ptr<love::AbstractImage > *arg1 = (boost::shared_ptr<love::AbstractImage > *) obj;
delete arg1;
}
static swig_lua_method swig_boost_shared_ptr_Sl_love_AbstractImage_Sg__methods[] = {
    {"__deref__", _wrap_SmartAbstractImage___deref__}, 
    {"getWidth", _wrap_SmartAbstractImage_getWidth}, 
    {"getHeight", _wrap_SmartAbstractImage_getHeight}, 
    {0,0}
};
static swig_lua_attribute swig_boost_shared_ptr_Sl_love_AbstractImage_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_boost_shared_ptr_Sl_love_AbstractImage_Sg__bases[] = {0};
swig_lua_class _wrap_class_boost_shared_ptr_Sl_love_AbstractImage_Sg_ = { "SmartAbstractImage", &SWIGTYPE_p_boost__shared_ptrTlove__AbstractImage_t,0, swig_delete_SmartAbstractImage, swig_boost_shared_ptr_Sl_love_AbstractImage_Sg__methods, swig_boost_shared_ptr_Sl_love_AbstractImage_Sg__attributes, swig_boost_shared_ptr_Sl_love_AbstractImage_Sg__bases };

static int _wrap_FrameAnimation_addFrame(lua_State* L) {
  int SWIG_arg = -1;
  love::FrameAnimation *arg1 = (love::FrameAnimation *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  if(!lua_isnumber(L,6)) SWIG_fail_arg(6);
  arg1=(love::FrameAnimation *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__FrameAnimation,0,1,"FrameAnimation_addFrame");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  (arg1)->addFrame(arg2,arg3,arg4,arg5,arg6);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FrameAnimation_addFrames(lua_State* L) {
  int SWIG_arg = -1;
  love::FrameAnimation *arg1 = (love::FrameAnimation *) 0 ;
  int arg2 ;
  int arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  if(!lua_isnumber(L,6)) SWIG_fail_arg(6);
  arg1=(love::FrameAnimation *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__FrameAnimation,0,1,"FrameAnimation_addFrames");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  (arg1)->addFrames(arg2,arg3,arg4,arg5,arg6);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FrameAnimation_start(lua_State* L) {
  int SWIG_arg = -1;
  love::FrameAnimation *arg1 = (love::FrameAnimation *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::FrameAnimation *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__FrameAnimation,0,1,"FrameAnimation_start");
  (arg1)->start();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FrameAnimation_stop(lua_State* L) {
  int SWIG_arg = -1;
  love::FrameAnimation *arg1 = (love::FrameAnimation *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::FrameAnimation *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__FrameAnimation,0,1,"FrameAnimation_stop");
  (arg1)->stop();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FrameAnimation_delay(lua_State* L) {
  int SWIG_arg = -1;
  love::FrameAnimation *arg1 = (love::FrameAnimation *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::FrameAnimation *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__FrameAnimation,0,1,"FrameAnimation_delay");
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->delay(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FrameAnimation_update(lua_State* L) {
  int SWIG_arg = -1;
  love::FrameAnimation *arg1 = (love::FrameAnimation *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::FrameAnimation *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__FrameAnimation,0,1,"FrameAnimation_update");
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->update(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_FrameAnimation(lua_State* L) {
  int SWIG_arg = -1;
  love::FrameAnimation *arg1 = (love::FrameAnimation *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::FrameAnimation *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__FrameAnimation,0,1,"delete_FrameAnimation");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FrameAnimation(void *obj) {
love::FrameAnimation *arg1 = (love::FrameAnimation *) obj;
delete arg1;
}
static swig_lua_method swig_love_FrameAnimation_methods[] = {
    {"addFrame", _wrap_FrameAnimation_addFrame}, 
    {"addFrames", _wrap_FrameAnimation_addFrames}, 
    {"start", _wrap_FrameAnimation_start}, 
    {"stop", _wrap_FrameAnimation_stop}, 
    {"delay", _wrap_FrameAnimation_delay}, 
    {"update", _wrap_FrameAnimation_update}, 
    {0,0}
};
static swig_lua_attribute swig_love_FrameAnimation_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_love_FrameAnimation_bases[] = {&_wrap_class_love_Sprite,0};
swig_lua_class _wrap_class_love_FrameAnimation = { "FrameAnimation", &SWIGTYPE_p_love__FrameAnimation,0, swig_delete_FrameAnimation, swig_love_FrameAnimation_methods, swig_love_FrameAnimation_attributes, swig_love_FrameAnimation_bases };

static int _wrap_SmartFrameAnimation___deref__(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::FrameAnimation > *arg1 = (boost::shared_ptr<love::FrameAnimation > *) 0 ;
  love::FrameAnimation *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::FrameAnimation > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__FrameAnimation_t,0,1,"SmartFrameAnimation___deref__");
  result = (love::FrameAnimation *)((boost::shared_ptr<love::FrameAnimation > const *)arg1)->operator ->();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__FrameAnimation,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_SmartFrameAnimation(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::FrameAnimation > *arg1 = (boost::shared_ptr<love::FrameAnimation > *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::FrameAnimation > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__FrameAnimation_t,0,1,"delete_SmartFrameAnimation");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartFrameAnimation_addFrame(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::FrameAnimation > *arg1 = (boost::shared_ptr<love::FrameAnimation > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  if(!lua_isnumber(L,6)) SWIG_fail_arg(6);
  arg1=(boost::shared_ptr<love::FrameAnimation > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__FrameAnimation_t,0,1,"SmartFrameAnimation_addFrame");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  (*arg1)->addFrame(arg2,arg3,arg4,arg5,arg6);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartFrameAnimation_addFrames(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::FrameAnimation > *arg1 = (boost::shared_ptr<love::FrameAnimation > *) 0 ;
  int arg2 ;
  int arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  if(!lua_isnumber(L,6)) SWIG_fail_arg(6);
  arg1=(boost::shared_ptr<love::FrameAnimation > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__FrameAnimation_t,0,1,"SmartFrameAnimation_addFrames");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  (*arg1)->addFrames(arg2,arg3,arg4,arg5,arg6);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartFrameAnimation_start(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::FrameAnimation > *arg1 = (boost::shared_ptr<love::FrameAnimation > *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::FrameAnimation > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__FrameAnimation_t,0,1,"SmartFrameAnimation_start");
  (*arg1)->start();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartFrameAnimation_stop(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::FrameAnimation > *arg1 = (boost::shared_ptr<love::FrameAnimation > *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::FrameAnimation > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__FrameAnimation_t,0,1,"SmartFrameAnimation_stop");
  (*arg1)->stop();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartFrameAnimation_delay(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::FrameAnimation > *arg1 = (boost::shared_ptr<love::FrameAnimation > *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::FrameAnimation > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__FrameAnimation_t,0,1,"SmartFrameAnimation_delay");
  arg2 = (float)lua_tonumber(L, 2);
  (*arg1)->delay(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartFrameAnimation_update(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::FrameAnimation > *arg1 = (boost::shared_ptr<love::FrameAnimation > *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::FrameAnimation > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__FrameAnimation_t,0,1,"SmartFrameAnimation_update");
  arg2 = (float)lua_tonumber(L, 2);
  (*arg1)->update(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartFrameAnimation_getWidth(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::FrameAnimation > *arg1 = (boost::shared_ptr<love::FrameAnimation > *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::FrameAnimation > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__FrameAnimation_t,0,1,"SmartFrameAnimation_getWidth");
  result = (float)(*arg1)->getWidth();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartFrameAnimation_getHeight(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::FrameAnimation > *arg1 = (boost::shared_ptr<love::FrameAnimation > *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::FrameAnimation > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__FrameAnimation_t,0,1,"SmartFrameAnimation_getHeight");
  result = (float)(*arg1)->getHeight();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SmartFrameAnimation(void *obj) {
boost::shared_ptr<love::FrameAnimation > *arg1 = (boost::shared_ptr<love::FrameAnimation > *) obj;
delete arg1;
}
static swig_lua_method swig_boost_shared_ptr_Sl_love_FrameAnimation_Sg__methods[] = {
    {"__deref__", _wrap_SmartFrameAnimation___deref__}, 
    {"addFrame", _wrap_SmartFrameAnimation_addFrame}, 
    {"addFrames", _wrap_SmartFrameAnimation_addFrames}, 
    {"start", _wrap_SmartFrameAnimation_start}, 
    {"stop", _wrap_SmartFrameAnimation_stop}, 
    {"delay", _wrap_SmartFrameAnimation_delay}, 
    {"update", _wrap_SmartFrameAnimation_update}, 
    {"getWidth", _wrap_SmartFrameAnimation_getWidth}, 
    {"getHeight", _wrap_SmartFrameAnimation_getHeight}, 
    {0,0}
};
static swig_lua_attribute swig_boost_shared_ptr_Sl_love_FrameAnimation_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_boost_shared_ptr_Sl_love_FrameAnimation_Sg__bases[] = {0};
swig_lua_class _wrap_class_boost_shared_ptr_Sl_love_FrameAnimation_Sg_ = { "SmartFrameAnimation", &SWIGTYPE_p_boost__shared_ptrTlove__FrameAnimation_t,0, swig_delete_SmartFrameAnimation, swig_boost_shared_ptr_Sl_love_FrameAnimation_Sg__methods, swig_boost_shared_ptr_Sl_love_FrameAnimation_Sg__attributes, swig_boost_shared_ptr_Sl_love_FrameAnimation_Sg__bases };

static int _wrap_AbstractFont_width_set(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractFont *arg1 = (love::AbstractFont *) 0 ;
  int *arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractFont *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractFont,0,1,"AbstractFont_width_set");
  arg2=(int *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_int,0,2,"AbstractFont_width_set");
  {
    size_t ii;
    int *b = (int *) arg1->width;
    for (ii = 0; ii < (size_t)love::AbstractFont::MAX_CHARS; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractFont_width_get(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractFont *arg1 = (love::AbstractFont *) 0 ;
  int *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractFont *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractFont,0,1,"AbstractFont_width_get");
  result = (int *)(int *) ((arg1)->width);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_AbstractFont(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractFont *arg1 = (love::AbstractFont *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractFont *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractFont,0,1,"delete_AbstractFont");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractFont_print__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractFont *arg1 = (love::AbstractFont *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  float arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(love::AbstractFont *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractFont,0,1,"AbstractFont_print");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->print((char const *)arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractFont_print__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractFont *arg1 = (love::AbstractFont *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::AbstractFont *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractFont,0,1,"AbstractFont_print");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->print((char const *)arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractFont_print__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractFont *arg1 = (love::AbstractFont *) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractFont *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractFont,0,1,"AbstractFont_print");
  arg2 = (char*)lua_tostring(L, 2);
  (arg1)->print((char const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractFont_print__SWIG_3(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractFont *arg1 = (love::AbstractFont *) 0 ;
  string arg2 ;
  float arg3 ;
  float arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(love::AbstractFont *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractFont,0,1,"AbstractFont_print");
  {
    string * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_string,0)) SWIG_fail;
    arg2 = *argp;
  }
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->print(arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractFont_print__SWIG_4(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractFont *arg1 = (love::AbstractFont *) 0 ;
  string arg2 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::AbstractFont *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractFont,0,1,"AbstractFont_print");
  {
    string * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_string,0)) SWIG_fail;
    arg2 = *argp;
  }
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->print(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractFont_print__SWIG_5(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractFont *arg1 = (love::AbstractFont *) 0 ;
  string arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractFont *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractFont,0,1,"AbstractFont_print");
  {
    string * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_string,0)) SWIG_fail;
    arg2 = *argp;
  }
  (arg1)->print(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractFont_print__SWIG_6(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractFont *arg1 = (love::AbstractFont *) 0 ;
  char arg2 ;
  float arg3 ;
  float arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(love::AbstractFont *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractFont,0,1,"AbstractFont_print");
  arg2 = ((char*)lua_tostring(L, 2))[0];
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->print(arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractFont_print__SWIG_7(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractFont *arg1 = (love::AbstractFont *) 0 ;
  char arg2 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::AbstractFont *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractFont,0,1,"AbstractFont_print");
  arg2 = ((char*)lua_tostring(L, 2))[0];
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->print(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractFont_print__SWIG_8(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractFont *arg1 = (love::AbstractFont *) 0 ;
  char arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractFont *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractFont,0,1,"AbstractFont_print");
  arg2 = ((char*)lua_tostring(L, 2))[0];
  (arg1)->print(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractFont_print(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractFont, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_string, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AbstractFont_print__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractFont, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]) && (lua_strlen(L,argv[1])==1);
      }
      if (_v) {
        return _wrap_AbstractFont_print__SWIG_8(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractFont, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_AbstractFont_print__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractFont, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_string, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_AbstractFont_print__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractFont, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]) && (lua_strlen(L,argv[1])==1);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_AbstractFont_print__SWIG_7(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractFont, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_AbstractFont_print__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractFont, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_string, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_AbstractFont_print__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractFont, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]) && (lua_strlen(L,argv[1])==1);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_AbstractFont_print__SWIG_6(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractFont, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_AbstractFont_print__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'AbstractFont_print'");
  lua_error(L);return 0;
}


static int _wrap_AbstractFont_getLineHeight(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractFont *arg1 = (love::AbstractFont *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractFont *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractFont,0,1,"AbstractFont_getLineHeight");
  result = (float)(arg1)->getLineHeight();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractFont_getLineWidth(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractFont *arg1 = (love::AbstractFont *) 0 ;
  char *arg2 = (char *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractFont *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractFont,0,1,"AbstractFont_getLineWidth");
  arg2 = (char*)lua_tostring(L, 2);
  result = (float)(arg1)->getLineWidth((char const *)arg2);
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractFont_load(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractFont *arg1 = (love::AbstractFont *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractFont *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractFont,0,1,"AbstractFont_load");
  result = (int)(arg1)->load();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractFont_unload(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractFont *arg1 = (love::AbstractFont *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractFont *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractFont,0,1,"AbstractFont_unload");
  (arg1)->unload();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AbstractFont(void *obj) {
love::AbstractFont *arg1 = (love::AbstractFont *) obj;
delete arg1;
}
static swig_lua_method swig_love_AbstractFont_methods[] = {
    {"print", _wrap_AbstractFont_print}, 
    {"getLineHeight", _wrap_AbstractFont_getLineHeight}, 
    {"getLineWidth", _wrap_AbstractFont_getLineWidth}, 
    {"load", _wrap_AbstractFont_load}, 
    {"unload", _wrap_AbstractFont_unload}, 
    {0,0}
};
static swig_lua_attribute swig_love_AbstractFont_attributes[] = {
    { "width",_wrap_AbstractFont_width_get, _wrap_AbstractFont_width_set},
    {0,0,0}
};
static swig_lua_class *swig_love_AbstractFont_bases[] = {&_wrap_class_love_Object,0};
swig_lua_class _wrap_class_love_AbstractFont = { "AbstractFont", &SWIGTYPE_p_love__AbstractFont,0, swig_delete_AbstractFont, swig_love_AbstractFont_methods, swig_love_AbstractFont_attributes, swig_love_AbstractFont_bases };

static int _wrap_delete_AbstractColor(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractColor *arg1 = (love::AbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractColor *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractColor,0,1,"delete_AbstractColor");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractColor_getRed(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractColor *arg1 = (love::AbstractColor *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractColor *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractColor,0,1,"AbstractColor_getRed");
  result = (int)((love::AbstractColor const *)arg1)->getRed();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractColor_getGreen(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractColor *arg1 = (love::AbstractColor *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractColor *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractColor,0,1,"AbstractColor_getGreen");
  result = (int)((love::AbstractColor const *)arg1)->getGreen();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractColor_getBlue(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractColor *arg1 = (love::AbstractColor *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractColor *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractColor,0,1,"AbstractColor_getBlue");
  result = (int)((love::AbstractColor const *)arg1)->getBlue();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractColor_getAlpha(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractColor *arg1 = (love::AbstractColor *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractColor *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractColor,0,1,"AbstractColor_getAlpha");
  result = (int)((love::AbstractColor const *)arg1)->getAlpha();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractColor_getCode(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractColor *arg1 = (love::AbstractColor *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractColor *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractColor,0,1,"AbstractColor_getCode");
  result = (int)((love::AbstractColor const *)arg1)->getCode();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractColor_setRed(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractColor *arg1 = (love::AbstractColor *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractColor *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractColor,0,1,"AbstractColor_setRed");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setRed(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractColor_setGreen(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractColor *arg1 = (love::AbstractColor *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractColor *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractColor,0,1,"AbstractColor_setGreen");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setGreen(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractColor_setBlue(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractColor *arg1 = (love::AbstractColor *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractColor *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractColor,0,1,"AbstractColor_setBlue");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setBlue(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractColor_setAlpha(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractColor *arg1 = (love::AbstractColor *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractColor *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractColor,0,1,"AbstractColor_setAlpha");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setAlpha(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractColor_setColor__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractColor *arg1 = (love::AbstractColor *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractColor *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractColor,0,1,"AbstractColor_setColor");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setColor(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractColor_setColor__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractColor *arg1 = (love::AbstractColor *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(love::AbstractColor *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractColor,0,1,"AbstractColor_setColor");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->setColor(arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractColor_setColor__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractColor *arg1 = (love::AbstractColor *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  arg1=(love::AbstractColor *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractColor,0,1,"AbstractColor_setColor");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  (arg1)->setColor(arg2,arg3,arg4,arg5);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractColor_setColor__SWIG_3(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractColor *arg1 = (love::AbstractColor *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractColor *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractColor,0,1,"AbstractColor_setColor");
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setColor(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractColor_setColor(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractColor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AbstractColor_setColor__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractColor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AbstractColor_setColor__SWIG_3(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractColor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_AbstractColor_setColor__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractColor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_AbstractColor_setColor__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'AbstractColor_setColor'");
  lua_error(L);return 0;
}


static int _wrap_AbstractColor_getColor__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractColor *arg1 = (love::AbstractColor *) 0 ;
  boost::shared_ptr<love::AbstractColor > result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractColor *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractColor,0,1,"AbstractColor_getColor");
  result = (arg1)->getColor();
  SWIG_arg=0;
  {
    boost::shared_ptr<love::AbstractColor > * resultptr;
    resultptr = new boost::shared_ptr<love::AbstractColor >((boost::shared_ptr<love::AbstractColor > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractColor_getColor__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractColor *arg1 = (love::AbstractColor *) 0 ;
  float arg2 ;
  boost::shared_ptr<love::AbstractColor > result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractColor *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractColor,0,1,"AbstractColor_getColor");
  arg2 = (float)lua_tonumber(L, 2);
  result = (arg1)->getColor(arg2);
  SWIG_arg=0;
  {
    boost::shared_ptr<love::AbstractColor > * resultptr;
    resultptr = new boost::shared_ptr<love::AbstractColor >((boost::shared_ptr<love::AbstractColor > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractColor_getColor(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractColor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AbstractColor_getColor__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractColor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AbstractColor_getColor__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'AbstractColor_getColor'");
  lua_error(L);return 0;
}


static int _wrap_AbstractColor_getGradient(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractColor *arg1 = (love::AbstractColor *) 0 ;
  boost::shared_ptr<love::AbstractColor > *arg2 = (boost::shared_ptr<love::AbstractColor > *) 0 ;
  float arg3 ;
  boost::shared_ptr<love::AbstractColor > result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::AbstractColor *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractColor,0,1,"AbstractColor_getGradient");
  arg2=(boost::shared_ptr<love::AbstractColor > *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"AbstractColor_getGradient");
  arg3 = (float)lua_tonumber(L, 3);
  result = (arg1)->getGradient((boost::shared_ptr<love::AbstractColor > const *)arg2,arg3);
  SWIG_arg=0;
  {
    boost::shared_ptr<love::AbstractColor > * resultptr;
    resultptr = new boost::shared_ptr<love::AbstractColor >((boost::shared_ptr<love::AbstractColor > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractColor_addColor__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractColor *arg1 = (love::AbstractColor *) 0 ;
  boost::shared_ptr<love::AbstractColor > *arg2 = (boost::shared_ptr<love::AbstractColor > *) 0 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::AbstractColor *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractColor,0,1,"AbstractColor_addColor");
  arg2=(boost::shared_ptr<love::AbstractColor > *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"AbstractColor_addColor");
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->addColor((boost::shared_ptr<love::AbstractColor > const *)arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractColor_addColor__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractColor *arg1 = (love::AbstractColor *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  float arg6 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  if(!lua_isnumber(L,6)) SWIG_fail_arg(6);
  arg1=(love::AbstractColor *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractColor,0,1,"AbstractColor_addColor");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  (arg1)->addColor(arg2,arg3,arg4,arg5,arg6);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractColor_addColor(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractColor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_AbstractColor_addColor__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractColor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_AbstractColor_addColor__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'AbstractColor_addColor'");
  lua_error(L);return 0;
}


static int _wrap_AbstractColor_update(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractColor *arg1 = (love::AbstractColor *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractColor *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractColor,0,1,"AbstractColor_update");
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->update(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractColor_setMode(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractColor *arg1 = (love::AbstractColor *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractColor *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractColor,0,1,"AbstractColor_setMode");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setMode(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractColor_play(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractColor *arg1 = (love::AbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractColor *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractColor,0,1,"AbstractColor_play");
  (arg1)->play();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractColor_stop(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractColor *arg1 = (love::AbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractColor *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractColor,0,1,"AbstractColor_stop");
  (arg1)->stop();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractColor_reset(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractColor *arg1 = (love::AbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractColor *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractColor,0,1,"AbstractColor_reset");
  (arg1)->reset();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractColor_testColor(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractColor *arg1 = (love::AbstractColor *) 0 ;
  boost::shared_ptr<love::AbstractColor > arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractColor *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractColor,0,1,"AbstractColor_testColor");
  {
    boost::shared_ptr<love::AbstractColor > * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0)) SWIG_fail;
    arg2 = *argp;
  }
  ((love::AbstractColor const *)arg1)->testColor(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AbstractColor(void *obj) {
love::AbstractColor *arg1 = (love::AbstractColor *) obj;
delete arg1;
}
static swig_lua_method swig_love_AbstractColor_methods[] = {
    {"getRed", _wrap_AbstractColor_getRed}, 
    {"getGreen", _wrap_AbstractColor_getGreen}, 
    {"getBlue", _wrap_AbstractColor_getBlue}, 
    {"getAlpha", _wrap_AbstractColor_getAlpha}, 
    {"getCode", _wrap_AbstractColor_getCode}, 
    {"setRed", _wrap_AbstractColor_setRed}, 
    {"setGreen", _wrap_AbstractColor_setGreen}, 
    {"setBlue", _wrap_AbstractColor_setBlue}, 
    {"setAlpha", _wrap_AbstractColor_setAlpha}, 
    {"setColor", _wrap_AbstractColor_setColor}, 
    {"getColor", _wrap_AbstractColor_getColor}, 
    {"getGradient", _wrap_AbstractColor_getGradient}, 
    {"addColor", _wrap_AbstractColor_addColor}, 
    {"update", _wrap_AbstractColor_update}, 
    {"setMode", _wrap_AbstractColor_setMode}, 
    {"play", _wrap_AbstractColor_play}, 
    {"stop", _wrap_AbstractColor_stop}, 
    {"reset", _wrap_AbstractColor_reset}, 
    {"testColor", _wrap_AbstractColor_testColor}, 
    {0,0}
};
static swig_lua_attribute swig_love_AbstractColor_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_love_AbstractColor_bases[] = {&_wrap_class_love_Object,&_wrap_class_love_Updateable,0};
swig_lua_class _wrap_class_love_AbstractColor = { "AbstractColor", &SWIGTYPE_p_love__AbstractColor,0, swig_delete_AbstractColor, swig_love_AbstractColor_methods, swig_love_AbstractColor_attributes, swig_love_AbstractColor_bases };

static int _wrap_new_Padded(lua_State* L) {
  int SWIG_arg = -1;
  love::Padded *result = 0 ;
  
  result = (love::Padded *)new love::Padded();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__Padded,1); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_Padded(lua_State* L) {
  int SWIG_arg = -1;
  love::Padded *arg1 = (love::Padded *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Padded *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Padded,0,1,"delete_Padded");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Padded_setPadding__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::Padded *arg1 = (love::Padded *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  arg1=(love::Padded *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Padded,0,1,"Padded_setPadding");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  (arg1)->setPadding(arg2,arg3,arg4,arg5);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Padded_setPadding__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::Padded *arg1 = (love::Padded *) 0 ;
  int arg2 ;
  int arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::Padded *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Padded,0,1,"Padded_setPadding");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->setPadding(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Padded_setPadding__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  love::Padded *arg1 = (love::Padded *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Padded *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Padded,0,1,"Padded_setPadding");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setPadding(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Padded_setPadding(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Padded, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Padded_setPadding__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Padded, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Padded_setPadding__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Padded, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_Padded_setPadding__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'Padded_setPadding'");
  lua_error(L);return 0;
}


static int _wrap_Padded_setPaddingTop(lua_State* L) {
  int SWIG_arg = -1;
  love::Padded *arg1 = (love::Padded *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Padded *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Padded,0,1,"Padded_setPaddingTop");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setPaddingTop(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Padded_setPaddingRight(lua_State* L) {
  int SWIG_arg = -1;
  love::Padded *arg1 = (love::Padded *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Padded *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Padded,0,1,"Padded_setPaddingRight");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setPaddingRight(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Padded_setPaddingBottom(lua_State* L) {
  int SWIG_arg = -1;
  love::Padded *arg1 = (love::Padded *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Padded *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Padded,0,1,"Padded_setPaddingBottom");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setPaddingBottom(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Padded_setPaddingLeft(lua_State* L) {
  int SWIG_arg = -1;
  love::Padded *arg1 = (love::Padded *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Padded *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Padded,0,1,"Padded_setPaddingLeft");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setPaddingLeft(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Padded_getPaddingTop(lua_State* L) {
  int SWIG_arg = -1;
  love::Padded *arg1 = (love::Padded *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Padded *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Padded,0,1,"Padded_getPaddingTop");
  result = (int)(arg1)->getPaddingTop();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Padded_getPaddingRight(lua_State* L) {
  int SWIG_arg = -1;
  love::Padded *arg1 = (love::Padded *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Padded *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Padded,0,1,"Padded_getPaddingRight");
  result = (int)(arg1)->getPaddingRight();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Padded_getPaddingBottom(lua_State* L) {
  int SWIG_arg = -1;
  love::Padded *arg1 = (love::Padded *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Padded *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Padded,0,1,"Padded_getPaddingBottom");
  result = (int)(arg1)->getPaddingBottom();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Padded_getPaddingLeft(lua_State* L) {
  int SWIG_arg = -1;
  love::Padded *arg1 = (love::Padded *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Padded *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Padded,0,1,"Padded_getPaddingLeft");
  result = (int)(arg1)->getPaddingLeft();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Padded(void *obj) {
love::Padded *arg1 = (love::Padded *) obj;
delete arg1;
}
static swig_lua_method swig_love_Padded_methods[] = {
    {"setPadding", _wrap_Padded_setPadding}, 
    {"setPaddingTop", _wrap_Padded_setPaddingTop}, 
    {"setPaddingRight", _wrap_Padded_setPaddingRight}, 
    {"setPaddingBottom", _wrap_Padded_setPaddingBottom}, 
    {"setPaddingLeft", _wrap_Padded_setPaddingLeft}, 
    {"getPaddingTop", _wrap_Padded_getPaddingTop}, 
    {"getPaddingRight", _wrap_Padded_getPaddingRight}, 
    {"getPaddingBottom", _wrap_Padded_getPaddingBottom}, 
    {"getPaddingLeft", _wrap_Padded_getPaddingLeft}, 
    {0,0}
};
static swig_lua_attribute swig_love_Padded_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_love_Padded_bases[] = {0};
swig_lua_class _wrap_class_love_Padded = { "Padded", &SWIGTYPE_p_love__Padded,_wrap_new_Padded, swig_delete_Padded, swig_love_Padded_methods, swig_love_Padded_attributes, swig_love_Padded_bases };

static int _wrap_delete_GUIElement(lua_State* L) {
  int SWIG_arg = -1;
  love::GUIElement *arg1 = (love::GUIElement *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::GUIElement *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__GUIElement,0,1,"delete_GUIElement");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GUIElement_setColor(lua_State* L) {
  int SWIG_arg = -1;
  love::GUIElement *arg1 = (love::GUIElement *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::GUIElement *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__GUIElement,0,1,"GUIElement_setColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"GUIElement_setColor");
  (arg1)->setColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GUIElement_setBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  love::GUIElement *arg1 = (love::GUIElement *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::GUIElement *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__GUIElement,0,1,"GUIElement_setBackgroundColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"GUIElement_setBackgroundColor");
  (arg1)->setBackgroundColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GUIElement_setBorderColor(lua_State* L) {
  int SWIG_arg = -1;
  love::GUIElement *arg1 = (love::GUIElement *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::GUIElement *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__GUIElement,0,1,"GUIElement_setBorderColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"GUIElement_setBorderColor");
  (arg1)->setBorderColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GUIElement_getColor(lua_State* L) {
  int SWIG_arg = -1;
  love::GUIElement *arg1 = (love::GUIElement *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::GUIElement *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__GUIElement,0,1,"GUIElement_getColor");
  result = (arg1)->getColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GUIElement_getBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  love::GUIElement *arg1 = (love::GUIElement *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::GUIElement *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__GUIElement,0,1,"GUIElement_getBackgroundColor");
  result = (arg1)->getBackgroundColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GUIElement_getBorderColor(lua_State* L) {
  int SWIG_arg = -1;
  love::GUIElement *arg1 = (love::GUIElement *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::GUIElement *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__GUIElement,0,1,"GUIElement_getBorderColor");
  result = (arg1)->getBorderColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GUIElement_setSize(lua_State* L) {
  int SWIG_arg = -1;
  love::GUIElement *arg1 = (love::GUIElement *) 0 ;
  int arg2 ;
  int arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::GUIElement *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__GUIElement,0,1,"GUIElement_setSize");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->setSize(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GUIElement_setWidth(lua_State* L) {
  int SWIG_arg = -1;
  love::GUIElement *arg1 = (love::GUIElement *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::GUIElement *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__GUIElement,0,1,"GUIElement_setWidth");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setWidth(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GUIElement_setHeight(lua_State* L) {
  int SWIG_arg = -1;
  love::GUIElement *arg1 = (love::GUIElement *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::GUIElement *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__GUIElement,0,1,"GUIElement_setHeight");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setHeight(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GUIElement_setBorderSize(lua_State* L) {
  int SWIG_arg = -1;
  love::GUIElement *arg1 = (love::GUIElement *) 0 ;
  unsigned int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::GUIElement *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__GUIElement,0,1,"GUIElement_setBorderSize");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setBorderSize(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GUIElement_getWidth(lua_State* L) {
  int SWIG_arg = -1;
  love::GUIElement *arg1 = (love::GUIElement *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::GUIElement *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__GUIElement,0,1,"GUIElement_getWidth");
  result = (int)(arg1)->getWidth();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GUIElement_getHeight(lua_State* L) {
  int SWIG_arg = -1;
  love::GUIElement *arg1 = (love::GUIElement *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::GUIElement *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__GUIElement,0,1,"GUIElement_getHeight");
  result = (int)(arg1)->getHeight();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GUIElement_getBorderSize(lua_State* L) {
  int SWIG_arg = -1;
  love::GUIElement *arg1 = (love::GUIElement *) 0 ;
  unsigned int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::GUIElement *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__GUIElement,0,1,"GUIElement_getBorderSize");
  result = (unsigned int)(arg1)->getBorderSize();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GUIElement_adjustSize(lua_State* L) {
  int SWIG_arg = -1;
  love::GUIElement *arg1 = (love::GUIElement *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::GUIElement *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__GUIElement,0,1,"GUIElement_adjustSize");
  (arg1)->adjustSize();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_GUIElement(void *obj) {
love::GUIElement *arg1 = (love::GUIElement *) obj;
delete arg1;
}
static swig_lua_method swig_love_GUIElement_methods[] = {
    {"setColor", _wrap_GUIElement_setColor}, 
    {"setBackgroundColor", _wrap_GUIElement_setBackgroundColor}, 
    {"setBorderColor", _wrap_GUIElement_setBorderColor}, 
    {"getColor", _wrap_GUIElement_getColor}, 
    {"getBackgroundColor", _wrap_GUIElement_getBackgroundColor}, 
    {"getBorderColor", _wrap_GUIElement_getBorderColor}, 
    {"setSize", _wrap_GUIElement_setSize}, 
    {"setWidth", _wrap_GUIElement_setWidth}, 
    {"setHeight", _wrap_GUIElement_setHeight}, 
    {"setBorderSize", _wrap_GUIElement_setBorderSize}, 
    {"getWidth", _wrap_GUIElement_getWidth}, 
    {"getHeight", _wrap_GUIElement_getHeight}, 
    {"getBorderSize", _wrap_GUIElement_getBorderSize}, 
    {"adjustSize", _wrap_GUIElement_adjustSize}, 
    {0,0}
};
static swig_lua_attribute swig_love_GUIElement_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_love_GUIElement_bases[] = {0};
swig_lua_class _wrap_class_love_GUIElement = { "GUIElement", &SWIGTYPE_p_love__GUIElement,0, swig_delete_GUIElement, swig_love_GUIElement_methods, swig_love_GUIElement_attributes, swig_love_GUIElement_bases };

static int _wrap_new_Button(lua_State* L) {
  int SWIG_arg = -1;
  string arg1 ;
  love::Button *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  {
    string * argp;
    if(SWIG_ConvertPtr(L,1,(void**)(&argp),SWIGTYPE_p_string,0)) SWIG_fail;
    arg1 = *argp;
  }
  result = (love::Button *)new love::Button(arg1);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__Button,1); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_Button(lua_State* L) {
  int SWIG_arg = -1;
  love::Button *arg1 = (love::Button *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Button *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Button,0,1,"delete_Button");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Button_setSize(lua_State* L) {
  int SWIG_arg = -1;
  love::Button *arg1 = (love::Button *) 0 ;
  int arg2 ;
  int arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::Button *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Button,0,1,"Button_setSize");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->setSize(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Button_setWidth(lua_State* L) {
  int SWIG_arg = -1;
  love::Button *arg1 = (love::Button *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Button *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Button,0,1,"Button_setWidth");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setWidth(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Button_setHeight(lua_State* L) {
  int SWIG_arg = -1;
  love::Button *arg1 = (love::Button *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Button *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Button,0,1,"Button_setHeight");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setHeight(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Button_setBorderSize(lua_State* L) {
  int SWIG_arg = -1;
  love::Button *arg1 = (love::Button *) 0 ;
  unsigned int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Button *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Button,0,1,"Button_setBorderSize");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setBorderSize(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Button_setCaption(lua_State* L) {
  int SWIG_arg = -1;
  love::Button *arg1 = (love::Button *) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(love::Button *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Button,0,1,"Button_setCaption");
  arg2 = (char*)lua_tostring(L, 2);
  (arg1)->setCaption((char const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Button_setName(lua_State* L) {
  int SWIG_arg = -1;
  love::Button *arg1 = (love::Button *) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(love::Button *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Button,0,1,"Button_setName");
  arg2 = (char*)lua_tostring(L, 2);
  (arg1)->setName((char const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Button_align(lua_State* L) {
  int SWIG_arg = -1;
  love::Button *arg1 = (love::Button *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Button *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Button,0,1,"Button_align");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->align(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Button_valign(lua_State* L) {
  int SWIG_arg = -1;
  love::Button *arg1 = (love::Button *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Button *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Button,0,1,"Button_valign");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->valign(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Button_setBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  love::Button *arg1 = (love::Button *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::Button *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Button,0,1,"Button_setBackgroundColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"Button_setBackgroundColor");
  (arg1)->setBackgroundColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Button_setHoverColor(lua_State* L) {
  int SWIG_arg = -1;
  love::Button *arg1 = (love::Button *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::Button *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Button,0,1,"Button_setHoverColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"Button_setHoverColor");
  (arg1)->setHoverColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Button_setPressedColor(lua_State* L) {
  int SWIG_arg = -1;
  love::Button *arg1 = (love::Button *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::Button *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Button,0,1,"Button_setPressedColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"Button_setPressedColor");
  (arg1)->setPressedColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Button_setAllColors(lua_State* L) {
  int SWIG_arg = -1;
  love::Button *arg1 = (love::Button *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::Button *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Button,0,1,"Button_setAllColors");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"Button_setAllColors");
  (arg1)->setAllColors((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Button_setHoverBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  love::Button *arg1 = (love::Button *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::Button *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Button,0,1,"Button_setHoverBackgroundColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"Button_setHoverBackgroundColor");
  (arg1)->setHoverBackgroundColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Button_setPressedBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  love::Button *arg1 = (love::Button *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::Button *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Button,0,1,"Button_setPressedBackgroundColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"Button_setPressedBackgroundColor");
  (arg1)->setPressedBackgroundColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Button_setAllBackgroundColors(lua_State* L) {
  int SWIG_arg = -1;
  love::Button *arg1 = (love::Button *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::Button *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Button,0,1,"Button_setAllBackgroundColors");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"Button_setAllBackgroundColors");
  (arg1)->setAllBackgroundColors((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Button_setDefaultImage(lua_State* L) {
  int SWIG_arg = -1;
  love::Button *arg1 = (love::Button *) 0 ;
  pAbstractImage *arg2 = (pAbstractImage *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::Button *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Button,0,1,"Button_setDefaultImage");
  arg2=(pAbstractImage *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_pAbstractImage,0,2,"Button_setDefaultImage");
  (arg1)->setDefaultImage((pAbstractImage const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Button_setHoverImage(lua_State* L) {
  int SWIG_arg = -1;
  love::Button *arg1 = (love::Button *) 0 ;
  pAbstractImage *arg2 = (pAbstractImage *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::Button *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Button,0,1,"Button_setHoverImage");
  arg2=(pAbstractImage *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_pAbstractImage,0,2,"Button_setHoverImage");
  (arg1)->setHoverImage((pAbstractImage const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Button_setPressedImage(lua_State* L) {
  int SWIG_arg = -1;
  love::Button *arg1 = (love::Button *) 0 ;
  pAbstractImage *arg2 = (pAbstractImage *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::Button *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Button,0,1,"Button_setPressedImage");
  arg2=(pAbstractImage *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_pAbstractImage,0,2,"Button_setPressedImage");
  (arg1)->setPressedImage((pAbstractImage const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Button_getWidth(lua_State* L) {
  int SWIG_arg = -1;
  love::Button *arg1 = (love::Button *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Button *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Button,0,1,"Button_getWidth");
  result = (int)(arg1)->getWidth();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Button_getHeight(lua_State* L) {
  int SWIG_arg = -1;
  love::Button *arg1 = (love::Button *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Button *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Button,0,1,"Button_getHeight");
  result = (int)(arg1)->getHeight();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Button_getBorderSize(lua_State* L) {
  int SWIG_arg = -1;
  love::Button *arg1 = (love::Button *) 0 ;
  unsigned int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Button *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Button,0,1,"Button_getBorderSize");
  result = (unsigned int)(arg1)->getBorderSize();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Button_getCaption(lua_State* L) {
  int SWIG_arg = -1;
  love::Button *arg1 = (love::Button *) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Button *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Button,0,1,"Button_getCaption");
  result = (char *)(arg1)->getCaption();
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Button_getName(lua_State* L) {
  int SWIG_arg = -1;
  love::Button *arg1 = (love::Button *) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Button *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Button,0,1,"Button_getName");
  result = (char *)(arg1)->getName();
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Button_getBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  love::Button *arg1 = (love::Button *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Button *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Button,0,1,"Button_getBackgroundColor");
  result = (arg1)->getBackgroundColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Button_getHoverColor(lua_State* L) {
  int SWIG_arg = -1;
  love::Button *arg1 = (love::Button *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Button *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Button,0,1,"Button_getHoverColor");
  result = (arg1)->getHoverColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Button_getPressedColor(lua_State* L) {
  int SWIG_arg = -1;
  love::Button *arg1 = (love::Button *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Button *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Button,0,1,"Button_getPressedColor");
  result = (arg1)->getPressedColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Button_getHoverBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  love::Button *arg1 = (love::Button *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Button *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Button,0,1,"Button_getHoverBackgroundColor");
  result = (arg1)->getHoverBackgroundColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Button_getPressedBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  love::Button *arg1 = (love::Button *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Button *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Button,0,1,"Button_getPressedBackgroundColor");
  result = (arg1)->getPressedBackgroundColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Button_adjustSize(lua_State* L) {
  int SWIG_arg = -1;
  love::Button *arg1 = (love::Button *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Button *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Button,0,1,"Button_adjustSize");
  (arg1)->adjustSize();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Button_isFocused(lua_State* L) {
  int SWIG_arg = -1;
  love::Button *arg1 = (love::Button *) 0 ;
  bool result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Button *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Button,0,1,"Button_isFocused");
  result = (bool)((love::Button const *)arg1)->isFocused();
  SWIG_arg=0;
  lua_pushboolean(L,(int)result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Button_draw(lua_State* L) {
  int SWIG_arg = -1;
  love::Button *arg1 = (love::Button *) 0 ;
  gcn::Graphics *arg2 = (gcn::Graphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::Button *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Button,0,1,"Button_draw");
  arg2=(gcn::Graphics *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Graphics,0,2,"Button_draw");
  (arg1)->draw(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Button_drawBorder(lua_State* L) {
  int SWIG_arg = -1;
  love::Button *arg1 = (love::Button *) 0 ;
  gcn::Graphics *arg2 = (gcn::Graphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::Button *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Button,0,1,"Button_drawBorder");
  arg2=(gcn::Graphics *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Graphics,0,2,"Button_drawBorder");
  (arg1)->drawBorder(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Button(void *obj) {
love::Button *arg1 = (love::Button *) obj;
delete arg1;
}
static swig_lua_method swig_love_Button_methods[] = {
    {"setSize", _wrap_Button_setSize}, 
    {"setWidth", _wrap_Button_setWidth}, 
    {"setHeight", _wrap_Button_setHeight}, 
    {"setBorderSize", _wrap_Button_setBorderSize}, 
    {"setCaption", _wrap_Button_setCaption}, 
    {"setName", _wrap_Button_setName}, 
    {"align", _wrap_Button_align}, 
    {"valign", _wrap_Button_valign}, 
    {"setBackgroundColor", _wrap_Button_setBackgroundColor}, 
    {"setHoverColor", _wrap_Button_setHoverColor}, 
    {"setPressedColor", _wrap_Button_setPressedColor}, 
    {"setAllColors", _wrap_Button_setAllColors}, 
    {"setHoverBackgroundColor", _wrap_Button_setHoverBackgroundColor}, 
    {"setPressedBackgroundColor", _wrap_Button_setPressedBackgroundColor}, 
    {"setAllBackgroundColors", _wrap_Button_setAllBackgroundColors}, 
    {"setDefaultImage", _wrap_Button_setDefaultImage}, 
    {"setHoverImage", _wrap_Button_setHoverImage}, 
    {"setPressedImage", _wrap_Button_setPressedImage}, 
    {"getWidth", _wrap_Button_getWidth}, 
    {"getHeight", _wrap_Button_getHeight}, 
    {"getBorderSize", _wrap_Button_getBorderSize}, 
    {"getCaption", _wrap_Button_getCaption}, 
    {"getName", _wrap_Button_getName}, 
    {"getBackgroundColor", _wrap_Button_getBackgroundColor}, 
    {"getHoverColor", _wrap_Button_getHoverColor}, 
    {"getPressedColor", _wrap_Button_getPressedColor}, 
    {"getHoverBackgroundColor", _wrap_Button_getHoverBackgroundColor}, 
    {"getPressedBackgroundColor", _wrap_Button_getPressedBackgroundColor}, 
    {"adjustSize", _wrap_Button_adjustSize}, 
    {"isFocused", _wrap_Button_isFocused}, 
    {"draw", _wrap_Button_draw}, 
    {"drawBorder", _wrap_Button_drawBorder}, 
    {0,0}
};
static swig_lua_attribute swig_love_Button_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_love_Button_bases[] = {&_wrap_class_love_GUIElement,0};
swig_lua_class _wrap_class_love_Button = { "Button", &SWIGTYPE_p_love__Button,_wrap_new_Button, swig_delete_Button, swig_love_Button_methods, swig_love_Button_attributes, swig_love_Button_bases };

static int _wrap_new_DropDown(lua_State* L) {
  int SWIG_arg = -1;
  GUIList *arg1 = (GUIList *) 0 ;
  love::DropDown *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(GUIList *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_GUIList,0,1,"new_DropDown");
  result = (love::DropDown *)new love::DropDown(arg1);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__DropDown,1); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_DropDown(lua_State* L) {
  int SWIG_arg = -1;
  love::DropDown *arg1 = (love::DropDown *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::DropDown *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__DropDown,0,1,"delete_DropDown");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DropDown_setSize(lua_State* L) {
  int SWIG_arg = -1;
  love::DropDown *arg1 = (love::DropDown *) 0 ;
  int arg2 ;
  int arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::DropDown *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__DropDown,0,1,"DropDown_setSize");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->setSize(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DropDown_setWidth(lua_State* L) {
  int SWIG_arg = -1;
  love::DropDown *arg1 = (love::DropDown *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::DropDown *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__DropDown,0,1,"DropDown_setWidth");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setWidth(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DropDown_setHeight(lua_State* L) {
  int SWIG_arg = -1;
  love::DropDown *arg1 = (love::DropDown *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::DropDown *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__DropDown,0,1,"DropDown_setHeight");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setHeight(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DropDown_setBorderSize(lua_State* L) {
  int SWIG_arg = -1;
  love::DropDown *arg1 = (love::DropDown *) 0 ;
  unsigned int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::DropDown *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__DropDown,0,1,"DropDown_setBorderSize");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setBorderSize(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DropDown_setName(lua_State* L) {
  int SWIG_arg = -1;
  love::DropDown *arg1 = (love::DropDown *) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(love::DropDown *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__DropDown,0,1,"DropDown_setName");
  arg2 = (char*)lua_tostring(L, 2);
  (arg1)->setName((char const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DropDown_setBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  love::DropDown *arg1 = (love::DropDown *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::DropDown *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__DropDown,0,1,"DropDown_setBackgroundColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"DropDown_setBackgroundColor");
  (arg1)->setBackgroundColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DropDown_setActiveColor(lua_State* L) {
  int SWIG_arg = -1;
  love::DropDown *arg1 = (love::DropDown *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::DropDown *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__DropDown,0,1,"DropDown_setActiveColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"DropDown_setActiveColor");
  (arg1)->setActiveColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DropDown_setActiveBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  love::DropDown *arg1 = (love::DropDown *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::DropDown *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__DropDown,0,1,"DropDown_setActiveBackgroundColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"DropDown_setActiveBackgroundColor");
  (arg1)->setActiveBackgroundColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DropDown_setSelectionColor(lua_State* L) {
  int SWIG_arg = -1;
  love::DropDown *arg1 = (love::DropDown *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::DropDown *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__DropDown,0,1,"DropDown_setSelectionColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"DropDown_setSelectionColor");
  (arg1)->setSelectionColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DropDown_setSelectionBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  love::DropDown *arg1 = (love::DropDown *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::DropDown *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__DropDown,0,1,"DropDown_setSelectionBackgroundColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"DropDown_setSelectionBackgroundColor");
  (arg1)->setSelectionBackgroundColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DropDown_setButtonColor(lua_State* L) {
  int SWIG_arg = -1;
  love::DropDown *arg1 = (love::DropDown *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::DropDown *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__DropDown,0,1,"DropDown_setButtonColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"DropDown_setButtonColor");
  (arg1)->setButtonColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DropDown_setButtonBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  love::DropDown *arg1 = (love::DropDown *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::DropDown *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__DropDown,0,1,"DropDown_setButtonBackgroundColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"DropDown_setButtonBackgroundColor");
  (arg1)->setButtonBackgroundColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DropDown_setButton(lua_State* L) {
  int SWIG_arg = -1;
  love::DropDown *arg1 = (love::DropDown *) 0 ;
  pAbstractImage *arg2 = (pAbstractImage *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::DropDown *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__DropDown,0,1,"DropDown_setButton");
  arg2=(pAbstractImage *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_pAbstractImage,0,2,"DropDown_setButton");
  (arg1)->setButton((pAbstractImage const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DropDown_setButtonPressed(lua_State* L) {
  int SWIG_arg = -1;
  love::DropDown *arg1 = (love::DropDown *) 0 ;
  pAbstractImage *arg2 = (pAbstractImage *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::DropDown *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__DropDown,0,1,"DropDown_setButtonPressed");
  arg2=(pAbstractImage *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_pAbstractImage,0,2,"DropDown_setButtonPressed");
  (arg1)->setButtonPressed((pAbstractImage const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DropDown_getWidth(lua_State* L) {
  int SWIG_arg = -1;
  love::DropDown *arg1 = (love::DropDown *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::DropDown *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__DropDown,0,1,"DropDown_getWidth");
  result = (int)(arg1)->getWidth();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DropDown_getHeight(lua_State* L) {
  int SWIG_arg = -1;
  love::DropDown *arg1 = (love::DropDown *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::DropDown *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__DropDown,0,1,"DropDown_getHeight");
  result = (int)(arg1)->getHeight();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DropDown_getBorderSize(lua_State* L) {
  int SWIG_arg = -1;
  love::DropDown *arg1 = (love::DropDown *) 0 ;
  unsigned int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::DropDown *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__DropDown,0,1,"DropDown_getBorderSize");
  result = (unsigned int)(arg1)->getBorderSize();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DropDown_getName(lua_State* L) {
  int SWIG_arg = -1;
  love::DropDown *arg1 = (love::DropDown *) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::DropDown *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__DropDown,0,1,"DropDown_getName");
  result = (char *)(arg1)->getName();
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DropDown_adjustSize(lua_State* L) {
  int SWIG_arg = -1;
  love::DropDown *arg1 = (love::DropDown *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::DropDown *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__DropDown,0,1,"DropDown_adjustSize");
  (arg1)->adjustSize();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DropDown_getBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  love::DropDown *arg1 = (love::DropDown *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::DropDown *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__DropDown,0,1,"DropDown_getBackgroundColor");
  result = (arg1)->getBackgroundColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DropDown_getActiveColor(lua_State* L) {
  int SWIG_arg = -1;
  love::DropDown *arg1 = (love::DropDown *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::DropDown *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__DropDown,0,1,"DropDown_getActiveColor");
  result = (arg1)->getActiveColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DropDown_getActiveBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  love::DropDown *arg1 = (love::DropDown *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::DropDown *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__DropDown,0,1,"DropDown_getActiveBackgroundColor");
  result = (arg1)->getActiveBackgroundColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DropDown_getSelectionColor(lua_State* L) {
  int SWIG_arg = -1;
  love::DropDown *arg1 = (love::DropDown *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::DropDown *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__DropDown,0,1,"DropDown_getSelectionColor");
  result = (arg1)->getSelectionColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DropDown_getSelectionBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  love::DropDown *arg1 = (love::DropDown *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::DropDown *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__DropDown,0,1,"DropDown_getSelectionBackgroundColor");
  result = (arg1)->getSelectionBackgroundColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DropDown_getButtonColor(lua_State* L) {
  int SWIG_arg = -1;
  love::DropDown *arg1 = (love::DropDown *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::DropDown *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__DropDown,0,1,"DropDown_getButtonColor");
  result = (arg1)->getButtonColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DropDown_getButtonBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  love::DropDown *arg1 = (love::DropDown *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::DropDown *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__DropDown,0,1,"DropDown_getButtonBackgroundColor");
  result = (arg1)->getButtonBackgroundColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DropDown_add(lua_State* L) {
  int SWIG_arg = -1;
  love::DropDown *arg1 = (love::DropDown *) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(love::DropDown *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__DropDown,0,1,"DropDown_add");
  arg2 = (char*)lua_tostring(L, 2);
  (arg1)->add((char const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DropDown_remove(lua_State* L) {
  int SWIG_arg = -1;
  love::DropDown *arg1 = (love::DropDown *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::DropDown *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__DropDown,0,1,"DropDown_remove");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->remove(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DropDown_clear(lua_State* L) {
  int SWIG_arg = -1;
  love::DropDown *arg1 = (love::DropDown *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::DropDown *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__DropDown,0,1,"DropDown_clear");
  (arg1)->clear();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DropDown_getElementAt(lua_State* L) {
  int SWIG_arg = -1;
  love::DropDown *arg1 = (love::DropDown *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::DropDown *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__DropDown,0,1,"DropDown_getElementAt");
  arg2 = (int)lua_tonumber(L, 2);
  result = (char *)(arg1)->getElementAt(arg2);
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DropDown_getSelected(lua_State* L) {
  int SWIG_arg = -1;
  love::DropDown *arg1 = (love::DropDown *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::DropDown *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__DropDown,0,1,"DropDown_getSelected");
  result = (int)(arg1)->getSelected();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DropDown_getSelectedElement(lua_State* L) {
  int SWIG_arg = -1;
  love::DropDown *arg1 = (love::DropDown *) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::DropDown *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__DropDown,0,1,"DropDown_getSelectedElement");
  result = (char *)(arg1)->getSelectedElement();
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DropDown_getNumberOfElements(lua_State* L) {
  int SWIG_arg = -1;
  love::DropDown *arg1 = (love::DropDown *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::DropDown *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__DropDown,0,1,"DropDown_getNumberOfElements");
  result = (int)(arg1)->getNumberOfElements();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DropDown_draw(lua_State* L) {
  int SWIG_arg = -1;
  love::DropDown *arg1 = (love::DropDown *) 0 ;
  gcn::Graphics *arg2 = (gcn::Graphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::DropDown *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__DropDown,0,1,"DropDown_draw");
  arg2=(gcn::Graphics *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Graphics,0,2,"DropDown_draw");
  (arg1)->draw(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DropDown_drawBorder(lua_State* L) {
  int SWIG_arg = -1;
  love::DropDown *arg1 = (love::DropDown *) 0 ;
  gcn::Graphics *arg2 = (gcn::Graphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::DropDown *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__DropDown,0,1,"DropDown_drawBorder");
  arg2=(gcn::Graphics *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Graphics,0,2,"DropDown_drawBorder");
  (arg1)->drawBorder(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DropDown_drawButton(lua_State* L) {
  int SWIG_arg = -1;
  love::DropDown *arg1 = (love::DropDown *) 0 ;
  gcn::Graphics *arg2 = (gcn::Graphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::DropDown *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__DropDown,0,1,"DropDown_drawButton");
  arg2=(gcn::Graphics *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Graphics,0,2,"DropDown_drawButton");
  (arg1)->drawButton(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DropDown(void *obj) {
love::DropDown *arg1 = (love::DropDown *) obj;
delete arg1;
}
static swig_lua_method swig_love_DropDown_methods[] = {
    {"setSize", _wrap_DropDown_setSize}, 
    {"setWidth", _wrap_DropDown_setWidth}, 
    {"setHeight", _wrap_DropDown_setHeight}, 
    {"setBorderSize", _wrap_DropDown_setBorderSize}, 
    {"setName", _wrap_DropDown_setName}, 
    {"setBackgroundColor", _wrap_DropDown_setBackgroundColor}, 
    {"setActiveColor", _wrap_DropDown_setActiveColor}, 
    {"setActiveBackgroundColor", _wrap_DropDown_setActiveBackgroundColor}, 
    {"setSelectionColor", _wrap_DropDown_setSelectionColor}, 
    {"setSelectionBackgroundColor", _wrap_DropDown_setSelectionBackgroundColor}, 
    {"setButtonColor", _wrap_DropDown_setButtonColor}, 
    {"setButtonBackgroundColor", _wrap_DropDown_setButtonBackgroundColor}, 
    {"setButton", _wrap_DropDown_setButton}, 
    {"setButtonPressed", _wrap_DropDown_setButtonPressed}, 
    {"getWidth", _wrap_DropDown_getWidth}, 
    {"getHeight", _wrap_DropDown_getHeight}, 
    {"getBorderSize", _wrap_DropDown_getBorderSize}, 
    {"getName", _wrap_DropDown_getName}, 
    {"adjustSize", _wrap_DropDown_adjustSize}, 
    {"getBackgroundColor", _wrap_DropDown_getBackgroundColor}, 
    {"getActiveColor", _wrap_DropDown_getActiveColor}, 
    {"getActiveBackgroundColor", _wrap_DropDown_getActiveBackgroundColor}, 
    {"getSelectionColor", _wrap_DropDown_getSelectionColor}, 
    {"getSelectionBackgroundColor", _wrap_DropDown_getSelectionBackgroundColor}, 
    {"getButtonColor", _wrap_DropDown_getButtonColor}, 
    {"getButtonBackgroundColor", _wrap_DropDown_getButtonBackgroundColor}, 
    {"add", _wrap_DropDown_add}, 
    {"remove", _wrap_DropDown_remove}, 
    {"clear", _wrap_DropDown_clear}, 
    {"getElementAt", _wrap_DropDown_getElementAt}, 
    {"getSelected", _wrap_DropDown_getSelected}, 
    {"getSelectedElement", _wrap_DropDown_getSelectedElement}, 
    {"getNumberOfElements", _wrap_DropDown_getNumberOfElements}, 
    {"draw", _wrap_DropDown_draw}, 
    {"drawBorder", _wrap_DropDown_drawBorder}, 
    {"drawButton", _wrap_DropDown_drawButton}, 
    {0,0}
};
static swig_lua_attribute swig_love_DropDown_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_love_DropDown_bases[] = {&_wrap_class_love_GUIElement,0};
swig_lua_class _wrap_class_love_DropDown = { "DropDown", &SWIGTYPE_p_love__DropDown,_wrap_new_DropDown, swig_delete_DropDown, swig_love_DropDown_methods, swig_love_DropDown_attributes, swig_love_DropDown_bases };

static int _wrap_new_Label__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  string arg1 ;
  love::Label *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  {
    string * argp;
    if(SWIG_ConvertPtr(L,1,(void**)(&argp),SWIGTYPE_p_string,0)) SWIG_fail;
    arg1 = *argp;
  }
  result = (love::Label *)new love::Label(arg1);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__Label,1); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Label__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::Label *result = 0 ;
  
  result = (love::Label *)new love::Label();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__Label,1); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Label(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Label__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Label__SWIG_0(L);
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'new_Label'");
  lua_error(L);return 0;
}


static int _wrap_delete_Label(lua_State* L) {
  int SWIG_arg = -1;
  love::Label *arg1 = (love::Label *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Label *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Label,0,1,"delete_Label");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Label_setSize(lua_State* L) {
  int SWIG_arg = -1;
  love::Label *arg1 = (love::Label *) 0 ;
  int arg2 ;
  int arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::Label *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Label,0,1,"Label_setSize");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->setSize(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Label_setWidth(lua_State* L) {
  int SWIG_arg = -1;
  love::Label *arg1 = (love::Label *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Label *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Label,0,1,"Label_setWidth");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setWidth(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Label_setHeight(lua_State* L) {
  int SWIG_arg = -1;
  love::Label *arg1 = (love::Label *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Label *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Label,0,1,"Label_setHeight");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setHeight(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Label_setBorderSize(lua_State* L) {
  int SWIG_arg = -1;
  love::Label *arg1 = (love::Label *) 0 ;
  unsigned int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Label *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Label,0,1,"Label_setBorderSize");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setBorderSize(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Label_setCaption(lua_State* L) {
  int SWIG_arg = -1;
  love::Label *arg1 = (love::Label *) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(love::Label *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Label,0,1,"Label_setCaption");
  arg2 = (char*)lua_tostring(L, 2);
  (arg1)->setCaption((char const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Label_setBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  love::Label *arg1 = (love::Label *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::Label *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Label,0,1,"Label_setBackgroundColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"Label_setBackgroundColor");
  (arg1)->setBackgroundColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Label_align(lua_State* L) {
  int SWIG_arg = -1;
  love::Label *arg1 = (love::Label *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Label *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Label,0,1,"Label_align");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->align(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Label_valign(lua_State* L) {
  int SWIG_arg = -1;
  love::Label *arg1 = (love::Label *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Label *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Label,0,1,"Label_valign");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->valign(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Label_setBackground(lua_State* L) {
  int SWIG_arg = -1;
  love::Label *arg1 = (love::Label *) 0 ;
  pAbstractImage *arg2 = (pAbstractImage *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::Label *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Label,0,1,"Label_setBackground");
  arg2=(pAbstractImage *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_pAbstractImage,0,2,"Label_setBackground");
  (arg1)->setBackground((pAbstractImage const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Label_getWidth(lua_State* L) {
  int SWIG_arg = -1;
  love::Label *arg1 = (love::Label *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Label *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Label,0,1,"Label_getWidth");
  result = (int)(arg1)->getWidth();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Label_getHeight(lua_State* L) {
  int SWIG_arg = -1;
  love::Label *arg1 = (love::Label *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Label *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Label,0,1,"Label_getHeight");
  result = (int)(arg1)->getHeight();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Label_getBorderSize(lua_State* L) {
  int SWIG_arg = -1;
  love::Label *arg1 = (love::Label *) 0 ;
  unsigned int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Label *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Label,0,1,"Label_getBorderSize");
  result = (unsigned int)(arg1)->getBorderSize();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Label_getCaption(lua_State* L) {
  int SWIG_arg = -1;
  love::Label *arg1 = (love::Label *) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Label *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Label,0,1,"Label_getCaption");
  result = (char *)(arg1)->getCaption();
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Label_getBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  love::Label *arg1 = (love::Label *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Label *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Label,0,1,"Label_getBackgroundColor");
  result = (arg1)->getBackgroundColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Label_adjustSize(lua_State* L) {
  int SWIG_arg = -1;
  love::Label *arg1 = (love::Label *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Label *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Label,0,1,"Label_adjustSize");
  (arg1)->adjustSize();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Label_draw(lua_State* L) {
  int SWIG_arg = -1;
  love::Label *arg1 = (love::Label *) 0 ;
  gcn::Graphics *arg2 = (gcn::Graphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::Label *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Label,0,1,"Label_draw");
  arg2=(gcn::Graphics *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Graphics,0,2,"Label_draw");
  (arg1)->draw(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Label_drawBorder(lua_State* L) {
  int SWIG_arg = -1;
  love::Label *arg1 = (love::Label *) 0 ;
  gcn::Graphics *arg2 = (gcn::Graphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::Label *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Label,0,1,"Label_drawBorder");
  arg2=(gcn::Graphics *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Graphics,0,2,"Label_drawBorder");
  (arg1)->drawBorder(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Label(void *obj) {
love::Label *arg1 = (love::Label *) obj;
delete arg1;
}
static swig_lua_method swig_love_Label_methods[] = {
    {"setSize", _wrap_Label_setSize}, 
    {"setWidth", _wrap_Label_setWidth}, 
    {"setHeight", _wrap_Label_setHeight}, 
    {"setBorderSize", _wrap_Label_setBorderSize}, 
    {"setCaption", _wrap_Label_setCaption}, 
    {"setBackgroundColor", _wrap_Label_setBackgroundColor}, 
    {"align", _wrap_Label_align}, 
    {"valign", _wrap_Label_valign}, 
    {"setBackground", _wrap_Label_setBackground}, 
    {"getWidth", _wrap_Label_getWidth}, 
    {"getHeight", _wrap_Label_getHeight}, 
    {"getBorderSize", _wrap_Label_getBorderSize}, 
    {"getCaption", _wrap_Label_getCaption}, 
    {"getBackgroundColor", _wrap_Label_getBackgroundColor}, 
    {"adjustSize", _wrap_Label_adjustSize}, 
    {"draw", _wrap_Label_draw}, 
    {"drawBorder", _wrap_Label_drawBorder}, 
    {0,0}
};
static swig_lua_attribute swig_love_Label_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_love_Label_bases[] = {&_wrap_class_love_GUIElement,0};
swig_lua_class _wrap_class_love_Label = { "Label", &SWIGTYPE_p_love__Label,_wrap_new_Label, swig_delete_Label, swig_love_Label_methods, swig_love_Label_attributes, swig_love_Label_bases };

static int _wrap_new_MultilineLabel__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  string arg1 ;
  love::MultilineLabel *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  {
    string * argp;
    if(SWIG_ConvertPtr(L,1,(void**)(&argp),SWIGTYPE_p_string,0)) SWIG_fail;
    arg1 = *argp;
  }
  result = (love::MultilineLabel *)new love::MultilineLabel(arg1);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__MultilineLabel,1); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MultilineLabel__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::MultilineLabel *result = 0 ;
  
  result = (love::MultilineLabel *)new love::MultilineLabel();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__MultilineLabel,1); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MultilineLabel(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_MultilineLabel__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_MultilineLabel__SWIG_0(L);
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'new_MultilineLabel'");
  lua_error(L);return 0;
}


static int _wrap_delete_MultilineLabel(lua_State* L) {
  int SWIG_arg = -1;
  love::MultilineLabel *arg1 = (love::MultilineLabel *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::MultilineLabel *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__MultilineLabel,0,1,"delete_MultilineLabel");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultilineLabel_setCaption__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::MultilineLabel *arg1 = (love::MultilineLabel *) 0 ;
  string *arg2 = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::MultilineLabel *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__MultilineLabel,0,1,"MultilineLabel_setCaption");
  arg2=(string *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_string,0,2,"MultilineLabel_setCaption");
  (arg1)->setCaption((string const &)*arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultilineLabel_setCaption__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::MultilineLabel *arg1 = (love::MultilineLabel *) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(love::MultilineLabel *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__MultilineLabel,0,1,"MultilineLabel_setCaption");
  arg2 = (char*)lua_tostring(L, 2);
  (arg1)->setCaption((char const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultilineLabel_setCaption(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__MultilineLabel, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_string, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_MultilineLabel_setCaption__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__MultilineLabel, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_MultilineLabel_setCaption__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'MultilineLabel_setCaption'");
  lua_error(L);return 0;
}


static int _wrap_MultilineLabel_adjustContent(lua_State* L) {
  int SWIG_arg = -1;
  love::MultilineLabel *arg1 = (love::MultilineLabel *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::MultilineLabel *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__MultilineLabel,0,1,"MultilineLabel_adjustContent");
  result = (int)(arg1)->adjustContent();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultilineLabel_adjustSize(lua_State* L) {
  int SWIG_arg = -1;
  love::MultilineLabel *arg1 = (love::MultilineLabel *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::MultilineLabel *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__MultilineLabel,0,1,"MultilineLabel_adjustSize");
  (arg1)->adjustSize();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultilineLabel_draw(lua_State* L) {
  int SWIG_arg = -1;
  love::MultilineLabel *arg1 = (love::MultilineLabel *) 0 ;
  gcn::Graphics *arg2 = (gcn::Graphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::MultilineLabel *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__MultilineLabel,0,1,"MultilineLabel_draw");
  arg2=(gcn::Graphics *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Graphics,0,2,"MultilineLabel_draw");
  (arg1)->draw(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MultilineLabel(void *obj) {
love::MultilineLabel *arg1 = (love::MultilineLabel *) obj;
delete arg1;
}
static swig_lua_method swig_love_MultilineLabel_methods[] = {
    {"setCaption", _wrap_MultilineLabel_setCaption}, 
    {"adjustContent", _wrap_MultilineLabel_adjustContent}, 
    {"adjustSize", _wrap_MultilineLabel_adjustSize}, 
    {"draw", _wrap_MultilineLabel_draw}, 
    {0,0}
};
static swig_lua_attribute swig_love_MultilineLabel_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_love_MultilineLabel_bases[] = {&_wrap_class_love_Label,0};
swig_lua_class _wrap_class_love_MultilineLabel = { "MultilineLabel", &SWIGTYPE_p_love__MultilineLabel,_wrap_new_MultilineLabel, swig_delete_MultilineLabel, swig_love_MultilineLabel_methods, swig_love_MultilineLabel_attributes, swig_love_MultilineLabel_bases };

static int _wrap_new_TextField__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  char *arg1 = (char *) 0 ;
  love::TextField *result = 0 ;
  
  if(!lua_isstring(L,1)) SWIG_fail_arg(1);
  arg1 = (char*)lua_tostring(L, 1);
  result = (love::TextField *)new love::TextField((char const *)arg1);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__TextField,1); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TextField__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::TextField *result = 0 ;
  
  result = (love::TextField *)new love::TextField();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__TextField,1); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TextField(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_TextField__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_TextField__SWIG_0(L);
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'new_TextField'");
  lua_error(L);return 0;
}


static int _wrap_delete_TextField(lua_State* L) {
  int SWIG_arg = -1;
  love::TextField *arg1 = (love::TextField *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::TextField *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__TextField,0,1,"delete_TextField");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextField_setSize(lua_State* L) {
  int SWIG_arg = -1;
  love::TextField *arg1 = (love::TextField *) 0 ;
  int arg2 ;
  int arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::TextField *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__TextField,0,1,"TextField_setSize");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->setSize(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextField_setWidth(lua_State* L) {
  int SWIG_arg = -1;
  love::TextField *arg1 = (love::TextField *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::TextField *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__TextField,0,1,"TextField_setWidth");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setWidth(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextField_setHeight(lua_State* L) {
  int SWIG_arg = -1;
  love::TextField *arg1 = (love::TextField *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::TextField *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__TextField,0,1,"TextField_setHeight");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setHeight(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextField_setBorderSize(lua_State* L) {
  int SWIG_arg = -1;
  love::TextField *arg1 = (love::TextField *) 0 ;
  unsigned int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::TextField *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__TextField,0,1,"TextField_setBorderSize");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setBorderSize(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextField_setText(lua_State* L) {
  int SWIG_arg = -1;
  love::TextField *arg1 = (love::TextField *) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(love::TextField *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__TextField,0,1,"TextField_setText");
  arg2 = (char*)lua_tostring(L, 2);
  (arg1)->setText((char const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextField_setName(lua_State* L) {
  int SWIG_arg = -1;
  love::TextField *arg1 = (love::TextField *) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(love::TextField *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__TextField,0,1,"TextField_setName");
  arg2 = (char*)lua_tostring(L, 2);
  (arg1)->setName((char const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextField_setCaretPosition(lua_State* L) {
  int SWIG_arg = -1;
  love::TextField *arg1 = (love::TextField *) 0 ;
  unsigned int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::TextField *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__TextField,0,1,"TextField_setCaretPosition");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setCaretPosition(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextField_setBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  love::TextField *arg1 = (love::TextField *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::TextField *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__TextField,0,1,"TextField_setBackgroundColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"TextField_setBackgroundColor");
  (arg1)->setBackgroundColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextField_setActiveColor(lua_State* L) {
  int SWIG_arg = -1;
  love::TextField *arg1 = (love::TextField *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::TextField *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__TextField,0,1,"TextField_setActiveColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"TextField_setActiveColor");
  (arg1)->setActiveColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextField_setActiveBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  love::TextField *arg1 = (love::TextField *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::TextField *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__TextField,0,1,"TextField_setActiveBackgroundColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"TextField_setActiveBackgroundColor");
  (arg1)->setActiveBackgroundColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextField_getWidth(lua_State* L) {
  int SWIG_arg = -1;
  love::TextField *arg1 = (love::TextField *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::TextField *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__TextField,0,1,"TextField_getWidth");
  result = (int)(arg1)->getWidth();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextField_getHeight(lua_State* L) {
  int SWIG_arg = -1;
  love::TextField *arg1 = (love::TextField *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::TextField *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__TextField,0,1,"TextField_getHeight");
  result = (int)(arg1)->getHeight();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextField_getBorderSize(lua_State* L) {
  int SWIG_arg = -1;
  love::TextField *arg1 = (love::TextField *) 0 ;
  unsigned int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::TextField *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__TextField,0,1,"TextField_getBorderSize");
  result = (unsigned int)(arg1)->getBorderSize();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextField_getText(lua_State* L) {
  int SWIG_arg = -1;
  love::TextField *arg1 = (love::TextField *) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::TextField *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__TextField,0,1,"TextField_getText");
  result = (char *)(arg1)->getText();
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextField_getName(lua_State* L) {
  int SWIG_arg = -1;
  love::TextField *arg1 = (love::TextField *) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::TextField *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__TextField,0,1,"TextField_getName");
  result = (char *)(arg1)->getName();
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextField_getCaretPosition(lua_State* L) {
  int SWIG_arg = -1;
  love::TextField *arg1 = (love::TextField *) 0 ;
  unsigned int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::TextField *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__TextField,0,1,"TextField_getCaretPosition");
  result = (unsigned int)(arg1)->getCaretPosition();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextField_getBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  love::TextField *arg1 = (love::TextField *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::TextField *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__TextField,0,1,"TextField_getBackgroundColor");
  result = (arg1)->getBackgroundColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextField_getActiveColor(lua_State* L) {
  int SWIG_arg = -1;
  love::TextField *arg1 = (love::TextField *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::TextField *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__TextField,0,1,"TextField_getActiveColor");
  result = (arg1)->getActiveColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextField_getActiveBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  love::TextField *arg1 = (love::TextField *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::TextField *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__TextField,0,1,"TextField_getActiveBackgroundColor");
  result = (arg1)->getActiveBackgroundColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextField_adjustSize(lua_State* L) {
  int SWIG_arg = -1;
  love::TextField *arg1 = (love::TextField *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::TextField *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__TextField,0,1,"TextField_adjustSize");
  (arg1)->adjustSize();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextField_draw(lua_State* L) {
  int SWIG_arg = -1;
  love::TextField *arg1 = (love::TextField *) 0 ;
  gcn::Graphics *arg2 = (gcn::Graphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::TextField *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__TextField,0,1,"TextField_draw");
  arg2=(gcn::Graphics *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Graphics,0,2,"TextField_draw");
  (arg1)->draw(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextField_drawBorder(lua_State* L) {
  int SWIG_arg = -1;
  love::TextField *arg1 = (love::TextField *) 0 ;
  gcn::Graphics *arg2 = (gcn::Graphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::TextField *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__TextField,0,1,"TextField_drawBorder");
  arg2=(gcn::Graphics *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Graphics,0,2,"TextField_drawBorder");
  (arg1)->drawBorder(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TextField(void *obj) {
love::TextField *arg1 = (love::TextField *) obj;
delete arg1;
}
static swig_lua_method swig_love_TextField_methods[] = {
    {"setSize", _wrap_TextField_setSize}, 
    {"setWidth", _wrap_TextField_setWidth}, 
    {"setHeight", _wrap_TextField_setHeight}, 
    {"setBorderSize", _wrap_TextField_setBorderSize}, 
    {"setText", _wrap_TextField_setText}, 
    {"setName", _wrap_TextField_setName}, 
    {"setCaretPosition", _wrap_TextField_setCaretPosition}, 
    {"setBackgroundColor", _wrap_TextField_setBackgroundColor}, 
    {"setActiveColor", _wrap_TextField_setActiveColor}, 
    {"setActiveBackgroundColor", _wrap_TextField_setActiveBackgroundColor}, 
    {"getWidth", _wrap_TextField_getWidth}, 
    {"getHeight", _wrap_TextField_getHeight}, 
    {"getBorderSize", _wrap_TextField_getBorderSize}, 
    {"getText", _wrap_TextField_getText}, 
    {"getName", _wrap_TextField_getName}, 
    {"getCaretPosition", _wrap_TextField_getCaretPosition}, 
    {"getBackgroundColor", _wrap_TextField_getBackgroundColor}, 
    {"getActiveColor", _wrap_TextField_getActiveColor}, 
    {"getActiveBackgroundColor", _wrap_TextField_getActiveBackgroundColor}, 
    {"adjustSize", _wrap_TextField_adjustSize}, 
    {"draw", _wrap_TextField_draw}, 
    {"drawBorder", _wrap_TextField_drawBorder}, 
    {0,0}
};
static swig_lua_attribute swig_love_TextField_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_love_TextField_bases[] = {&_wrap_class_love_GUIElement,0};
swig_lua_class _wrap_class_love_TextField = { "TextField", &SWIGTYPE_p_love__TextField,_wrap_new_TextField, swig_delete_TextField, swig_love_TextField_methods, swig_love_TextField_attributes, swig_love_TextField_bases };

static int _wrap_new_RadioButton__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  string arg1 ;
  love::RadioButton *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  {
    string * argp;
    if(SWIG_ConvertPtr(L,1,(void**)(&argp),SWIGTYPE_p_string,0)) SWIG_fail;
    arg1 = *argp;
  }
  result = (love::RadioButton *)new love::RadioButton(arg1);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__RadioButton,1); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RadioButton__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::RadioButton *result = 0 ;
  
  result = (love::RadioButton *)new love::RadioButton();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__RadioButton,1); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RadioButton(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_RadioButton__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_RadioButton__SWIG_0(L);
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'new_RadioButton'");
  lua_error(L);return 0;
}


static int _wrap_delete_RadioButton(lua_State* L) {
  int SWIG_arg = -1;
  love::RadioButton *arg1 = (love::RadioButton *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::RadioButton *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__RadioButton,0,1,"delete_RadioButton");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RadioButton_setSize(lua_State* L) {
  int SWIG_arg = -1;
  love::RadioButton *arg1 = (love::RadioButton *) 0 ;
  int arg2 ;
  int arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::RadioButton *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__RadioButton,0,1,"RadioButton_setSize");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->setSize(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RadioButton_setWidth(lua_State* L) {
  int SWIG_arg = -1;
  love::RadioButton *arg1 = (love::RadioButton *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::RadioButton *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__RadioButton,0,1,"RadioButton_setWidth");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setWidth(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RadioButton_setHeight(lua_State* L) {
  int SWIG_arg = -1;
  love::RadioButton *arg1 = (love::RadioButton *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::RadioButton *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__RadioButton,0,1,"RadioButton_setHeight");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setHeight(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RadioButton_setBorderSize(lua_State* L) {
  int SWIG_arg = -1;
  love::RadioButton *arg1 = (love::RadioButton *) 0 ;
  unsigned int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::RadioButton *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__RadioButton,0,1,"RadioButton_setBorderSize");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setBorderSize(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RadioButton_setCaption(lua_State* L) {
  int SWIG_arg = -1;
  love::RadioButton *arg1 = (love::RadioButton *) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(love::RadioButton *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__RadioButton,0,1,"RadioButton_setCaption");
  arg2 = (char*)lua_tostring(L, 2);
  (arg1)->setCaption((char const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RadioButton_setName(lua_State* L) {
  int SWIG_arg = -1;
  love::RadioButton *arg1 = (love::RadioButton *) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(love::RadioButton *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__RadioButton,0,1,"RadioButton_setName");
  arg2 = (char*)lua_tostring(L, 2);
  (arg1)->setName((char const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RadioButton_setMarked(lua_State* L) {
  int SWIG_arg = -1;
  love::RadioButton *arg1 = (love::RadioButton *) 0 ;
  bool arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isboolean(L,2)) SWIG_fail_arg(2);
  arg1=(love::RadioButton *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__RadioButton,0,1,"RadioButton_setMarked");
  arg2 = (bool)lua_toboolean(L, 2);
  (arg1)->setMarked(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RadioButton_align(lua_State* L) {
  int SWIG_arg = -1;
  love::RadioButton *arg1 = (love::RadioButton *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::RadioButton *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__RadioButton,0,1,"RadioButton_align");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->align(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RadioButton_valign(lua_State* L) {
  int SWIG_arg = -1;
  love::RadioButton *arg1 = (love::RadioButton *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::RadioButton *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__RadioButton,0,1,"RadioButton_valign");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->valign(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RadioButton_setBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  love::RadioButton *arg1 = (love::RadioButton *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::RadioButton *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__RadioButton,0,1,"RadioButton_setBackgroundColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"RadioButton_setBackgroundColor");
  (arg1)->setBackgroundColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RadioButton_setDefaultImage(lua_State* L) {
  int SWIG_arg = -1;
  love::RadioButton *arg1 = (love::RadioButton *) 0 ;
  pAbstractImage *arg2 = (pAbstractImage *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::RadioButton *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__RadioButton,0,1,"RadioButton_setDefaultImage");
  arg2=(pAbstractImage *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_pAbstractImage,0,2,"RadioButton_setDefaultImage");
  (arg1)->setDefaultImage((pAbstractImage const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RadioButton_setMarkedImage(lua_State* L) {
  int SWIG_arg = -1;
  love::RadioButton *arg1 = (love::RadioButton *) 0 ;
  pAbstractImage *arg2 = (pAbstractImage *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::RadioButton *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__RadioButton,0,1,"RadioButton_setMarkedImage");
  arg2=(pAbstractImage *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_pAbstractImage,0,2,"RadioButton_setMarkedImage");
  (arg1)->setMarkedImage((pAbstractImage const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RadioButton_getWidth(lua_State* L) {
  int SWIG_arg = -1;
  love::RadioButton *arg1 = (love::RadioButton *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::RadioButton *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__RadioButton,0,1,"RadioButton_getWidth");
  result = (int)(arg1)->getWidth();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RadioButton_getHeight(lua_State* L) {
  int SWIG_arg = -1;
  love::RadioButton *arg1 = (love::RadioButton *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::RadioButton *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__RadioButton,0,1,"RadioButton_getHeight");
  result = (int)(arg1)->getHeight();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RadioButton_getBorderSize(lua_State* L) {
  int SWIG_arg = -1;
  love::RadioButton *arg1 = (love::RadioButton *) 0 ;
  unsigned int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::RadioButton *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__RadioButton,0,1,"RadioButton_getBorderSize");
  result = (unsigned int)(arg1)->getBorderSize();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RadioButton_getCaption(lua_State* L) {
  int SWIG_arg = -1;
  love::RadioButton *arg1 = (love::RadioButton *) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::RadioButton *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__RadioButton,0,1,"RadioButton_getCaption");
  result = (char *)(arg1)->getCaption();
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RadioButton_getName(lua_State* L) {
  int SWIG_arg = -1;
  love::RadioButton *arg1 = (love::RadioButton *) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::RadioButton *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__RadioButton,0,1,"RadioButton_getName");
  result = (char *)(arg1)->getName();
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RadioButton_isMarked(lua_State* L) {
  int SWIG_arg = -1;
  love::RadioButton *arg1 = (love::RadioButton *) 0 ;
  bool result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::RadioButton *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__RadioButton,0,1,"RadioButton_isMarked");
  result = (bool)(arg1)->isMarked();
  SWIG_arg=0;
  lua_pushboolean(L,(int)result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RadioButton_getBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  love::RadioButton *arg1 = (love::RadioButton *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::RadioButton *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__RadioButton,0,1,"RadioButton_getBackgroundColor");
  result = (arg1)->getBackgroundColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RadioButton_getDefaultImage(lua_State* L) {
  int SWIG_arg = -1;
  love::RadioButton *arg1 = (love::RadioButton *) 0 ;
  pAbstractImage result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::RadioButton *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__RadioButton,0,1,"RadioButton_getDefaultImage");
  result = (arg1)->getDefaultImage();
  SWIG_arg=0;
  {
    pAbstractImage * resultptr;
    resultptr = new pAbstractImage((pAbstractImage &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pAbstractImage,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RadioButton_getMarkedImage(lua_State* L) {
  int SWIG_arg = -1;
  love::RadioButton *arg1 = (love::RadioButton *) 0 ;
  pAbstractImage result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::RadioButton *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__RadioButton,0,1,"RadioButton_getMarkedImage");
  result = (arg1)->getMarkedImage();
  SWIG_arg=0;
  {
    pAbstractImage * resultptr;
    resultptr = new pAbstractImage((pAbstractImage &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pAbstractImage,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RadioButton_adjustSize(lua_State* L) {
  int SWIG_arg = -1;
  love::RadioButton *arg1 = (love::RadioButton *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::RadioButton *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__RadioButton,0,1,"RadioButton_adjustSize");
  (arg1)->adjustSize();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RadioButton_draw(lua_State* L) {
  int SWIG_arg = -1;
  love::RadioButton *arg1 = (love::RadioButton *) 0 ;
  gcn::Graphics *arg2 = (gcn::Graphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::RadioButton *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__RadioButton,0,1,"RadioButton_draw");
  arg2=(gcn::Graphics *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Graphics,0,2,"RadioButton_draw");
  (arg1)->draw(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RadioButton_drawBorder(lua_State* L) {
  int SWIG_arg = -1;
  love::RadioButton *arg1 = (love::RadioButton *) 0 ;
  gcn::Graphics *arg2 = (gcn::Graphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::RadioButton *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__RadioButton,0,1,"RadioButton_drawBorder");
  arg2=(gcn::Graphics *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Graphics,0,2,"RadioButton_drawBorder");
  (arg1)->drawBorder(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RadioButton_drawBox(lua_State* L) {
  int SWIG_arg = -1;
  love::RadioButton *arg1 = (love::RadioButton *) 0 ;
  gcn::Graphics *arg2 = (gcn::Graphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::RadioButton *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__RadioButton,0,1,"RadioButton_drawBox");
  arg2=(gcn::Graphics *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Graphics,0,2,"RadioButton_drawBox");
  (arg1)->drawBox(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RadioButton(void *obj) {
love::RadioButton *arg1 = (love::RadioButton *) obj;
delete arg1;
}
static swig_lua_method swig_love_RadioButton_methods[] = {
    {"setSize", _wrap_RadioButton_setSize}, 
    {"setWidth", _wrap_RadioButton_setWidth}, 
    {"setHeight", _wrap_RadioButton_setHeight}, 
    {"setBorderSize", _wrap_RadioButton_setBorderSize}, 
    {"setCaption", _wrap_RadioButton_setCaption}, 
    {"setName", _wrap_RadioButton_setName}, 
    {"setMarked", _wrap_RadioButton_setMarked}, 
    {"align", _wrap_RadioButton_align}, 
    {"valign", _wrap_RadioButton_valign}, 
    {"setBackgroundColor", _wrap_RadioButton_setBackgroundColor}, 
    {"setDefaultImage", _wrap_RadioButton_setDefaultImage}, 
    {"setMarkedImage", _wrap_RadioButton_setMarkedImage}, 
    {"getWidth", _wrap_RadioButton_getWidth}, 
    {"getHeight", _wrap_RadioButton_getHeight}, 
    {"getBorderSize", _wrap_RadioButton_getBorderSize}, 
    {"getCaption", _wrap_RadioButton_getCaption}, 
    {"getName", _wrap_RadioButton_getName}, 
    {"isMarked", _wrap_RadioButton_isMarked}, 
    {"getBackgroundColor", _wrap_RadioButton_getBackgroundColor}, 
    {"getDefaultImage", _wrap_RadioButton_getDefaultImage}, 
    {"getMarkedImage", _wrap_RadioButton_getMarkedImage}, 
    {"adjustSize", _wrap_RadioButton_adjustSize}, 
    {"draw", _wrap_RadioButton_draw}, 
    {"drawBorder", _wrap_RadioButton_drawBorder}, 
    {"drawBox", _wrap_RadioButton_drawBox}, 
    {0,0}
};
static swig_lua_attribute swig_love_RadioButton_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_love_RadioButton_bases[] = {&_wrap_class_love_GUIElement,0};
swig_lua_class _wrap_class_love_RadioButton = { "RadioButton", &SWIGTYPE_p_love__RadioButton,_wrap_new_RadioButton, swig_delete_RadioButton, swig_love_RadioButton_methods, swig_love_RadioButton_attributes, swig_love_RadioButton_bases };

static int _wrap_new_CheckBox__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  string arg1 ;
  love::CheckBox *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  {
    string * argp;
    if(SWIG_ConvertPtr(L,1,(void**)(&argp),SWIGTYPE_p_string,0)) SWIG_fail;
    arg1 = *argp;
  }
  result = (love::CheckBox *)new love::CheckBox(arg1);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__CheckBox,1); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CheckBox__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::CheckBox *result = 0 ;
  
  result = (love::CheckBox *)new love::CheckBox();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__CheckBox,1); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CheckBox(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_CheckBox__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_CheckBox__SWIG_0(L);
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'new_CheckBox'");
  lua_error(L);return 0;
}


static int _wrap_delete_CheckBox(lua_State* L) {
  int SWIG_arg = -1;
  love::CheckBox *arg1 = (love::CheckBox *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::CheckBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__CheckBox,0,1,"delete_CheckBox");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CheckBox_setSize(lua_State* L) {
  int SWIG_arg = -1;
  love::CheckBox *arg1 = (love::CheckBox *) 0 ;
  int arg2 ;
  int arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::CheckBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__CheckBox,0,1,"CheckBox_setSize");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->setSize(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CheckBox_setWidth(lua_State* L) {
  int SWIG_arg = -1;
  love::CheckBox *arg1 = (love::CheckBox *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::CheckBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__CheckBox,0,1,"CheckBox_setWidth");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setWidth(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CheckBox_setHeight(lua_State* L) {
  int SWIG_arg = -1;
  love::CheckBox *arg1 = (love::CheckBox *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::CheckBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__CheckBox,0,1,"CheckBox_setHeight");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setHeight(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CheckBox_setBorderSize(lua_State* L) {
  int SWIG_arg = -1;
  love::CheckBox *arg1 = (love::CheckBox *) 0 ;
  unsigned int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::CheckBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__CheckBox,0,1,"CheckBox_setBorderSize");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setBorderSize(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CheckBox_setCaption(lua_State* L) {
  int SWIG_arg = -1;
  love::CheckBox *arg1 = (love::CheckBox *) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(love::CheckBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__CheckBox,0,1,"CheckBox_setCaption");
  arg2 = (char*)lua_tostring(L, 2);
  (arg1)->setCaption((char const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CheckBox_setName(lua_State* L) {
  int SWIG_arg = -1;
  love::CheckBox *arg1 = (love::CheckBox *) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(love::CheckBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__CheckBox,0,1,"CheckBox_setName");
  arg2 = (char*)lua_tostring(L, 2);
  (arg1)->setName((char const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CheckBox_setMarked(lua_State* L) {
  int SWIG_arg = -1;
  love::CheckBox *arg1 = (love::CheckBox *) 0 ;
  bool arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isboolean(L,2)) SWIG_fail_arg(2);
  arg1=(love::CheckBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__CheckBox,0,1,"CheckBox_setMarked");
  arg2 = (bool)lua_toboolean(L, 2);
  (arg1)->setMarked(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CheckBox_align(lua_State* L) {
  int SWIG_arg = -1;
  love::CheckBox *arg1 = (love::CheckBox *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::CheckBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__CheckBox,0,1,"CheckBox_align");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->align(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CheckBox_valign(lua_State* L) {
  int SWIG_arg = -1;
  love::CheckBox *arg1 = (love::CheckBox *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::CheckBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__CheckBox,0,1,"CheckBox_valign");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->valign(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CheckBox_setBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  love::CheckBox *arg1 = (love::CheckBox *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::CheckBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__CheckBox,0,1,"CheckBox_setBackgroundColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"CheckBox_setBackgroundColor");
  (arg1)->setBackgroundColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CheckBox_setDefaultImage(lua_State* L) {
  int SWIG_arg = -1;
  love::CheckBox *arg1 = (love::CheckBox *) 0 ;
  pAbstractImage *arg2 = (pAbstractImage *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::CheckBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__CheckBox,0,1,"CheckBox_setDefaultImage");
  arg2=(pAbstractImage *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_pAbstractImage,0,2,"CheckBox_setDefaultImage");
  (arg1)->setDefaultImage((pAbstractImage const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CheckBox_setMarkedImage(lua_State* L) {
  int SWIG_arg = -1;
  love::CheckBox *arg1 = (love::CheckBox *) 0 ;
  pAbstractImage *arg2 = (pAbstractImage *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::CheckBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__CheckBox,0,1,"CheckBox_setMarkedImage");
  arg2=(pAbstractImage *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_pAbstractImage,0,2,"CheckBox_setMarkedImage");
  (arg1)->setMarkedImage((pAbstractImage const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CheckBox_getWidth(lua_State* L) {
  int SWIG_arg = -1;
  love::CheckBox *arg1 = (love::CheckBox *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::CheckBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__CheckBox,0,1,"CheckBox_getWidth");
  result = (int)(arg1)->getWidth();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CheckBox_getHeight(lua_State* L) {
  int SWIG_arg = -1;
  love::CheckBox *arg1 = (love::CheckBox *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::CheckBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__CheckBox,0,1,"CheckBox_getHeight");
  result = (int)(arg1)->getHeight();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CheckBox_getBorderSize(lua_State* L) {
  int SWIG_arg = -1;
  love::CheckBox *arg1 = (love::CheckBox *) 0 ;
  unsigned int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::CheckBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__CheckBox,0,1,"CheckBox_getBorderSize");
  result = (unsigned int)(arg1)->getBorderSize();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CheckBox_getCaption(lua_State* L) {
  int SWIG_arg = -1;
  love::CheckBox *arg1 = (love::CheckBox *) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::CheckBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__CheckBox,0,1,"CheckBox_getCaption");
  result = (char *)(arg1)->getCaption();
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CheckBox_getName(lua_State* L) {
  int SWIG_arg = -1;
  love::CheckBox *arg1 = (love::CheckBox *) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::CheckBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__CheckBox,0,1,"CheckBox_getName");
  result = (char *)(arg1)->getName();
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CheckBox_isMarked(lua_State* L) {
  int SWIG_arg = -1;
  love::CheckBox *arg1 = (love::CheckBox *) 0 ;
  bool result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::CheckBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__CheckBox,0,1,"CheckBox_isMarked");
  result = (bool)(arg1)->isMarked();
  SWIG_arg=0;
  lua_pushboolean(L,(int)result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CheckBox_getBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  love::CheckBox *arg1 = (love::CheckBox *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::CheckBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__CheckBox,0,1,"CheckBox_getBackgroundColor");
  result = (arg1)->getBackgroundColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CheckBox_getDefaultImage(lua_State* L) {
  int SWIG_arg = -1;
  love::CheckBox *arg1 = (love::CheckBox *) 0 ;
  pAbstractImage result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::CheckBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__CheckBox,0,1,"CheckBox_getDefaultImage");
  result = (arg1)->getDefaultImage();
  SWIG_arg=0;
  {
    pAbstractImage * resultptr;
    resultptr = new pAbstractImage((pAbstractImage &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pAbstractImage,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CheckBox_getMarkedImage(lua_State* L) {
  int SWIG_arg = -1;
  love::CheckBox *arg1 = (love::CheckBox *) 0 ;
  pAbstractImage result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::CheckBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__CheckBox,0,1,"CheckBox_getMarkedImage");
  result = (arg1)->getMarkedImage();
  SWIG_arg=0;
  {
    pAbstractImage * resultptr;
    resultptr = new pAbstractImage((pAbstractImage &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pAbstractImage,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CheckBox_adjustSize(lua_State* L) {
  int SWIG_arg = -1;
  love::CheckBox *arg1 = (love::CheckBox *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::CheckBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__CheckBox,0,1,"CheckBox_adjustSize");
  (arg1)->adjustSize();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CheckBox_draw(lua_State* L) {
  int SWIG_arg = -1;
  love::CheckBox *arg1 = (love::CheckBox *) 0 ;
  gcn::Graphics *arg2 = (gcn::Graphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::CheckBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__CheckBox,0,1,"CheckBox_draw");
  arg2=(gcn::Graphics *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Graphics,0,2,"CheckBox_draw");
  (arg1)->draw(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CheckBox_drawBorder(lua_State* L) {
  int SWIG_arg = -1;
  love::CheckBox *arg1 = (love::CheckBox *) 0 ;
  gcn::Graphics *arg2 = (gcn::Graphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::CheckBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__CheckBox,0,1,"CheckBox_drawBorder");
  arg2=(gcn::Graphics *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Graphics,0,2,"CheckBox_drawBorder");
  (arg1)->drawBorder(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CheckBox_drawBox(lua_State* L) {
  int SWIG_arg = -1;
  love::CheckBox *arg1 = (love::CheckBox *) 0 ;
  gcn::Graphics *arg2 = (gcn::Graphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::CheckBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__CheckBox,0,1,"CheckBox_drawBox");
  arg2=(gcn::Graphics *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Graphics,0,2,"CheckBox_drawBox");
  (arg1)->drawBox(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CheckBox(void *obj) {
love::CheckBox *arg1 = (love::CheckBox *) obj;
delete arg1;
}
static swig_lua_method swig_love_CheckBox_methods[] = {
    {"setSize", _wrap_CheckBox_setSize}, 
    {"setWidth", _wrap_CheckBox_setWidth}, 
    {"setHeight", _wrap_CheckBox_setHeight}, 
    {"setBorderSize", _wrap_CheckBox_setBorderSize}, 
    {"setCaption", _wrap_CheckBox_setCaption}, 
    {"setName", _wrap_CheckBox_setName}, 
    {"setMarked", _wrap_CheckBox_setMarked}, 
    {"align", _wrap_CheckBox_align}, 
    {"valign", _wrap_CheckBox_valign}, 
    {"setBackgroundColor", _wrap_CheckBox_setBackgroundColor}, 
    {"setDefaultImage", _wrap_CheckBox_setDefaultImage}, 
    {"setMarkedImage", _wrap_CheckBox_setMarkedImage}, 
    {"getWidth", _wrap_CheckBox_getWidth}, 
    {"getHeight", _wrap_CheckBox_getHeight}, 
    {"getBorderSize", _wrap_CheckBox_getBorderSize}, 
    {"getCaption", _wrap_CheckBox_getCaption}, 
    {"getName", _wrap_CheckBox_getName}, 
    {"isMarked", _wrap_CheckBox_isMarked}, 
    {"getBackgroundColor", _wrap_CheckBox_getBackgroundColor}, 
    {"getDefaultImage", _wrap_CheckBox_getDefaultImage}, 
    {"getMarkedImage", _wrap_CheckBox_getMarkedImage}, 
    {"adjustSize", _wrap_CheckBox_adjustSize}, 
    {"draw", _wrap_CheckBox_draw}, 
    {"drawBorder", _wrap_CheckBox_drawBorder}, 
    {"drawBox", _wrap_CheckBox_drawBox}, 
    {0,0}
};
static swig_lua_attribute swig_love_CheckBox_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_love_CheckBox_bases[] = {&_wrap_class_love_GUIElement,0};
swig_lua_class _wrap_class_love_CheckBox = { "CheckBox", &SWIGTYPE_p_love__CheckBox,_wrap_new_CheckBox, swig_delete_CheckBox, swig_love_CheckBox_methods, swig_love_CheckBox_attributes, swig_love_CheckBox_bases };

static int _wrap_new_Slider__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  double arg1 ;
  love::Slider *result = 0 ;
  
  if(!lua_isnumber(L,1)) SWIG_fail_arg(1);
  arg1 = (double)lua_tonumber(L, 1);
  result = (love::Slider *)new love::Slider(arg1);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__Slider,1); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Slider__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::Slider *result = 0 ;
  
  result = (love::Slider *)new love::Slider();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__Slider,1); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Slider__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  double arg1 ;
  double arg2 ;
  love::Slider *result = 0 ;
  
  if(!lua_isnumber(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = (love::Slider *)new love::Slider(arg1,arg2);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__Slider,1); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Slider(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Slider__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Slider__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Slider__SWIG_2(L);
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'new_Slider'");
  lua_error(L);return 0;
}


static int _wrap_delete_Slider(lua_State* L) {
  int SWIG_arg = -1;
  love::Slider *arg1 = (love::Slider *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Slider *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Slider,0,1,"delete_Slider");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slider_setSize(lua_State* L) {
  int SWIG_arg = -1;
  love::Slider *arg1 = (love::Slider *) 0 ;
  int arg2 ;
  int arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::Slider *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Slider,0,1,"Slider_setSize");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->setSize(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slider_setWidth(lua_State* L) {
  int SWIG_arg = -1;
  love::Slider *arg1 = (love::Slider *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Slider *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Slider,0,1,"Slider_setWidth");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setWidth(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slider_setHeight(lua_State* L) {
  int SWIG_arg = -1;
  love::Slider *arg1 = (love::Slider *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Slider *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Slider,0,1,"Slider_setHeight");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setHeight(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slider_setBorderSize(lua_State* L) {
  int SWIG_arg = -1;
  love::Slider *arg1 = (love::Slider *) 0 ;
  unsigned int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Slider *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Slider,0,1,"Slider_setBorderSize");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setBorderSize(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slider_setScale(lua_State* L) {
  int SWIG_arg = -1;
  love::Slider *arg1 = (love::Slider *) 0 ;
  double arg2 ;
  double arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::Slider *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Slider,0,1,"Slider_setScale");
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setScale(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slider_setScaleStart(lua_State* L) {
  int SWIG_arg = -1;
  love::Slider *arg1 = (love::Slider *) 0 ;
  double arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Slider *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Slider,0,1,"Slider_setScaleStart");
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setScaleStart(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slider_setScaleEnd(lua_State* L) {
  int SWIG_arg = -1;
  love::Slider *arg1 = (love::Slider *) 0 ;
  double arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Slider *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Slider,0,1,"Slider_setScaleEnd");
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setScaleEnd(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slider_setStepLength(lua_State* L) {
  int SWIG_arg = -1;
  love::Slider *arg1 = (love::Slider *) 0 ;
  double arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Slider *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Slider,0,1,"Slider_setStepLength");
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setStepLength(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slider_setMarkerLength(lua_State* L) {
  int SWIG_arg = -1;
  love::Slider *arg1 = (love::Slider *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Slider *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Slider,0,1,"Slider_setMarkerLength");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setMarkerLength(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slider_setOrientation(lua_State* L) {
  int SWIG_arg = -1;
  love::Slider *arg1 = (love::Slider *) 0 ;
  unsigned int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Slider *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Slider,0,1,"Slider_setOrientation");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setOrientation(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slider_setValue(lua_State* L) {
  int SWIG_arg = -1;
  love::Slider *arg1 = (love::Slider *) 0 ;
  double arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Slider *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Slider,0,1,"Slider_setValue");
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setValue(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slider_setName(lua_State* L) {
  int SWIG_arg = -1;
  love::Slider *arg1 = (love::Slider *) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(love::Slider *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Slider,0,1,"Slider_setName");
  arg2 = (char*)lua_tostring(L, 2);
  (arg1)->setName((char const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slider_setBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  love::Slider *arg1 = (love::Slider *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::Slider *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Slider,0,1,"Slider_setBackgroundColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"Slider_setBackgroundColor");
  (arg1)->setBackgroundColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slider_setMarkerImage(lua_State* L) {
  int SWIG_arg = -1;
  love::Slider *arg1 = (love::Slider *) 0 ;
  pAbstractImage *arg2 = (pAbstractImage *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::Slider *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Slider,0,1,"Slider_setMarkerImage");
  arg2=(pAbstractImage *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_pAbstractImage,0,2,"Slider_setMarkerImage");
  (arg1)->setMarkerImage((pAbstractImage const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slider_setBackgroundImage(lua_State* L) {
  int SWIG_arg = -1;
  love::Slider *arg1 = (love::Slider *) 0 ;
  pAbstractImage *arg2 = (pAbstractImage *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::Slider *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Slider,0,1,"Slider_setBackgroundImage");
  arg2=(pAbstractImage *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_pAbstractImage,0,2,"Slider_setBackgroundImage");
  (arg1)->setBackgroundImage((pAbstractImage const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slider_getWidth(lua_State* L) {
  int SWIG_arg = -1;
  love::Slider *arg1 = (love::Slider *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Slider *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Slider,0,1,"Slider_getWidth");
  result = (int)(arg1)->getWidth();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slider_getHeight(lua_State* L) {
  int SWIG_arg = -1;
  love::Slider *arg1 = (love::Slider *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Slider *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Slider,0,1,"Slider_getHeight");
  result = (int)(arg1)->getHeight();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slider_getBorderSize(lua_State* L) {
  int SWIG_arg = -1;
  love::Slider *arg1 = (love::Slider *) 0 ;
  unsigned int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Slider *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Slider,0,1,"Slider_getBorderSize");
  result = (unsigned int)(arg1)->getBorderSize();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slider_getScaleStart(lua_State* L) {
  int SWIG_arg = -1;
  love::Slider *arg1 = (love::Slider *) 0 ;
  double result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Slider *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Slider,0,1,"Slider_getScaleStart");
  result = (double)(arg1)->getScaleStart();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slider_getScaleEnd(lua_State* L) {
  int SWIG_arg = -1;
  love::Slider *arg1 = (love::Slider *) 0 ;
  double result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Slider *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Slider,0,1,"Slider_getScaleEnd");
  result = (double)(arg1)->getScaleEnd();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slider_getStepLength(lua_State* L) {
  int SWIG_arg = -1;
  love::Slider *arg1 = (love::Slider *) 0 ;
  double result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Slider *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Slider,0,1,"Slider_getStepLength");
  result = (double)(arg1)->getStepLength();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slider_getMarkerLength(lua_State* L) {
  int SWIG_arg = -1;
  love::Slider *arg1 = (love::Slider *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Slider *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Slider,0,1,"Slider_getMarkerLength");
  result = (int)(arg1)->getMarkerLength();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slider_getOrientation(lua_State* L) {
  int SWIG_arg = -1;
  love::Slider *arg1 = (love::Slider *) 0 ;
  unsigned int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Slider *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Slider,0,1,"Slider_getOrientation");
  result = (unsigned int)(arg1)->getOrientation();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slider_getValue(lua_State* L) {
  int SWIG_arg = -1;
  love::Slider *arg1 = (love::Slider *) 0 ;
  double result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Slider *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Slider,0,1,"Slider_getValue");
  result = (double)(arg1)->getValue();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slider_getName(lua_State* L) {
  int SWIG_arg = -1;
  love::Slider *arg1 = (love::Slider *) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Slider *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Slider,0,1,"Slider_getName");
  result = (char *)(arg1)->getName();
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slider_getBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  love::Slider *arg1 = (love::Slider *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Slider *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Slider,0,1,"Slider_getBackgroundColor");
  result = (arg1)->getBackgroundColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slider_getMarkerImage(lua_State* L) {
  int SWIG_arg = -1;
  love::Slider *arg1 = (love::Slider *) 0 ;
  pAbstractImage result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Slider *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Slider,0,1,"Slider_getMarkerImage");
  result = (arg1)->getMarkerImage();
  SWIG_arg=0;
  {
    pAbstractImage * resultptr;
    resultptr = new pAbstractImage((pAbstractImage &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pAbstractImage,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slider_getBackgroundImage(lua_State* L) {
  int SWIG_arg = -1;
  love::Slider *arg1 = (love::Slider *) 0 ;
  pAbstractImage result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Slider *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Slider,0,1,"Slider_getBackgroundImage");
  result = (arg1)->getBackgroundImage();
  SWIG_arg=0;
  {
    pAbstractImage * resultptr;
    resultptr = new pAbstractImage((pAbstractImage &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pAbstractImage,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slider_adjustSize(lua_State* L) {
  int SWIG_arg = -1;
  love::Slider *arg1 = (love::Slider *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Slider *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Slider,0,1,"Slider_adjustSize");
  (arg1)->adjustSize();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slider_draw(lua_State* L) {
  int SWIG_arg = -1;
  love::Slider *arg1 = (love::Slider *) 0 ;
  gcn::Graphics *arg2 = (gcn::Graphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::Slider *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Slider,0,1,"Slider_draw");
  arg2=(gcn::Graphics *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Graphics,0,2,"Slider_draw");
  (arg1)->draw(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slider_drawBorder(lua_State* L) {
  int SWIG_arg = -1;
  love::Slider *arg1 = (love::Slider *) 0 ;
  gcn::Graphics *arg2 = (gcn::Graphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::Slider *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Slider,0,1,"Slider_drawBorder");
  arg2=(gcn::Graphics *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Graphics,0,2,"Slider_drawBorder");
  (arg1)->drawBorder(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slider_drawMarker(lua_State* L) {
  int SWIG_arg = -1;
  love::Slider *arg1 = (love::Slider *) 0 ;
  gcn::Graphics *arg2 = (gcn::Graphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::Slider *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Slider,0,1,"Slider_drawMarker");
  arg2=(gcn::Graphics *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Graphics,0,2,"Slider_drawMarker");
  (arg1)->drawMarker(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Slider(void *obj) {
love::Slider *arg1 = (love::Slider *) obj;
delete arg1;
}
static swig_lua_method swig_love_Slider_methods[] = {
    {"setSize", _wrap_Slider_setSize}, 
    {"setWidth", _wrap_Slider_setWidth}, 
    {"setHeight", _wrap_Slider_setHeight}, 
    {"setBorderSize", _wrap_Slider_setBorderSize}, 
    {"setScale", _wrap_Slider_setScale}, 
    {"setScaleStart", _wrap_Slider_setScaleStart}, 
    {"setScaleEnd", _wrap_Slider_setScaleEnd}, 
    {"setStepLength", _wrap_Slider_setStepLength}, 
    {"setMarkerLength", _wrap_Slider_setMarkerLength}, 
    {"setOrientation", _wrap_Slider_setOrientation}, 
    {"setValue", _wrap_Slider_setValue}, 
    {"setName", _wrap_Slider_setName}, 
    {"setBackgroundColor", _wrap_Slider_setBackgroundColor}, 
    {"setMarkerImage", _wrap_Slider_setMarkerImage}, 
    {"setBackgroundImage", _wrap_Slider_setBackgroundImage}, 
    {"getWidth", _wrap_Slider_getWidth}, 
    {"getHeight", _wrap_Slider_getHeight}, 
    {"getBorderSize", _wrap_Slider_getBorderSize}, 
    {"getScaleStart", _wrap_Slider_getScaleStart}, 
    {"getScaleEnd", _wrap_Slider_getScaleEnd}, 
    {"getStepLength", _wrap_Slider_getStepLength}, 
    {"getMarkerLength", _wrap_Slider_getMarkerLength}, 
    {"getOrientation", _wrap_Slider_getOrientation}, 
    {"getValue", _wrap_Slider_getValue}, 
    {"getName", _wrap_Slider_getName}, 
    {"getBackgroundColor", _wrap_Slider_getBackgroundColor}, 
    {"getMarkerImage", _wrap_Slider_getMarkerImage}, 
    {"getBackgroundImage", _wrap_Slider_getBackgroundImage}, 
    {"adjustSize", _wrap_Slider_adjustSize}, 
    {"draw", _wrap_Slider_draw}, 
    {"drawBorder", _wrap_Slider_drawBorder}, 
    {"drawMarker", _wrap_Slider_drawMarker}, 
    {0,0}
};
static swig_lua_attribute swig_love_Slider_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_love_Slider_bases[] = {&_wrap_class_love_GUIElement,0};
swig_lua_class _wrap_class_love_Slider = { "Slider", &SWIGTYPE_p_love__Slider,_wrap_new_Slider, swig_delete_Slider, swig_love_Slider_methods, swig_love_Slider_attributes, swig_love_Slider_bases };

static int _wrap_new_ListBox(lua_State* L) {
  int SWIG_arg = -1;
  GUIList *arg1 = (GUIList *) 0 ;
  love::ListBox *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(GUIList *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_GUIList,0,1,"new_ListBox");
  result = (love::ListBox *)new love::ListBox(arg1);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__ListBox,1); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_ListBox(lua_State* L) {
  int SWIG_arg = -1;
  love::ListBox *arg1 = (love::ListBox *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::ListBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ListBox,0,1,"delete_ListBox");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ListBox_setSize(lua_State* L) {
  int SWIG_arg = -1;
  love::ListBox *arg1 = (love::ListBox *) 0 ;
  int arg2 ;
  int arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::ListBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ListBox,0,1,"ListBox_setSize");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->setSize(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ListBox_setWidth(lua_State* L) {
  int SWIG_arg = -1;
  love::ListBox *arg1 = (love::ListBox *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::ListBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ListBox,0,1,"ListBox_setWidth");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setWidth(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ListBox_setHeight(lua_State* L) {
  int SWIG_arg = -1;
  love::ListBox *arg1 = (love::ListBox *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::ListBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ListBox,0,1,"ListBox_setHeight");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setHeight(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ListBox_setBorderSize(lua_State* L) {
  int SWIG_arg = -1;
  love::ListBox *arg1 = (love::ListBox *) 0 ;
  unsigned int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::ListBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ListBox,0,1,"ListBox_setBorderSize");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setBorderSize(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ListBox_setName(lua_State* L) {
  int SWIG_arg = -1;
  love::ListBox *arg1 = (love::ListBox *) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(love::ListBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ListBox,0,1,"ListBox_setName");
  arg2 = (char*)lua_tostring(L, 2);
  (arg1)->setName((char const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ListBox_setBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  love::ListBox *arg1 = (love::ListBox *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::ListBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ListBox,0,1,"ListBox_setBackgroundColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"ListBox_setBackgroundColor");
  (arg1)->setBackgroundColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ListBox_setSelectionColor(lua_State* L) {
  int SWIG_arg = -1;
  love::ListBox *arg1 = (love::ListBox *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::ListBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ListBox,0,1,"ListBox_setSelectionColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"ListBox_setSelectionColor");
  (arg1)->setSelectionColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ListBox_setSelectionBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  love::ListBox *arg1 = (love::ListBox *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::ListBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ListBox,0,1,"ListBox_setSelectionBackgroundColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"ListBox_setSelectionBackgroundColor");
  (arg1)->setSelectionBackgroundColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ListBox_getWidth(lua_State* L) {
  int SWIG_arg = -1;
  love::ListBox *arg1 = (love::ListBox *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::ListBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ListBox,0,1,"ListBox_getWidth");
  result = (int)(arg1)->getWidth();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ListBox_getHeight(lua_State* L) {
  int SWIG_arg = -1;
  love::ListBox *arg1 = (love::ListBox *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::ListBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ListBox,0,1,"ListBox_getHeight");
  result = (int)(arg1)->getHeight();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ListBox_getBorderSize(lua_State* L) {
  int SWIG_arg = -1;
  love::ListBox *arg1 = (love::ListBox *) 0 ;
  unsigned int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::ListBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ListBox,0,1,"ListBox_getBorderSize");
  result = (unsigned int)(arg1)->getBorderSize();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ListBox_getName(lua_State* L) {
  int SWIG_arg = -1;
  love::ListBox *arg1 = (love::ListBox *) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::ListBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ListBox,0,1,"ListBox_getName");
  result = (char *)(arg1)->getName();
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ListBox_getBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  love::ListBox *arg1 = (love::ListBox *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::ListBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ListBox,0,1,"ListBox_getBackgroundColor");
  result = (arg1)->getBackgroundColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ListBox_getSeclectionColor(lua_State* L) {
  int SWIG_arg = -1;
  love::ListBox *arg1 = (love::ListBox *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::ListBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ListBox,0,1,"ListBox_getSeclectionColor");
  result = (arg1)->getSeclectionColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ListBox_getSeclectionBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  love::ListBox *arg1 = (love::ListBox *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::ListBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ListBox,0,1,"ListBox_getSeclectionBackgroundColor");
  result = (arg1)->getSeclectionBackgroundColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ListBox_adjustSize(lua_State* L) {
  int SWIG_arg = -1;
  love::ListBox *arg1 = (love::ListBox *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::ListBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ListBox,0,1,"ListBox_adjustSize");
  (arg1)->adjustSize();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ListBox_add(lua_State* L) {
  int SWIG_arg = -1;
  love::ListBox *arg1 = (love::ListBox *) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(love::ListBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ListBox,0,1,"ListBox_add");
  arg2 = (char*)lua_tostring(L, 2);
  (arg1)->add((char const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ListBox_remove(lua_State* L) {
  int SWIG_arg = -1;
  love::ListBox *arg1 = (love::ListBox *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::ListBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ListBox,0,1,"ListBox_remove");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->remove(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ListBox_clear(lua_State* L) {
  int SWIG_arg = -1;
  love::ListBox *arg1 = (love::ListBox *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::ListBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ListBox,0,1,"ListBox_clear");
  (arg1)->clear();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ListBox_getElementAt(lua_State* L) {
  int SWIG_arg = -1;
  love::ListBox *arg1 = (love::ListBox *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::ListBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ListBox,0,1,"ListBox_getElementAt");
  arg2 = (int)lua_tonumber(L, 2);
  result = (char *)(arg1)->getElementAt(arg2);
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ListBox_getSelected(lua_State* L) {
  int SWIG_arg = -1;
  love::ListBox *arg1 = (love::ListBox *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::ListBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ListBox,0,1,"ListBox_getSelected");
  result = (int)(arg1)->getSelected();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ListBox_getSelectedElement(lua_State* L) {
  int SWIG_arg = -1;
  love::ListBox *arg1 = (love::ListBox *) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::ListBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ListBox,0,1,"ListBox_getSelectedElement");
  result = (char *)(arg1)->getSelectedElement();
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ListBox_getNumberOfElements(lua_State* L) {
  int SWIG_arg = -1;
  love::ListBox *arg1 = (love::ListBox *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::ListBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ListBox,0,1,"ListBox_getNumberOfElements");
  result = (int)(arg1)->getNumberOfElements();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ListBox_draw(lua_State* L) {
  int SWIG_arg = -1;
  love::ListBox *arg1 = (love::ListBox *) 0 ;
  gcn::Graphics *arg2 = (gcn::Graphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::ListBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ListBox,0,1,"ListBox_draw");
  arg2=(gcn::Graphics *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Graphics,0,2,"ListBox_draw");
  (arg1)->draw(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ListBox_drawBorder(lua_State* L) {
  int SWIG_arg = -1;
  love::ListBox *arg1 = (love::ListBox *) 0 ;
  gcn::Graphics *arg2 = (gcn::Graphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::ListBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ListBox,0,1,"ListBox_drawBorder");
  arg2=(gcn::Graphics *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Graphics,0,2,"ListBox_drawBorder");
  (arg1)->drawBorder(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ListBox(void *obj) {
love::ListBox *arg1 = (love::ListBox *) obj;
delete arg1;
}
static swig_lua_method swig_love_ListBox_methods[] = {
    {"setSize", _wrap_ListBox_setSize}, 
    {"setWidth", _wrap_ListBox_setWidth}, 
    {"setHeight", _wrap_ListBox_setHeight}, 
    {"setBorderSize", _wrap_ListBox_setBorderSize}, 
    {"setName", _wrap_ListBox_setName}, 
    {"setBackgroundColor", _wrap_ListBox_setBackgroundColor}, 
    {"setSelectionColor", _wrap_ListBox_setSelectionColor}, 
    {"setSelectionBackgroundColor", _wrap_ListBox_setSelectionBackgroundColor}, 
    {"getWidth", _wrap_ListBox_getWidth}, 
    {"getHeight", _wrap_ListBox_getHeight}, 
    {"getBorderSize", _wrap_ListBox_getBorderSize}, 
    {"getName", _wrap_ListBox_getName}, 
    {"getBackgroundColor", _wrap_ListBox_getBackgroundColor}, 
    {"getSeclectionColor", _wrap_ListBox_getSeclectionColor}, 
    {"getSeclectionBackgroundColor", _wrap_ListBox_getSeclectionBackgroundColor}, 
    {"adjustSize", _wrap_ListBox_adjustSize}, 
    {"add", _wrap_ListBox_add}, 
    {"remove", _wrap_ListBox_remove}, 
    {"clear", _wrap_ListBox_clear}, 
    {"getElementAt", _wrap_ListBox_getElementAt}, 
    {"getSelected", _wrap_ListBox_getSelected}, 
    {"getSelectedElement", _wrap_ListBox_getSelectedElement}, 
    {"getNumberOfElements", _wrap_ListBox_getNumberOfElements}, 
    {"draw", _wrap_ListBox_draw}, 
    {"drawBorder", _wrap_ListBox_drawBorder}, 
    {0,0}
};
static swig_lua_attribute swig_love_ListBox_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_love_ListBox_bases[] = {&_wrap_class_love_GUIElement,0};
swig_lua_class _wrap_class_love_ListBox = { "ListBox", &SWIGTYPE_p_love__ListBox,_wrap_new_ListBox, swig_delete_ListBox, swig_love_ListBox_methods, swig_love_ListBox_attributes, swig_love_ListBox_bases };

static int _wrap_new_TextBox__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  char *arg1 = (char *) 0 ;
  love::TextBox *result = 0 ;
  
  if(!lua_isstring(L,1)) SWIG_fail_arg(1);
  arg1 = (char*)lua_tostring(L, 1);
  result = (love::TextBox *)new love::TextBox((char const *)arg1);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__TextBox,1); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TextBox__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::TextBox *result = 0 ;
  
  result = (love::TextBox *)new love::TextBox();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__TextBox,1); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TextBox(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_TextBox__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_TextBox__SWIG_0(L);
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'new_TextBox'");
  lua_error(L);return 0;
}


static int _wrap_delete_TextBox(lua_State* L) {
  int SWIG_arg = -1;
  love::TextBox *arg1 = (love::TextBox *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::TextBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__TextBox,0,1,"delete_TextBox");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextBox_setSize(lua_State* L) {
  int SWIG_arg = -1;
  love::TextBox *arg1 = (love::TextBox *) 0 ;
  int arg2 ;
  int arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::TextBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__TextBox,0,1,"TextBox_setSize");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->setSize(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextBox_setWidth(lua_State* L) {
  int SWIG_arg = -1;
  love::TextBox *arg1 = (love::TextBox *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::TextBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__TextBox,0,1,"TextBox_setWidth");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setWidth(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextBox_setHeight(lua_State* L) {
  int SWIG_arg = -1;
  love::TextBox *arg1 = (love::TextBox *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::TextBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__TextBox,0,1,"TextBox_setHeight");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setHeight(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextBox_setBorderSize(lua_State* L) {
  int SWIG_arg = -1;
  love::TextBox *arg1 = (love::TextBox *) 0 ;
  unsigned int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::TextBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__TextBox,0,1,"TextBox_setBorderSize");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setBorderSize(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextBox_setText(lua_State* L) {
  int SWIG_arg = -1;
  love::TextBox *arg1 = (love::TextBox *) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(love::TextBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__TextBox,0,1,"TextBox_setText");
  arg2 = (char*)lua_tostring(L, 2);
  (arg1)->setText((char const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextBox_setName(lua_State* L) {
  int SWIG_arg = -1;
  love::TextBox *arg1 = (love::TextBox *) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(love::TextBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__TextBox,0,1,"TextBox_setName");
  arg2 = (char*)lua_tostring(L, 2);
  (arg1)->setName((char const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextBox_setCaretColumn(lua_State* L) {
  int SWIG_arg = -1;
  love::TextBox *arg1 = (love::TextBox *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::TextBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__TextBox,0,1,"TextBox_setCaretColumn");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setCaretColumn(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextBox_setCaretPosition(lua_State* L) {
  int SWIG_arg = -1;
  love::TextBox *arg1 = (love::TextBox *) 0 ;
  unsigned int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::TextBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__TextBox,0,1,"TextBox_setCaretPosition");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setCaretPosition(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextBox_setCaretRow(lua_State* L) {
  int SWIG_arg = -1;
  love::TextBox *arg1 = (love::TextBox *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::TextBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__TextBox,0,1,"TextBox_setCaretRow");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setCaretRow(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextBox_setCaretRowColumn(lua_State* L) {
  int SWIG_arg = -1;
  love::TextBox *arg1 = (love::TextBox *) 0 ;
  int arg2 ;
  int arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::TextBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__TextBox,0,1,"TextBox_setCaretRowColumn");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->setCaretRowColumn(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextBox_setEditable(lua_State* L) {
  int SWIG_arg = -1;
  love::TextBox *arg1 = (love::TextBox *) 0 ;
  bool arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isboolean(L,2)) SWIG_fail_arg(2);
  arg1=(love::TextBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__TextBox,0,1,"TextBox_setEditable");
  arg2 = (bool)lua_toboolean(L, 2);
  (arg1)->setEditable(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextBox_setTextRow(lua_State* L) {
  int SWIG_arg = -1;
  love::TextBox *arg1 = (love::TextBox *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isstring(L,3)) SWIG_fail_arg(3);
  arg1=(love::TextBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__TextBox,0,1,"TextBox_setTextRow");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char*)lua_tostring(L, 3);
  (arg1)->setTextRow(arg2,(char const *)arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextBox_setBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  love::TextBox *arg1 = (love::TextBox *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::TextBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__TextBox,0,1,"TextBox_setBackgroundColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"TextBox_setBackgroundColor");
  (arg1)->setBackgroundColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextBox_setActiveColor(lua_State* L) {
  int SWIG_arg = -1;
  love::TextBox *arg1 = (love::TextBox *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::TextBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__TextBox,0,1,"TextBox_setActiveColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"TextBox_setActiveColor");
  (arg1)->setActiveColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextBox_setActiveBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  love::TextBox *arg1 = (love::TextBox *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::TextBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__TextBox,0,1,"TextBox_setActiveBackgroundColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"TextBox_setActiveBackgroundColor");
  (arg1)->setActiveBackgroundColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextBox_getWidth(lua_State* L) {
  int SWIG_arg = -1;
  love::TextBox *arg1 = (love::TextBox *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::TextBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__TextBox,0,1,"TextBox_getWidth");
  result = (int)(arg1)->getWidth();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextBox_getHeight(lua_State* L) {
  int SWIG_arg = -1;
  love::TextBox *arg1 = (love::TextBox *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::TextBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__TextBox,0,1,"TextBox_getHeight");
  result = (int)(arg1)->getHeight();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextBox_getBorderSize(lua_State* L) {
  int SWIG_arg = -1;
  love::TextBox *arg1 = (love::TextBox *) 0 ;
  unsigned int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::TextBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__TextBox,0,1,"TextBox_getBorderSize");
  result = (unsigned int)(arg1)->getBorderSize();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextBox_getText(lua_State* L) {
  int SWIG_arg = -1;
  love::TextBox *arg1 = (love::TextBox *) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::TextBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__TextBox,0,1,"TextBox_getText");
  result = (char *)(arg1)->getText();
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextBox_getName(lua_State* L) {
  int SWIG_arg = -1;
  love::TextBox *arg1 = (love::TextBox *) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::TextBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__TextBox,0,1,"TextBox_getName");
  result = (char *)(arg1)->getName();
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextBox_getCaretColumn(lua_State* L) {
  int SWIG_arg = -1;
  love::TextBox *arg1 = (love::TextBox *) 0 ;
  unsigned int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::TextBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__TextBox,0,1,"TextBox_getCaretColumn");
  result = (unsigned int)((love::TextBox const *)arg1)->getCaretColumn();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextBox_getCaretPosition(lua_State* L) {
  int SWIG_arg = -1;
  love::TextBox *arg1 = (love::TextBox *) 0 ;
  unsigned int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::TextBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__TextBox,0,1,"TextBox_getCaretPosition");
  result = (unsigned int)((love::TextBox const *)arg1)->getCaretPosition();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextBox_getCaretRow(lua_State* L) {
  int SWIG_arg = -1;
  love::TextBox *arg1 = (love::TextBox *) 0 ;
  unsigned int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::TextBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__TextBox,0,1,"TextBox_getCaretRow");
  result = (unsigned int)((love::TextBox const *)arg1)->getCaretRow();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextBox_getNumberOfRows(lua_State* L) {
  int SWIG_arg = -1;
  love::TextBox *arg1 = (love::TextBox *) 0 ;
  unsigned int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::TextBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__TextBox,0,1,"TextBox_getNumberOfRows");
  result = (unsigned int)((love::TextBox const *)arg1)->getNumberOfRows();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextBox_getRow(lua_State* L) {
  int SWIG_arg = -1;
  love::TextBox *arg1 = (love::TextBox *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::TextBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__TextBox,0,1,"TextBox_getRow");
  arg2 = (int)lua_tonumber(L, 2);
  result = (char *)((love::TextBox const *)arg1)->getRow(arg2);
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextBox_isEditable(lua_State* L) {
  int SWIG_arg = -1;
  love::TextBox *arg1 = (love::TextBox *) 0 ;
  bool result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::TextBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__TextBox,0,1,"TextBox_isEditable");
  result = (bool)((love::TextBox const *)arg1)->isEditable();
  SWIG_arg=0;
  lua_pushboolean(L,(int)result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextBox_getBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  love::TextBox *arg1 = (love::TextBox *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::TextBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__TextBox,0,1,"TextBox_getBackgroundColor");
  result = (arg1)->getBackgroundColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextBox_getActiveColor(lua_State* L) {
  int SWIG_arg = -1;
  love::TextBox *arg1 = (love::TextBox *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::TextBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__TextBox,0,1,"TextBox_getActiveColor");
  result = (arg1)->getActiveColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextBox_getActiveBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  love::TextBox *arg1 = (love::TextBox *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::TextBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__TextBox,0,1,"TextBox_getActiveBackgroundColor");
  result = (arg1)->getActiveBackgroundColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextBox_adjustSize(lua_State* L) {
  int SWIG_arg = -1;
  love::TextBox *arg1 = (love::TextBox *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::TextBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__TextBox,0,1,"TextBox_adjustSize");
  (arg1)->adjustSize();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextBox_draw(lua_State* L) {
  int SWIG_arg = -1;
  love::TextBox *arg1 = (love::TextBox *) 0 ;
  gcn::Graphics *arg2 = (gcn::Graphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::TextBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__TextBox,0,1,"TextBox_draw");
  arg2=(gcn::Graphics *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Graphics,0,2,"TextBox_draw");
  (arg1)->draw(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextBox_drawBorder(lua_State* L) {
  int SWIG_arg = -1;
  love::TextBox *arg1 = (love::TextBox *) 0 ;
  gcn::Graphics *arg2 = (gcn::Graphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::TextBox *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__TextBox,0,1,"TextBox_drawBorder");
  arg2=(gcn::Graphics *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Graphics,0,2,"TextBox_drawBorder");
  (arg1)->drawBorder(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TextBox(void *obj) {
love::TextBox *arg1 = (love::TextBox *) obj;
delete arg1;
}
static swig_lua_method swig_love_TextBox_methods[] = {
    {"setSize", _wrap_TextBox_setSize}, 
    {"setWidth", _wrap_TextBox_setWidth}, 
    {"setHeight", _wrap_TextBox_setHeight}, 
    {"setBorderSize", _wrap_TextBox_setBorderSize}, 
    {"setText", _wrap_TextBox_setText}, 
    {"setName", _wrap_TextBox_setName}, 
    {"setCaretColumn", _wrap_TextBox_setCaretColumn}, 
    {"setCaretPosition", _wrap_TextBox_setCaretPosition}, 
    {"setCaretRow", _wrap_TextBox_setCaretRow}, 
    {"setCaretRowColumn", _wrap_TextBox_setCaretRowColumn}, 
    {"setEditable", _wrap_TextBox_setEditable}, 
    {"setTextRow", _wrap_TextBox_setTextRow}, 
    {"setBackgroundColor", _wrap_TextBox_setBackgroundColor}, 
    {"setActiveColor", _wrap_TextBox_setActiveColor}, 
    {"setActiveBackgroundColor", _wrap_TextBox_setActiveBackgroundColor}, 
    {"getWidth", _wrap_TextBox_getWidth}, 
    {"getHeight", _wrap_TextBox_getHeight}, 
    {"getBorderSize", _wrap_TextBox_getBorderSize}, 
    {"getText", _wrap_TextBox_getText}, 
    {"getName", _wrap_TextBox_getName}, 
    {"getCaretColumn", _wrap_TextBox_getCaretColumn}, 
    {"getCaretPosition", _wrap_TextBox_getCaretPosition}, 
    {"getCaretRow", _wrap_TextBox_getCaretRow}, 
    {"getNumberOfRows", _wrap_TextBox_getNumberOfRows}, 
    {"getRow", _wrap_TextBox_getRow}, 
    {"isEditable", _wrap_TextBox_isEditable}, 
    {"getBackgroundColor", _wrap_TextBox_getBackgroundColor}, 
    {"getActiveColor", _wrap_TextBox_getActiveColor}, 
    {"getActiveBackgroundColor", _wrap_TextBox_getActiveBackgroundColor}, 
    {"adjustSize", _wrap_TextBox_adjustSize}, 
    {"draw", _wrap_TextBox_draw}, 
    {"drawBorder", _wrap_TextBox_drawBorder}, 
    {0,0}
};
static swig_lua_attribute swig_love_TextBox_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_love_TextBox_bases[] = {&_wrap_class_love_GUIElement,0};
swig_lua_class _wrap_class_love_TextBox = { "TextBox", &SWIGTYPE_p_love__TextBox,_wrap_new_TextBox, swig_delete_TextBox, swig_love_TextBox_methods, swig_love_TextBox_attributes, swig_love_TextBox_bases };

static int _wrap_delete_AbstractMenu(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"delete_AbstractMenu");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_show(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_show");
  (arg1)->show();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_hide(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_hide");
  (arg1)->hide();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_setFont(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  love::pAbstractFont *arg2 = (love::pAbstractFont *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_setFont");
  arg2=(love::pAbstractFont *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractFont_t,0,2,"AbstractMenu_setFont");
  (arg1)->setFont((love::pAbstractFont const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_setColor(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_setColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"AbstractMenu_setColor");
  (arg1)->setColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_setBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_setBackgroundColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"AbstractMenu_setBackgroundColor");
  (arg1)->setBackgroundColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_setBackground(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  pAbstractImage *arg2 = (pAbstractImage *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_setBackground");
  arg2=(pAbstractImage *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_pAbstractImage,0,2,"AbstractMenu_setBackground");
  (arg1)->setBackground((pAbstractImage const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_setSpacing(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_setSpacing");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setSpacing(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_stretchContent(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  bool arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isboolean(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_stretchContent");
  arg2 = (bool)lua_toboolean(L, 2);
  (arg1)->stretchContent(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_align(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_align");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->align(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_valign(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_valign");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->valign(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_getFont(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  love::pAbstractFont result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_getFont");
  result = (arg1)->getFont();
  SWIG_arg=0;
  {
    love::pAbstractFont * resultptr;
    resultptr = new love::pAbstractFont((love::pAbstractFont &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractFont_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_getBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_getBackgroundColor");
  result = (arg1)->getBackgroundColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_getSpacing(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_getSpacing");
  result = (int)(arg1)->getSpacing();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_getMenuType(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_getMenuType");
  result = (int)((love::AbstractMenu const *)arg1)->getMenuType();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_setSize(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  int arg2 ;
  int arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_setSize");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->setSize(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_setWidth(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_setWidth");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setWidth(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_setHeight(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_setHeight");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setHeight(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_setBorderSize(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  unsigned int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_setBorderSize");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setBorderSize(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_setPosition(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  int arg2 ;
  int arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_setPosition");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->setPosition(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_setX(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_setX");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setX(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_setY(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_setY");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setY(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_getWidth(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_getWidth");
  result = (int)(arg1)->getWidth();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_getHeight(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_getHeight");
  result = (int)(arg1)->getHeight();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_getX(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_getX");
  result = (int)(arg1)->getX();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_getY(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_getY");
  result = (int)(arg1)->getY();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_getBorderSize(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  unsigned int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_getBorderSize");
  result = (unsigned int)(arg1)->getBorderSize();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_adjustSize(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_adjustSize");
  (arg1)->adjustSize();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_adjustWidth(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_adjustWidth");
  (arg1)->adjustWidth();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_adjustHeight(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_adjustHeight");
  (arg1)->adjustHeight();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_adjustContent(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_adjustContent");
  result = (int)(arg1)->adjustContent();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_draw(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  gcn::Graphics *arg2 = (gcn::Graphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_draw");
  arg2=(gcn::Graphics *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Graphics,0,2,"AbstractMenu_draw");
  (arg1)->draw(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_drawBorder(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  gcn::Graphics *arg2 = (gcn::Graphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_drawBorder");
  arg2=(gcn::Graphics *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Graphics,0,2,"AbstractMenu_drawBorder");
  (arg1)->drawBorder(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_drawChildren(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  gcn::Graphics *arg2 = (gcn::Graphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_drawChildren");
  arg2=(gcn::Graphics *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Graphics,0,2,"AbstractMenu_drawChildren");
  (arg1)->drawChildren(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_add(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  gcn::Widget *arg2 = (gcn::Widget *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_add");
  arg2=(gcn::Widget *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Widget,0,2,"AbstractMenu_add");
  (arg1)->add(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_setCaption(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_setCaption");
  arg2 = (char*)lua_tostring(L, 2);
  (arg1)->setCaption((char const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_setTitleBarHeight(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  unsigned int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_setTitleBarHeight");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setTitleBarHeight(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_getCaption(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_getCaption");
  result = (char *)(arg1)->getCaption();
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_getTitleBarHeight(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  unsigned int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_getTitleBarHeight");
  result = (unsigned int)(arg1)->getTitleBarHeight();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_addMenu__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  boost::shared_ptr<love::AbstractMenu > result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_addMenu");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (arg1)->addMenu(arg2,arg3,arg4);
  SWIG_arg=0;
  {
    boost::shared_ptr<love::AbstractMenu > * resultptr;
    resultptr = new boost::shared_ptr<love::AbstractMenu >((boost::shared_ptr<love::AbstractMenu > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_addMenu__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  int arg2 ;
  int arg3 ;
  boost::shared_ptr<love::AbstractMenu > result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_addMenu");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (arg1)->addMenu(arg2,arg3);
  SWIG_arg=0;
  {
    boost::shared_ptr<love::AbstractMenu > * resultptr;
    resultptr = new boost::shared_ptr<love::AbstractMenu >((boost::shared_ptr<love::AbstractMenu > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_addMenu__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  int arg2 ;
  boost::shared_ptr<love::AbstractMenu > result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_addMenu");
  arg2 = (int)lua_tonumber(L, 2);
  result = (arg1)->addMenu(arg2);
  SWIG_arg=0;
  {
    boost::shared_ptr<love::AbstractMenu > * resultptr;
    resultptr = new boost::shared_ptr<love::AbstractMenu >((boost::shared_ptr<love::AbstractMenu > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_addMenu(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractMenu, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AbstractMenu_addMenu__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractMenu, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_AbstractMenu_addMenu__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractMenu, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_AbstractMenu_addMenu__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'AbstractMenu_addMenu'");
  lua_error(L);return 0;
}


static int _wrap_AbstractMenu_addScrollMenu__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  boost::shared_ptr<love::AbstractMenu > result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_addScrollMenu");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (arg1)->addScrollMenu(arg2,arg3,arg4);
  SWIG_arg=0;
  {
    boost::shared_ptr<love::AbstractMenu > * resultptr;
    resultptr = new boost::shared_ptr<love::AbstractMenu >((boost::shared_ptr<love::AbstractMenu > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_addScrollMenu__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  int arg2 ;
  int arg3 ;
  boost::shared_ptr<love::AbstractMenu > result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_addScrollMenu");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (arg1)->addScrollMenu(arg2,arg3);
  SWIG_arg=0;
  {
    boost::shared_ptr<love::AbstractMenu > * resultptr;
    resultptr = new boost::shared_ptr<love::AbstractMenu >((boost::shared_ptr<love::AbstractMenu > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_addScrollMenu__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  int arg2 ;
  boost::shared_ptr<love::AbstractMenu > result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_addScrollMenu");
  arg2 = (int)lua_tonumber(L, 2);
  result = (arg1)->addScrollMenu(arg2);
  SWIG_arg=0;
  {
    boost::shared_ptr<love::AbstractMenu > * resultptr;
    resultptr = new boost::shared_ptr<love::AbstractMenu >((boost::shared_ptr<love::AbstractMenu > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_addScrollMenu(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractMenu, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AbstractMenu_addScrollMenu__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractMenu, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_AbstractMenu_addScrollMenu__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractMenu, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_AbstractMenu_addScrollMenu__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'AbstractMenu_addScrollMenu'");
  lua_error(L);return 0;
}


static int _wrap_AbstractMenu_addWindowMenu__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int arg5 ;
  boost::shared_ptr<love::AbstractMenu > result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isstring(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_addWindowMenu");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char*)lua_tostring(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  result = (arg1)->addWindowMenu(arg2,(char const *)arg3,arg4,arg5);
  SWIG_arg=0;
  {
    boost::shared_ptr<love::AbstractMenu > * resultptr;
    resultptr = new boost::shared_ptr<love::AbstractMenu >((boost::shared_ptr<love::AbstractMenu > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_addWindowMenu__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  boost::shared_ptr<love::AbstractMenu > result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isstring(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_addWindowMenu");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char*)lua_tostring(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (arg1)->addWindowMenu(arg2,(char const *)arg3,arg4);
  SWIG_arg=0;
  {
    boost::shared_ptr<love::AbstractMenu > * resultptr;
    resultptr = new boost::shared_ptr<love::AbstractMenu >((boost::shared_ptr<love::AbstractMenu > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_addWindowMenu__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  boost::shared_ptr<love::AbstractMenu > result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isstring(L,3)) SWIG_fail_arg(3);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_addWindowMenu");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char*)lua_tostring(L, 3);
  result = (arg1)->addWindowMenu(arg2,(char const *)arg3);
  SWIG_arg=0;
  {
    boost::shared_ptr<love::AbstractMenu > * resultptr;
    resultptr = new boost::shared_ptr<love::AbstractMenu >((boost::shared_ptr<love::AbstractMenu > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_addWindowMenu__SWIG_3(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  int arg2 ;
  boost::shared_ptr<love::AbstractMenu > result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_addWindowMenu");
  arg2 = (int)lua_tonumber(L, 2);
  result = (arg1)->addWindowMenu(arg2);
  SWIG_arg=0;
  {
    boost::shared_ptr<love::AbstractMenu > * resultptr;
    resultptr = new boost::shared_ptr<love::AbstractMenu >((boost::shared_ptr<love::AbstractMenu > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_addWindowMenu(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractMenu, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AbstractMenu_addWindowMenu__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractMenu, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_AbstractMenu_addWindowMenu__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractMenu, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_AbstractMenu_addWindowMenu__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractMenu, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_AbstractMenu_addWindowMenu__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'AbstractMenu_addWindowMenu'");
  lua_error(L);return 0;
}


static int _wrap_AbstractMenu_addLabel__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  love::pLabel result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_addLabel");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (arg1)->addLabel((char const *)arg2,arg3,arg4);
  SWIG_arg=0;
  {
    love::pLabel * resultptr;
    resultptr = new love::pLabel((love::pLabel &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__Label_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_addLabel__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  love::pLabel result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_addLabel");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (arg1)->addLabel((char const *)arg2,arg3);
  SWIG_arg=0;
  {
    love::pLabel * resultptr;
    resultptr = new love::pLabel((love::pLabel &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__Label_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_addLabel__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  char *arg2 = (char *) 0 ;
  love::pLabel result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_addLabel");
  arg2 = (char*)lua_tostring(L, 2);
  result = (arg1)->addLabel((char const *)arg2);
  SWIG_arg=0;
  {
    love::pLabel * resultptr;
    resultptr = new love::pLabel((love::pLabel &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__Label_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_addLabel(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractMenu, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_AbstractMenu_addLabel__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractMenu, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_AbstractMenu_addLabel__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractMenu, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_AbstractMenu_addLabel__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'AbstractMenu_addLabel'");
  lua_error(L);return 0;
}


static int _wrap_AbstractMenu_addMultilineLabel__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  love::pMultilineLabel result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_addMultilineLabel");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (arg1)->addMultilineLabel((char const *)arg2,arg3,arg4);
  SWIG_arg=0;
  {
    love::pMultilineLabel * resultptr;
    resultptr = new love::pMultilineLabel((love::pMultilineLabel &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__MultilineLabel_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_addMultilineLabel__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  love::pMultilineLabel result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_addMultilineLabel");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (arg1)->addMultilineLabel((char const *)arg2,arg3);
  SWIG_arg=0;
  {
    love::pMultilineLabel * resultptr;
    resultptr = new love::pMultilineLabel((love::pMultilineLabel &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__MultilineLabel_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_addMultilineLabel__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  char *arg2 = (char *) 0 ;
  love::pMultilineLabel result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_addMultilineLabel");
  arg2 = (char*)lua_tostring(L, 2);
  result = (arg1)->addMultilineLabel((char const *)arg2);
  SWIG_arg=0;
  {
    love::pMultilineLabel * resultptr;
    resultptr = new love::pMultilineLabel((love::pMultilineLabel &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__MultilineLabel_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_addMultilineLabel(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractMenu, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_AbstractMenu_addMultilineLabel__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractMenu, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_AbstractMenu_addMultilineLabel__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractMenu, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_AbstractMenu_addMultilineLabel__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'AbstractMenu_addMultilineLabel'");
  lua_error(L);return 0;
}


static int _wrap_AbstractMenu_addImage(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  pAbstractImage *arg2 = (pAbstractImage *) 0 ;
  love::pLabel result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_addImage");
  arg2=(pAbstractImage *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_pAbstractImage,0,2,"AbstractMenu_addImage");
  result = (arg1)->addImage((pAbstractImage const *)arg2);
  SWIG_arg=0;
  {
    love::pLabel * resultptr;
    resultptr = new love::pLabel((love::pLabel &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__Label_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_addButton__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int arg5 ;
  love::pButton result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isstring(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_addButton");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (char*)lua_tostring(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  result = (arg1)->addButton((char const *)arg2,(char const *)arg3,arg4,arg5);
  SWIG_arg=0;
  {
    love::pButton * resultptr;
    resultptr = new love::pButton((love::pButton &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__Button_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_addButton__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  love::pButton result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isstring(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_addButton");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (char*)lua_tostring(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (arg1)->addButton((char const *)arg2,(char const *)arg3,arg4);
  SWIG_arg=0;
  {
    love::pButton * resultptr;
    resultptr = new love::pButton((love::pButton &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__Button_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_addButton__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  love::pButton result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isstring(L,3)) SWIG_fail_arg(3);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_addButton");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (char*)lua_tostring(L, 3);
  result = (arg1)->addButton((char const *)arg2,(char const *)arg3);
  SWIG_arg=0;
  {
    love::pButton * resultptr;
    resultptr = new love::pButton((love::pButton &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__Button_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_addButton(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractMenu, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_AbstractMenu_addButton__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractMenu, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_AbstractMenu_addButton__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractMenu, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_AbstractMenu_addButton__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'AbstractMenu_addButton'");
  lua_error(L);return 0;
}


static int _wrap_AbstractMenu_addTextField__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int arg5 ;
  love::pTextField result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isstring(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_addTextField");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (char*)lua_tostring(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  result = (arg1)->addTextField((char const *)arg2,(char const *)arg3,arg4,arg5);
  SWIG_arg=0;
  {
    love::pTextField * resultptr;
    resultptr = new love::pTextField((love::pTextField &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__TextField_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_addTextField__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  love::pTextField result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isstring(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_addTextField");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (char*)lua_tostring(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (arg1)->addTextField((char const *)arg2,(char const *)arg3,arg4);
  SWIG_arg=0;
  {
    love::pTextField * resultptr;
    resultptr = new love::pTextField((love::pTextField &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__TextField_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_addTextField__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  love::pTextField result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isstring(L,3)) SWIG_fail_arg(3);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_addTextField");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (char*)lua_tostring(L, 3);
  result = (arg1)->addTextField((char const *)arg2,(char const *)arg3);
  SWIG_arg=0;
  {
    love::pTextField * resultptr;
    resultptr = new love::pTextField((love::pTextField &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__TextField_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_addTextField__SWIG_3(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  char *arg2 = (char *) 0 ;
  love::pTextField result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_addTextField");
  arg2 = (char*)lua_tostring(L, 2);
  result = (arg1)->addTextField((char const *)arg2);
  SWIG_arg=0;
  {
    love::pTextField * resultptr;
    resultptr = new love::pTextField((love::pTextField &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__TextField_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_addTextField(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractMenu, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_AbstractMenu_addTextField__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractMenu, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_AbstractMenu_addTextField__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractMenu, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_AbstractMenu_addTextField__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractMenu, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_AbstractMenu_addTextField__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'AbstractMenu_addTextField'");
  lua_error(L);return 0;
}


static int _wrap_AbstractMenu_addDropDown__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  love::pDropDown result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_addDropDown");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (arg1)->addDropDown((char const *)arg2,arg3,arg4);
  SWIG_arg=0;
  {
    love::pDropDown * resultptr;
    resultptr = new love::pDropDown((love::pDropDown &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__DropDown_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_addDropDown__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  love::pDropDown result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_addDropDown");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (arg1)->addDropDown((char const *)arg2,arg3);
  SWIG_arg=0;
  {
    love::pDropDown * resultptr;
    resultptr = new love::pDropDown((love::pDropDown &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__DropDown_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_addDropDown__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  char *arg2 = (char *) 0 ;
  love::pDropDown result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_addDropDown");
  arg2 = (char*)lua_tostring(L, 2);
  result = (arg1)->addDropDown((char const *)arg2);
  SWIG_arg=0;
  {
    love::pDropDown * resultptr;
    resultptr = new love::pDropDown((love::pDropDown &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__DropDown_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_addDropDown(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractMenu, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_AbstractMenu_addDropDown__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractMenu, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_AbstractMenu_addDropDown__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractMenu, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_AbstractMenu_addDropDown__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'AbstractMenu_addDropDown'");
  lua_error(L);return 0;
}


static int _wrap_AbstractMenu_addRadioButton__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int arg5 ;
  love::pRadioButton result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isstring(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_addRadioButton");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (char*)lua_tostring(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  result = (arg1)->addRadioButton((char const *)arg2,(char const *)arg3,arg4,arg5);
  SWIG_arg=0;
  {
    love::pRadioButton * resultptr;
    resultptr = new love::pRadioButton((love::pRadioButton &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__RadioButton_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_addRadioButton__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  love::pRadioButton result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isstring(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_addRadioButton");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (char*)lua_tostring(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (arg1)->addRadioButton((char const *)arg2,(char const *)arg3,arg4);
  SWIG_arg=0;
  {
    love::pRadioButton * resultptr;
    resultptr = new love::pRadioButton((love::pRadioButton &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__RadioButton_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_addRadioButton__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  love::pRadioButton result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isstring(L,3)) SWIG_fail_arg(3);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_addRadioButton");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (char*)lua_tostring(L, 3);
  result = (arg1)->addRadioButton((char const *)arg2,(char const *)arg3);
  SWIG_arg=0;
  {
    love::pRadioButton * resultptr;
    resultptr = new love::pRadioButton((love::pRadioButton &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__RadioButton_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_addRadioButton__SWIG_3(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  char *arg2 = (char *) 0 ;
  love::pRadioButton result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_addRadioButton");
  arg2 = (char*)lua_tostring(L, 2);
  result = (arg1)->addRadioButton((char const *)arg2);
  SWIG_arg=0;
  {
    love::pRadioButton * resultptr;
    resultptr = new love::pRadioButton((love::pRadioButton &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__RadioButton_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_addRadioButton(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractMenu, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_AbstractMenu_addRadioButton__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractMenu, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_AbstractMenu_addRadioButton__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractMenu, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_AbstractMenu_addRadioButton__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractMenu, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_AbstractMenu_addRadioButton__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'AbstractMenu_addRadioButton'");
  lua_error(L);return 0;
}


static int _wrap_AbstractMenu_addCheckBox__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int arg5 ;
  love::pCheckBox result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isstring(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_addCheckBox");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (char*)lua_tostring(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  result = (arg1)->addCheckBox((char const *)arg2,(char const *)arg3,arg4,arg5);
  SWIG_arg=0;
  {
    love::pCheckBox * resultptr;
    resultptr = new love::pCheckBox((love::pCheckBox &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__CheckBox_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_addCheckBox__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  love::pCheckBox result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isstring(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_addCheckBox");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (char*)lua_tostring(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (arg1)->addCheckBox((char const *)arg2,(char const *)arg3,arg4);
  SWIG_arg=0;
  {
    love::pCheckBox * resultptr;
    resultptr = new love::pCheckBox((love::pCheckBox &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__CheckBox_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_addCheckBox__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  love::pCheckBox result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isstring(L,3)) SWIG_fail_arg(3);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_addCheckBox");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (char*)lua_tostring(L, 3);
  result = (arg1)->addCheckBox((char const *)arg2,(char const *)arg3);
  SWIG_arg=0;
  {
    love::pCheckBox * resultptr;
    resultptr = new love::pCheckBox((love::pCheckBox &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__CheckBox_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_addCheckBox__SWIG_3(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  char *arg2 = (char *) 0 ;
  love::pCheckBox result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_addCheckBox");
  arg2 = (char*)lua_tostring(L, 2);
  result = (arg1)->addCheckBox((char const *)arg2);
  SWIG_arg=0;
  {
    love::pCheckBox * resultptr;
    resultptr = new love::pCheckBox((love::pCheckBox &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__CheckBox_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_addCheckBox(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractMenu, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_AbstractMenu_addCheckBox__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractMenu, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_AbstractMenu_addCheckBox__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractMenu, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_AbstractMenu_addCheckBox__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractMenu, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_AbstractMenu_addCheckBox__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'AbstractMenu_addCheckBox'");
  lua_error(L);return 0;
}


static int _wrap_AbstractMenu_addSlider__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  double arg4 ;
  double arg5 ;
  int arg6 ;
  int arg7 ;
  love::pSlider result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  if(!lua_isnumber(L,6)) SWIG_fail_arg(6);
  if(!lua_isnumber(L,7)) SWIG_fail_arg(7);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_addSlider");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (unsigned int)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (double)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  arg7 = (int)lua_tonumber(L, 7);
  result = (arg1)->addSlider((char const *)arg2,arg3,arg4,arg5,arg6,arg7);
  SWIG_arg=0;
  {
    love::pSlider * resultptr;
    resultptr = new love::pSlider((love::pSlider &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__Slider_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_addSlider__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  double arg4 ;
  double arg5 ;
  int arg6 ;
  love::pSlider result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  if(!lua_isnumber(L,6)) SWIG_fail_arg(6);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_addSlider");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (unsigned int)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (double)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  result = (arg1)->addSlider((char const *)arg2,arg3,arg4,arg5,arg6);
  SWIG_arg=0;
  {
    love::pSlider * resultptr;
    resultptr = new love::pSlider((love::pSlider &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__Slider_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_addSlider__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  double arg4 ;
  double arg5 ;
  love::pSlider result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_addSlider");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (unsigned int)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (double)lua_tonumber(L, 5);
  result = (arg1)->addSlider((char const *)arg2,arg3,arg4,arg5);
  SWIG_arg=0;
  {
    love::pSlider * resultptr;
    resultptr = new love::pSlider((love::pSlider &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__Slider_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_addSlider__SWIG_3(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  double arg4 ;
  love::pSlider result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_addSlider");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (unsigned int)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = (arg1)->addSlider((char const *)arg2,arg3,arg4);
  SWIG_arg=0;
  {
    love::pSlider * resultptr;
    resultptr = new love::pSlider((love::pSlider &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__Slider_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_addSlider__SWIG_4(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  love::pSlider result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_addSlider");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (arg1)->addSlider((char const *)arg2,arg3);
  SWIG_arg=0;
  {
    love::pSlider * resultptr;
    resultptr = new love::pSlider((love::pSlider &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__Slider_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_addSlider__SWIG_5(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  char *arg2 = (char *) 0 ;
  love::pSlider result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_addSlider");
  arg2 = (char*)lua_tostring(L, 2);
  result = (arg1)->addSlider((char const *)arg2);
  SWIG_arg=0;
  {
    love::pSlider * resultptr;
    resultptr = new love::pSlider((love::pSlider &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__Slider_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_addSlider(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractMenu, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_AbstractMenu_addSlider__SWIG_5(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractMenu, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_AbstractMenu_addSlider__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractMenu, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_AbstractMenu_addSlider__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractMenu, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_AbstractMenu_addSlider__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractMenu, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_AbstractMenu_addSlider__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractMenu, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_AbstractMenu_addSlider__SWIG_0(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'AbstractMenu_addSlider'");
  lua_error(L);return 0;
}


static int _wrap_AbstractMenu_addListBox__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  love::pListBox result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_addListBox");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (arg1)->addListBox((char const *)arg2,arg3,arg4);
  SWIG_arg=0;
  {
    love::pListBox * resultptr;
    resultptr = new love::pListBox((love::pListBox &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__ListBox_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_addListBox__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  love::pListBox result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_addListBox");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (arg1)->addListBox((char const *)arg2,arg3);
  SWIG_arg=0;
  {
    love::pListBox * resultptr;
    resultptr = new love::pListBox((love::pListBox &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__ListBox_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_addListBox__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  char *arg2 = (char *) 0 ;
  love::pListBox result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_addListBox");
  arg2 = (char*)lua_tostring(L, 2);
  result = (arg1)->addListBox((char const *)arg2);
  SWIG_arg=0;
  {
    love::pListBox * resultptr;
    resultptr = new love::pListBox((love::pListBox &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__ListBox_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_addListBox(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractMenu, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_AbstractMenu_addListBox__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractMenu, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_AbstractMenu_addListBox__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractMenu, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_AbstractMenu_addListBox__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'AbstractMenu_addListBox'");
  lua_error(L);return 0;
}


static int _wrap_AbstractMenu_addTextBox__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  love::pTextBox result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_addTextBox");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (arg1)->addTextBox((char const *)arg2,arg3,arg4);
  SWIG_arg=0;
  {
    love::pTextBox * resultptr;
    resultptr = new love::pTextBox((love::pTextBox &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__TextBox_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_addTextBox__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  love::pTextBox result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_addTextBox");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (arg1)->addTextBox((char const *)arg2,arg3);
  SWIG_arg=0;
  {
    love::pTextBox * resultptr;
    resultptr = new love::pTextBox((love::pTextBox &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__TextBox_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_addTextBox__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMenu *arg1 = (love::AbstractMenu *) 0 ;
  char *arg2 = (char *) 0 ;
  love::pTextBox result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractMenu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMenu,0,1,"AbstractMenu_addTextBox");
  arg2 = (char*)lua_tostring(L, 2);
  result = (arg1)->addTextBox((char const *)arg2);
  SWIG_arg=0;
  {
    love::pTextBox * resultptr;
    resultptr = new love::pTextBox((love::pTextBox &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__TextBox_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractMenu_addTextBox(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractMenu, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_AbstractMenu_addTextBox__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractMenu, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_AbstractMenu_addTextBox__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractMenu, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_AbstractMenu_addTextBox__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'AbstractMenu_addTextBox'");
  lua_error(L);return 0;
}


static void swig_delete_AbstractMenu(void *obj) {
love::AbstractMenu *arg1 = (love::AbstractMenu *) obj;
delete arg1;
}
static swig_lua_method swig_love_AbstractMenu_methods[] = {
    {"show", _wrap_AbstractMenu_show}, 
    {"hide", _wrap_AbstractMenu_hide}, 
    {"setFont", _wrap_AbstractMenu_setFont}, 
    {"setColor", _wrap_AbstractMenu_setColor}, 
    {"setBackgroundColor", _wrap_AbstractMenu_setBackgroundColor}, 
    {"setBackground", _wrap_AbstractMenu_setBackground}, 
    {"setSpacing", _wrap_AbstractMenu_setSpacing}, 
    {"stretchContent", _wrap_AbstractMenu_stretchContent}, 
    {"align", _wrap_AbstractMenu_align}, 
    {"valign", _wrap_AbstractMenu_valign}, 
    {"getFont", _wrap_AbstractMenu_getFont}, 
    {"getBackgroundColor", _wrap_AbstractMenu_getBackgroundColor}, 
    {"getSpacing", _wrap_AbstractMenu_getSpacing}, 
    {"getMenuType", _wrap_AbstractMenu_getMenuType}, 
    {"setSize", _wrap_AbstractMenu_setSize}, 
    {"setWidth", _wrap_AbstractMenu_setWidth}, 
    {"setHeight", _wrap_AbstractMenu_setHeight}, 
    {"setBorderSize", _wrap_AbstractMenu_setBorderSize}, 
    {"setPosition", _wrap_AbstractMenu_setPosition}, 
    {"setX", _wrap_AbstractMenu_setX}, 
    {"setY", _wrap_AbstractMenu_setY}, 
    {"getWidth", _wrap_AbstractMenu_getWidth}, 
    {"getHeight", _wrap_AbstractMenu_getHeight}, 
    {"getX", _wrap_AbstractMenu_getX}, 
    {"getY", _wrap_AbstractMenu_getY}, 
    {"getBorderSize", _wrap_AbstractMenu_getBorderSize}, 
    {"adjustSize", _wrap_AbstractMenu_adjustSize}, 
    {"adjustWidth", _wrap_AbstractMenu_adjustWidth}, 
    {"adjustHeight", _wrap_AbstractMenu_adjustHeight}, 
    {"adjustContent", _wrap_AbstractMenu_adjustContent}, 
    {"draw", _wrap_AbstractMenu_draw}, 
    {"drawBorder", _wrap_AbstractMenu_drawBorder}, 
    {"drawChildren", _wrap_AbstractMenu_drawChildren}, 
    {"add", _wrap_AbstractMenu_add}, 
    {"setCaption", _wrap_AbstractMenu_setCaption}, 
    {"setTitleBarHeight", _wrap_AbstractMenu_setTitleBarHeight}, 
    {"getCaption", _wrap_AbstractMenu_getCaption}, 
    {"getTitleBarHeight", _wrap_AbstractMenu_getTitleBarHeight}, 
    {"addMenu", _wrap_AbstractMenu_addMenu}, 
    {"addScrollMenu", _wrap_AbstractMenu_addScrollMenu}, 
    {"addWindowMenu", _wrap_AbstractMenu_addWindowMenu}, 
    {"addLabel", _wrap_AbstractMenu_addLabel}, 
    {"addMultilineLabel", _wrap_AbstractMenu_addMultilineLabel}, 
    {"addImage", _wrap_AbstractMenu_addImage}, 
    {"addButton", _wrap_AbstractMenu_addButton}, 
    {"addTextField", _wrap_AbstractMenu_addTextField}, 
    {"addDropDown", _wrap_AbstractMenu_addDropDown}, 
    {"addRadioButton", _wrap_AbstractMenu_addRadioButton}, 
    {"addCheckBox", _wrap_AbstractMenu_addCheckBox}, 
    {"addSlider", _wrap_AbstractMenu_addSlider}, 
    {"addListBox", _wrap_AbstractMenu_addListBox}, 
    {"addTextBox", _wrap_AbstractMenu_addTextBox}, 
    {0,0}
};
static swig_lua_attribute swig_love_AbstractMenu_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_love_AbstractMenu_bases[] = {&_wrap_class_love_GUIElement,&_wrap_class_love_Padded,0};
swig_lua_class _wrap_class_love_AbstractMenu = { "AbstractMenu", &SWIGTYPE_p_love__AbstractMenu,0, swig_delete_AbstractMenu, swig_love_AbstractMenu_methods, swig_love_AbstractMenu_attributes, swig_love_AbstractMenu_bases };

static int _wrap_new_Menu__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::pAbstractFont arg1 ;
  love::pAbstractColor arg2 ;
  int arg3 ;
  love::Menu *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  {
    love::pAbstractFont * argp;
    if(SWIG_ConvertPtr(L,1,(void**)(&argp),SWIGTYPE_p_boost__shared_ptrTlove__AbstractFont_t,0)) SWIG_fail;
    arg1 = *argp;
  }
  {
    love::pAbstractColor * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0)) SWIG_fail;
    arg2 = *argp;
  }
  arg3 = (int)lua_tonumber(L, 3);
  result = (love::Menu *)new love::Menu(arg1,arg2,arg3);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__Menu,1); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Menu__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::pAbstractFont arg1 ;
  love::pAbstractColor arg2 ;
  love::Menu *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  {
    love::pAbstractFont * argp;
    if(SWIG_ConvertPtr(L,1,(void**)(&argp),SWIGTYPE_p_boost__shared_ptrTlove__AbstractFont_t,0)) SWIG_fail;
    arg1 = *argp;
  }
  {
    love::pAbstractColor * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0)) SWIG_fail;
    arg2 = *argp;
  }
  result = (love::Menu *)new love::Menu(arg1,arg2);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__Menu,1); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Menu(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_boost__shared_ptrTlove__AbstractFont_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_boost__shared_ptrTlove__AbstractColor_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_Menu__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_boost__shared_ptrTlove__AbstractFont_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_boost__shared_ptrTlove__AbstractColor_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Menu__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'new_Menu'");
  lua_error(L);return 0;
}


static int _wrap_delete_Menu(lua_State* L) {
  int SWIG_arg = -1;
  love::Menu *arg1 = (love::Menu *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Menu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Menu,0,1,"delete_Menu");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Menu_setSize(lua_State* L) {
  int SWIG_arg = -1;
  love::Menu *arg1 = (love::Menu *) 0 ;
  int arg2 ;
  int arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::Menu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Menu,0,1,"Menu_setSize");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->setSize(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Menu_setWidth(lua_State* L) {
  int SWIG_arg = -1;
  love::Menu *arg1 = (love::Menu *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Menu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Menu,0,1,"Menu_setWidth");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setWidth(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Menu_setHeight(lua_State* L) {
  int SWIG_arg = -1;
  love::Menu *arg1 = (love::Menu *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Menu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Menu,0,1,"Menu_setHeight");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setHeight(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Menu_setBorderSize(lua_State* L) {
  int SWIG_arg = -1;
  love::Menu *arg1 = (love::Menu *) 0 ;
  unsigned int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Menu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Menu,0,1,"Menu_setBorderSize");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setBorderSize(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Menu_setPosition(lua_State* L) {
  int SWIG_arg = -1;
  love::Menu *arg1 = (love::Menu *) 0 ;
  int arg2 ;
  int arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::Menu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Menu,0,1,"Menu_setPosition");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->setPosition(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Menu_setX(lua_State* L) {
  int SWIG_arg = -1;
  love::Menu *arg1 = (love::Menu *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Menu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Menu,0,1,"Menu_setX");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setX(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Menu_setY(lua_State* L) {
  int SWIG_arg = -1;
  love::Menu *arg1 = (love::Menu *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Menu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Menu,0,1,"Menu_setY");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setY(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Menu_setFont(lua_State* L) {
  int SWIG_arg = -1;
  love::Menu *arg1 = (love::Menu *) 0 ;
  love::pAbstractFont *arg2 = (love::pAbstractFont *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::Menu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Menu,0,1,"Menu_setFont");
  arg2=(love::pAbstractFont *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractFont_t,0,2,"Menu_setFont");
  (arg1)->setFont((love::pAbstractFont const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Menu_setBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  love::Menu *arg1 = (love::Menu *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::Menu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Menu,0,1,"Menu_setBackgroundColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"Menu_setBackgroundColor");
  (arg1)->setBackgroundColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Menu_getWidth(lua_State* L) {
  int SWIG_arg = -1;
  love::Menu *arg1 = (love::Menu *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Menu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Menu,0,1,"Menu_getWidth");
  result = (int)(arg1)->getWidth();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Menu_getHeight(lua_State* L) {
  int SWIG_arg = -1;
  love::Menu *arg1 = (love::Menu *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Menu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Menu,0,1,"Menu_getHeight");
  result = (int)(arg1)->getHeight();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Menu_getX(lua_State* L) {
  int SWIG_arg = -1;
  love::Menu *arg1 = (love::Menu *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Menu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Menu,0,1,"Menu_getX");
  result = (int)(arg1)->getX();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Menu_getY(lua_State* L) {
  int SWIG_arg = -1;
  love::Menu *arg1 = (love::Menu *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Menu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Menu,0,1,"Menu_getY");
  result = (int)(arg1)->getY();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Menu_getBorderSize(lua_State* L) {
  int SWIG_arg = -1;
  love::Menu *arg1 = (love::Menu *) 0 ;
  unsigned int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Menu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Menu,0,1,"Menu_getBorderSize");
  result = (unsigned int)(arg1)->getBorderSize();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Menu_getFont(lua_State* L) {
  int SWIG_arg = -1;
  love::Menu *arg1 = (love::Menu *) 0 ;
  love::pAbstractFont result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Menu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Menu,0,1,"Menu_getFont");
  result = (arg1)->getFont();
  SWIG_arg=0;
  {
    love::pAbstractFont * resultptr;
    resultptr = new love::pAbstractFont((love::pAbstractFont &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractFont_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Menu_getBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  love::Menu *arg1 = (love::Menu *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Menu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Menu,0,1,"Menu_getBackgroundColor");
  result = (arg1)->getBackgroundColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Menu_adjustSize(lua_State* L) {
  int SWIG_arg = -1;
  love::Menu *arg1 = (love::Menu *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Menu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Menu,0,1,"Menu_adjustSize");
  (arg1)->adjustSize();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Menu_adjustWidth(lua_State* L) {
  int SWIG_arg = -1;
  love::Menu *arg1 = (love::Menu *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Menu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Menu,0,1,"Menu_adjustWidth");
  (arg1)->adjustWidth();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Menu_adjustHeight(lua_State* L) {
  int SWIG_arg = -1;
  love::Menu *arg1 = (love::Menu *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Menu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Menu,0,1,"Menu_adjustHeight");
  (arg1)->adjustHeight();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Menu_adjustContent(lua_State* L) {
  int SWIG_arg = -1;
  love::Menu *arg1 = (love::Menu *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Menu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Menu,0,1,"Menu_adjustContent");
  result = (int)(arg1)->adjustContent();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Menu_draw(lua_State* L) {
  int SWIG_arg = -1;
  love::Menu *arg1 = (love::Menu *) 0 ;
  gcn::Graphics *arg2 = (gcn::Graphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::Menu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Menu,0,1,"Menu_draw");
  arg2=(gcn::Graphics *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Graphics,0,2,"Menu_draw");
  (arg1)->draw(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Menu_drawBorder(lua_State* L) {
  int SWIG_arg = -1;
  love::Menu *arg1 = (love::Menu *) 0 ;
  gcn::Graphics *arg2 = (gcn::Graphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::Menu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Menu,0,1,"Menu_drawBorder");
  arg2=(gcn::Graphics *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Graphics,0,2,"Menu_drawBorder");
  (arg1)->drawBorder(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Menu_drawChildren(lua_State* L) {
  int SWIG_arg = -1;
  love::Menu *arg1 = (love::Menu *) 0 ;
  gcn::Graphics *arg2 = (gcn::Graphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::Menu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Menu,0,1,"Menu_drawChildren");
  arg2=(gcn::Graphics *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Graphics,0,2,"Menu_drawChildren");
  (arg1)->drawChildren(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Menu_add(lua_State* L) {
  int SWIG_arg = -1;
  love::Menu *arg1 = (love::Menu *) 0 ;
  gcn::Widget *arg2 = (gcn::Widget *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::Menu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Menu,0,1,"Menu_add");
  arg2=(gcn::Widget *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Widget,0,2,"Menu_add");
  (arg1)->add(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Menu_setCaption(lua_State* L) {
  int SWIG_arg = -1;
  love::Menu *arg1 = (love::Menu *) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(love::Menu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Menu,0,1,"Menu_setCaption");
  arg2 = (char*)lua_tostring(L, 2);
  (arg1)->setCaption((char const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Menu_setTitleBarHeight(lua_State* L) {
  int SWIG_arg = -1;
  love::Menu *arg1 = (love::Menu *) 0 ;
  unsigned int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Menu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Menu,0,1,"Menu_setTitleBarHeight");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setTitleBarHeight(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Menu_getCaption(lua_State* L) {
  int SWIG_arg = -1;
  love::Menu *arg1 = (love::Menu *) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Menu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Menu,0,1,"Menu_getCaption");
  result = (char *)(arg1)->getCaption();
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Menu_getTitleBarHeight(lua_State* L) {
  int SWIG_arg = -1;
  love::Menu *arg1 = (love::Menu *) 0 ;
  unsigned int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Menu *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Menu,0,1,"Menu_getTitleBarHeight");
  result = (unsigned int)(arg1)->getTitleBarHeight();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Menu(void *obj) {
love::Menu *arg1 = (love::Menu *) obj;
delete arg1;
}
static swig_lua_method swig_love_Menu_methods[] = {
    {"setSize", _wrap_Menu_setSize}, 
    {"setWidth", _wrap_Menu_setWidth}, 
    {"setHeight", _wrap_Menu_setHeight}, 
    {"setBorderSize", _wrap_Menu_setBorderSize}, 
    {"setPosition", _wrap_Menu_setPosition}, 
    {"setX", _wrap_Menu_setX}, 
    {"setY", _wrap_Menu_setY}, 
    {"setFont", _wrap_Menu_setFont}, 
    {"setBackgroundColor", _wrap_Menu_setBackgroundColor}, 
    {"getWidth", _wrap_Menu_getWidth}, 
    {"getHeight", _wrap_Menu_getHeight}, 
    {"getX", _wrap_Menu_getX}, 
    {"getY", _wrap_Menu_getY}, 
    {"getBorderSize", _wrap_Menu_getBorderSize}, 
    {"getFont", _wrap_Menu_getFont}, 
    {"getBackgroundColor", _wrap_Menu_getBackgroundColor}, 
    {"adjustSize", _wrap_Menu_adjustSize}, 
    {"adjustWidth", _wrap_Menu_adjustWidth}, 
    {"adjustHeight", _wrap_Menu_adjustHeight}, 
    {"adjustContent", _wrap_Menu_adjustContent}, 
    {"draw", _wrap_Menu_draw}, 
    {"drawBorder", _wrap_Menu_drawBorder}, 
    {"drawChildren", _wrap_Menu_drawChildren}, 
    {"add", _wrap_Menu_add}, 
    {"setCaption", _wrap_Menu_setCaption}, 
    {"setTitleBarHeight", _wrap_Menu_setTitleBarHeight}, 
    {"getCaption", _wrap_Menu_getCaption}, 
    {"getTitleBarHeight", _wrap_Menu_getTitleBarHeight}, 
    {0,0}
};
static swig_lua_attribute swig_love_Menu_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_love_Menu_bases[] = {&_wrap_class_love_AbstractMenu,0};
swig_lua_class _wrap_class_love_Menu = { "Menu", &SWIGTYPE_p_love__Menu,_wrap_new_Menu, swig_delete_Menu, swig_love_Menu_methods, swig_love_Menu_attributes, swig_love_Menu_bases };

static int _wrap_new_GUIContainer(lua_State* L) {
  int SWIG_arg = -1;
  love::GUIContainer *result = 0 ;
  
  result = (love::GUIContainer *)new love::GUIContainer();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__GUIContainer,1); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_GUIContainer(lua_State* L) {
  int SWIG_arg = -1;
  love::GUIContainer *arg1 = (love::GUIContainer *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::GUIContainer *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__GUIContainer,0,1,"delete_GUIContainer");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GUIContainer_add(lua_State* L) {
  int SWIG_arg = -1;
  love::GUIContainer *arg1 = (love::GUIContainer *) 0 ;
  love::pAbstractMenu *arg2 = (love::pAbstractMenu *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::GUIContainer *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__GUIContainer,0,1,"GUIContainer_add");
  arg2=(love::pAbstractMenu *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,2,"GUIContainer_add");
  (arg1)->add((love::pAbstractMenu const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GUIContainer_remove(lua_State* L) {
  int SWIG_arg = -1;
  love::GUIContainer *arg1 = (love::GUIContainer *) 0 ;
  love::pAbstractMenu *arg2 = (love::pAbstractMenu *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::GUIContainer *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__GUIContainer,0,1,"GUIContainer_remove");
  arg2=(love::pAbstractMenu *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,2,"GUIContainer_remove");
  (arg1)->remove((love::pAbstractMenu const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_GUIContainer(void *obj) {
love::GUIContainer *arg1 = (love::GUIContainer *) obj;
delete arg1;
}
static swig_lua_method swig_love_GUIContainer_methods[] = {
    {"add", _wrap_GUIContainer_add}, 
    {"remove", _wrap_GUIContainer_remove}, 
    {0,0}
};
static swig_lua_attribute swig_love_GUIContainer_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_love_GUIContainer_bases[] = {0};
swig_lua_class _wrap_class_love_GUIContainer = { "GUIContainer", &SWIGTYPE_p_love__GUIContainer,_wrap_new_GUIContainer, swig_delete_GUIContainer, swig_love_GUIContainer_methods, swig_love_GUIContainer_attributes, swig_love_GUIContainer_bases };

static int _wrap_new_AbstractGUI(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGUI *result = 0 ;
  
  result = (love::AbstractGUI *)new love::AbstractGUI();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__AbstractGUI,1); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_AbstractGUI(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGUI *arg1 = (love::AbstractGUI *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractGUI *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGUI,0,1,"delete_AbstractGUI");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGUI_action(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGUI *arg1 = (love::AbstractGUI *) 0 ;
  gcn::ActionEvent *arg2 = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractGUI *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGUI,0,1,"AbstractGUI_action");
  arg2=(gcn::ActionEvent *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__ActionEvent,0,2,"AbstractGUI_action");
  (arg1)->action((gcn::ActionEvent const &)*arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGUI_add__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGUI *arg1 = (love::AbstractGUI *) 0 ;
  love::pMenu *arg2 = (love::pMenu *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractGUI *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGUI,0,1,"AbstractGUI_add");
  arg2=(love::pMenu *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__Menu_t,0,2,"AbstractGUI_add");
  (arg1)->add((love::pMenu const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGUI_add__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGUI *arg1 = (love::AbstractGUI *) 0 ;
  gcn::Widget *arg2 = (gcn::Widget *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractGUI *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGUI,0,1,"AbstractGUI_add");
  arg2=(gcn::Widget *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Widget,0,2,"AbstractGUI_add");
  (arg1)->add(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGUI_add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractGUI, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__Menu_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AbstractGUI_add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractGUI, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_gcn__Widget, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AbstractGUI_add__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'AbstractGUI_add'");
  lua_error(L);return 0;
}


static int _wrap_AbstractGUI_remove__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGUI *arg1 = (love::AbstractGUI *) 0 ;
  love::pMenu *arg2 = (love::pMenu *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractGUI *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGUI,0,1,"AbstractGUI_remove");
  arg2=(love::pMenu *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__Menu_t,0,2,"AbstractGUI_remove");
  (arg1)->remove((love::pMenu const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGUI_remove__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGUI *arg1 = (love::AbstractGUI *) 0 ;
  gcn::Widget *arg2 = (gcn::Widget *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractGUI *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGUI,0,1,"AbstractGUI_remove");
  arg2=(gcn::Widget *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Widget,0,2,"AbstractGUI_remove");
  (arg1)->remove(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGUI_remove(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractGUI, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__Menu_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AbstractGUI_remove__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractGUI, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_gcn__Widget, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AbstractGUI_remove__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'AbstractGUI_remove'");
  lua_error(L);return 0;
}


static int _wrap_AbstractGUI_clear(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGUI *arg1 = (love::AbstractGUI *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractGUI *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGUI,0,1,"AbstractGUI_clear");
  (arg1)->clear();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGUI_getFont(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGUI *arg1 = (love::AbstractGUI *) 0 ;
  love::pAbstractFont result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractGUI *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGUI,0,1,"AbstractGUI_getFont");
  result = (arg1)->getFont();
  SWIG_arg=0;
  {
    love::pAbstractFont * resultptr;
    resultptr = new love::pAbstractFont((love::pAbstractFont &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractFont_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGUI_getColor(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGUI *arg1 = (love::AbstractGUI *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractGUI *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGUI,0,1,"AbstractGUI_getColor");
  result = (arg1)->getColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGUI_init(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGUI *arg1 = (love::AbstractGUI *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractGUI *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGUI,0,1,"AbstractGUI_init");
  result = (int)(arg1)->init();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGUI_render(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGUI *arg1 = (love::AbstractGUI *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractGUI *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGUI,0,1,"AbstractGUI_render");
  (arg1)->render();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGUI_update(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGUI *arg1 = (love::AbstractGUI *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractGUI *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGUI,0,1,"AbstractGUI_update");
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->update(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AbstractGUI(void *obj) {
love::AbstractGUI *arg1 = (love::AbstractGUI *) obj;
delete arg1;
}
static swig_lua_method swig_love_AbstractGUI_methods[] = {
    {"action", _wrap_AbstractGUI_action}, 
    {"add", _wrap_AbstractGUI_add}, 
    {"remove", _wrap_AbstractGUI_remove}, 
    {"clear", _wrap_AbstractGUI_clear}, 
    {"getFont", _wrap_AbstractGUI_getFont}, 
    {"getColor", _wrap_AbstractGUI_getColor}, 
    {"init", _wrap_AbstractGUI_init}, 
    {"render", _wrap_AbstractGUI_render}, 
    {"update", _wrap_AbstractGUI_update}, 
    {0,0}
};
static swig_lua_attribute swig_love_AbstractGUI_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_love_AbstractGUI_bases[] = {&_wrap_class_love_Updateable,0};
swig_lua_class _wrap_class_love_AbstractGUI = { "AbstractGUI", &SWIGTYPE_p_love__AbstractGUI,_wrap_new_AbstractGUI, swig_delete_AbstractGUI, swig_love_AbstractGUI_methods, swig_love_AbstractGUI_attributes, swig_love_AbstractGUI_bases };

static int _wrap_interval_min_set(lua_State* L) {
  int SWIG_arg = -1;
  love::interval *arg1 = (love::interval *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::interval *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__interval,0,1,"interval_min_set");
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->min = arg2;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interval_min_get(lua_State* L) {
  int SWIG_arg = -1;
  love::interval *arg1 = (love::interval *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::interval *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__interval,0,1,"interval_min_get");
  result = (float) ((arg1)->min);
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interval_max_set(lua_State* L) {
  int SWIG_arg = -1;
  love::interval *arg1 = (love::interval *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::interval *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__interval,0,1,"interval_max_set");
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->max = arg2;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interval_max_get(lua_State* L) {
  int SWIG_arg = -1;
  love::interval *arg1 = (love::interval *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::interval *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__interval,0,1,"interval_max_get");
  result = (float) ((arg1)->max);
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interval_delta_set(lua_State* L) {
  int SWIG_arg = -1;
  love::interval *arg1 = (love::interval *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::interval *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__interval,0,1,"interval_delta_set");
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->delta = arg2;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interval_delta_get(lua_State* L) {
  int SWIG_arg = -1;
  love::interval *arg1 = (love::interval *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::interval *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__interval,0,1,"interval_delta_get");
  result = (float) ((arg1)->delta);
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interval_var_set(lua_State* L) {
  int SWIG_arg = -1;
  love::interval *arg1 = (love::interval *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::interval *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__interval,0,1,"interval_var_set");
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->var = arg2;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interval_var_get(lua_State* L) {
  int SWIG_arg = -1;
  love::interval *arg1 = (love::interval *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::interval *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__interval,0,1,"interval_var_get");
  result = (float) ((arg1)->var);
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_interval(lua_State* L) {
  int SWIG_arg = -1;
  love::interval *arg1 = (love::interval *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::interval *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__interval,0,1,"delete_interval");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_interval(void *obj) {
love::interval *arg1 = (love::interval *) obj;
delete arg1;
}
static swig_lua_method swig_love_interval_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_love_interval_attributes[] = {
    { "min",_wrap_interval_min_get, _wrap_interval_min_set},
    { "max",_wrap_interval_max_get, _wrap_interval_max_set},
    { "delta",_wrap_interval_delta_get, _wrap_interval_delta_set},
    { "var",_wrap_interval_var_get, _wrap_interval_var_set},
    {0,0,0}
};
static swig_lua_class *swig_love_interval_bases[] = {0};
swig_lua_class _wrap_class_love_interval = { "interval", &SWIGTYPE_p_love__interval,0, swig_delete_interval, swig_love_interval_methods, swig_love_interval_attributes, swig_love_interval_bases };

static int _wrap_particle_pos_set(lua_State* L) {
  int SWIG_arg = -1;
  love::particle *arg1 = (love::particle *) 0 ;
  Vector arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::particle *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__particle,0,1,"particle_pos_set");
  {
    Vector * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_Vector,0)) SWIG_fail;
    arg2 = *argp;
  }
  if (arg1) (arg1)->pos = arg2;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_particle_pos_get(lua_State* L) {
  int SWIG_arg = -1;
  love::particle *arg1 = (love::particle *) 0 ;
  Vector result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::particle *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__particle,0,1,"particle_pos_get");
  result =  ((arg1)->pos);
  SWIG_arg=0;
  {
    Vector * resultptr;
    resultptr = new Vector((Vector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Vector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_particle_speed_set(lua_State* L) {
  int SWIG_arg = -1;
  love::particle *arg1 = (love::particle *) 0 ;
  Vector arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::particle *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__particle,0,1,"particle_speed_set");
  {
    Vector * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_Vector,0)) SWIG_fail;
    arg2 = *argp;
  }
  if (arg1) (arg1)->speed = arg2;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_particle_speed_get(lua_State* L) {
  int SWIG_arg = -1;
  love::particle *arg1 = (love::particle *) 0 ;
  Vector result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::particle *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__particle,0,1,"particle_speed_get");
  result =  ((arg1)->speed);
  SWIG_arg=0;
  {
    Vector * resultptr;
    resultptr = new Vector((Vector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Vector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_particle_direction_set(lua_State* L) {
  int SWIG_arg = -1;
  love::particle *arg1 = (love::particle *) 0 ;
  Vector arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::particle *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__particle,0,1,"particle_direction_set");
  {
    Vector * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_Vector,0)) SWIG_fail;
    arg2 = *argp;
  }
  if (arg1) (arg1)->direction = arg2;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_particle_direction_get(lua_State* L) {
  int SWIG_arg = -1;
  love::particle *arg1 = (love::particle *) 0 ;
  Vector result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::particle *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__particle,0,1,"particle_direction_get");
  result =  ((arg1)->direction);
  SWIG_arg=0;
  {
    Vector * resultptr;
    resultptr = new Vector((Vector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Vector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_particle_life_set(lua_State* L) {
  int SWIG_arg = -1;
  love::particle *arg1 = (love::particle *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::particle *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__particle,0,1,"particle_life_set");
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->life = arg2;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_particle_life_get(lua_State* L) {
  int SWIG_arg = -1;
  love::particle *arg1 = (love::particle *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::particle *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__particle,0,1,"particle_life_get");
  result = (float) ((arg1)->life);
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_particle_age_set(lua_State* L) {
  int SWIG_arg = -1;
  love::particle *arg1 = (love::particle *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::particle *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__particle,0,1,"particle_age_set");
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->age = arg2;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_particle_age_get(lua_State* L) {
  int SWIG_arg = -1;
  love::particle *arg1 = (love::particle *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::particle *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__particle,0,1,"particle_age_get");
  result = (float) ((arg1)->age);
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_particle_gravity_set(lua_State* L) {
  int SWIG_arg = -1;
  love::particle *arg1 = (love::particle *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::particle *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__particle,0,1,"particle_gravity_set");
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->gravity = arg2;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_particle_gravity_get(lua_State* L) {
  int SWIG_arg = -1;
  love::particle *arg1 = (love::particle *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::particle *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__particle,0,1,"particle_gravity_get");
  result = (float) ((arg1)->gravity);
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_particle_radialAcc_set(lua_State* L) {
  int SWIG_arg = -1;
  love::particle *arg1 = (love::particle *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::particle *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__particle,0,1,"particle_radialAcc_set");
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->radialAcc = arg2;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_particle_radialAcc_get(lua_State* L) {
  int SWIG_arg = -1;
  love::particle *arg1 = (love::particle *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::particle *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__particle,0,1,"particle_radialAcc_get");
  result = (float) ((arg1)->radialAcc);
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_particle_tangentialAcc_set(lua_State* L) {
  int SWIG_arg = -1;
  love::particle *arg1 = (love::particle *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::particle *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__particle,0,1,"particle_tangentialAcc_set");
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->tangentialAcc = arg2;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_particle_tangentialAcc_get(lua_State* L) {
  int SWIG_arg = -1;
  love::particle *arg1 = (love::particle *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::particle *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__particle,0,1,"particle_tangentialAcc_get");
  result = (float) ((arg1)->tangentialAcc);
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_particle_spin_set(lua_State* L) {
  int SWIG_arg = -1;
  love::particle *arg1 = (love::particle *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::particle *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__particle,0,1,"particle_spin_set");
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->spin = arg2;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_particle_spin_get(lua_State* L) {
  int SWIG_arg = -1;
  love::particle *arg1 = (love::particle *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::particle *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__particle,0,1,"particle_spin_get");
  result = (float) ((arg1)->spin);
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_particle_angle_set(lua_State* L) {
  int SWIG_arg = -1;
  love::particle *arg1 = (love::particle *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::particle *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__particle,0,1,"particle_angle_set");
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->angle = arg2;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_particle_angle_get(lua_State* L) {
  int SWIG_arg = -1;
  love::particle *arg1 = (love::particle *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::particle *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__particle,0,1,"particle_angle_get");
  result = (float) ((arg1)->angle);
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_particle_size_set(lua_State* L) {
  int SWIG_arg = -1;
  love::particle *arg1 = (love::particle *) 0 ;
  love::interval *arg2 = (love::interval *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::particle *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__particle,0,1,"particle_size_set");
  arg2=(love::interval *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_love__interval,0,2,"particle_size_set");
  if (arg1) (arg1)->size = *arg2;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_particle_size_get(lua_State* L) {
  int SWIG_arg = -1;
  love::particle *arg1 = (love::particle *) 0 ;
  love::interval *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::particle *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__particle,0,1,"particle_size_get");
  result = (love::interval *)& ((arg1)->size);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__interval,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_particle(lua_State* L) {
  int SWIG_arg = -1;
  love::particle *arg1 = (love::particle *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::particle *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__particle,0,1,"delete_particle");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_particle(void *obj) {
love::particle *arg1 = (love::particle *) obj;
delete arg1;
}
static swig_lua_method swig_love_particle_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_love_particle_attributes[] = {
    { "pos",_wrap_particle_pos_get, _wrap_particle_pos_set},
    { "speed",_wrap_particle_speed_get, _wrap_particle_speed_set},
    { "direction",_wrap_particle_direction_get, _wrap_particle_direction_set},
    { "life",_wrap_particle_life_get, _wrap_particle_life_set},
    { "age",_wrap_particle_age_get, _wrap_particle_age_set},
    { "gravity",_wrap_particle_gravity_get, _wrap_particle_gravity_set},
    { "radialAcc",_wrap_particle_radialAcc_get, _wrap_particle_radialAcc_set},
    { "tangentialAcc",_wrap_particle_tangentialAcc_get, _wrap_particle_tangentialAcc_set},
    { "spin",_wrap_particle_spin_get, _wrap_particle_spin_set},
    { "angle",_wrap_particle_angle_get, _wrap_particle_angle_set},
    { "size",_wrap_particle_size_get, _wrap_particle_size_set},
    {0,0,0}
};
static swig_lua_class *swig_love_particle_bases[] = {0};
swig_lua_class _wrap_class_love_particle = { "particle", &SWIGTYPE_p_love__particle,0, swig_delete_particle, swig_love_particle_methods, swig_love_particle_attributes, swig_love_particle_bases };

static int _wrap_new_ParticleSystem(lua_State* L) {
  int SWIG_arg = -1;
  love::ParticleSystem *result = 0 ;
  
  result = (love::ParticleSystem *)new love::ParticleSystem();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__ParticleSystem,1); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_ParticleSystem(lua_State* L) {
  int SWIG_arg = -1;
  love::ParticleSystem *arg1 = (love::ParticleSystem *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::ParticleSystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ParticleSystem,0,1,"delete_ParticleSystem");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_load(lua_State* L) {
  int SWIG_arg = -1;
  love::ParticleSystem *arg1 = (love::ParticleSystem *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::ParticleSystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ParticleSystem,0,1,"ParticleSystem_load");
  result = (int)(arg1)->load();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_unload(lua_State* L) {
  int SWIG_arg = -1;
  love::ParticleSystem *arg1 = (love::ParticleSystem *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::ParticleSystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ParticleSystem,0,1,"ParticleSystem_unload");
  (arg1)->unload();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_spawn__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::ParticleSystem *arg1 = (love::ParticleSystem *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::ParticleSystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ParticleSystem,0,1,"ParticleSystem_spawn");
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->spawn(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_spawn__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::ParticleSystem *arg1 = (love::ParticleSystem *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::ParticleSystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ParticleSystem,0,1,"ParticleSystem_spawn");
  (arg1)->spawn();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_spawn(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ParticleSystem_spawn__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ParticleSystem_spawn__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'ParticleSystem_spawn'");
  lua_error(L);return 0;
}


static int _wrap_ParticleSystem_setAutostart(lua_State* L) {
  int SWIG_arg = -1;
  love::ParticleSystem *arg1 = (love::ParticleSystem *) 0 ;
  bool arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isboolean(L,2)) SWIG_fail_arg(2);
  arg1=(love::ParticleSystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ParticleSystem,0,1,"ParticleSystem_setAutostart");
  arg2 = (bool)lua_toboolean(L, 2);
  (arg1)->setAutostart(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_getNumParticles(lua_State* L) {
  int SWIG_arg = -1;
  love::ParticleSystem *arg1 = (love::ParticleSystem *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::ParticleSystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ParticleSystem,0,1,"ParticleSystem_getNumParticles");
  result = (int)((love::ParticleSystem const *)arg1)->getNumParticles();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_getParticles(lua_State* L) {
  int SWIG_arg = -1;
  love::ParticleSystem *arg1 = (love::ParticleSystem *) 0 ;
  list<love::particle > *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::ParticleSystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ParticleSystem,0,1,"ParticleSystem_getParticles");
  {
    list<love::particle > const &_result_ref = ((love::ParticleSystem const *)arg1)->getParticles();
    result = (list<love::particle > *) &_result_ref;
  }
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_listTlove__particle_t,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_getSprite(lua_State* L) {
  int SWIG_arg = -1;
  love::ParticleSystem *arg1 = (love::ParticleSystem *) 0 ;
  pSprite *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::ParticleSystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ParticleSystem,0,1,"ParticleSystem_getSprite");
  {
    pSprite const &_result_ref = ((love::ParticleSystem const *)arg1)->getSprite();
    result = (pSprite *) &_result_ref;
  }
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pSprite,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_getColor(lua_State* L) {
  int SWIG_arg = -1;
  love::ParticleSystem *arg1 = (love::ParticleSystem *) 0 ;
  pAnimatedColor *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::ParticleSystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ParticleSystem,0,1,"ParticleSystem_getColor");
  {
    pAnimatedColor const &_result_ref = ((love::ParticleSystem const *)arg1)->getColor();
    result = (pAnimatedColor *) &_result_ref;
  }
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pAnimatedColor,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_isAdditive(lua_State* L) {
  int SWIG_arg = -1;
  love::ParticleSystem *arg1 = (love::ParticleSystem *) 0 ;
  bool result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::ParticleSystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ParticleSystem,0,1,"ParticleSystem_isAdditive");
  result = (bool)((love::ParticleSystem const *)arg1)->isAdditive();
  SWIG_arg=0;
  lua_pushboolean(L,(int)result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_reset(lua_State* L) {
  int SWIG_arg = -1;
  love::ParticleSystem *arg1 = (love::ParticleSystem *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::ParticleSystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ParticleSystem,0,1,"ParticleSystem_reset");
  (arg1)->reset();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_setPosition(lua_State* L) {
  int SWIG_arg = -1;
  love::ParticleSystem *arg1 = (love::ParticleSystem *) 0 ;
  float arg2 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::ParticleSystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ParticleSystem,0,1,"ParticleSystem_setPosition");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setPosition(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_getLifetime(lua_State* L) {
  int SWIG_arg = -1;
  love::ParticleSystem *arg1 = (love::ParticleSystem *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::ParticleSystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ParticleSystem,0,1,"ParticleSystem_getLifetime");
  result = (float)((love::ParticleSystem const *)arg1)->getLifetime();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_setLifetime(lua_State* L) {
  int SWIG_arg = -1;
  love::ParticleSystem *arg1 = (love::ParticleSystem *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::ParticleSystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ParticleSystem,0,1,"ParticleSystem_setLifetime");
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setLifetime(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_getAge(lua_State* L) {
  int SWIG_arg = -1;
  love::ParticleSystem *arg1 = (love::ParticleSystem *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::ParticleSystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ParticleSystem,0,1,"ParticleSystem_getAge");
  result = (float)((love::ParticleSystem const *)arg1)->getAge();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_setLinger(lua_State* L) {
  int SWIG_arg = -1;
  love::ParticleSystem *arg1 = (love::ParticleSystem *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::ParticleSystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ParticleSystem,0,1,"ParticleSystem_setLinger");
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setLinger(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_getLinger(lua_State* L) {
  int SWIG_arg = -1;
  love::ParticleSystem *arg1 = (love::ParticleSystem *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::ParticleSystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ParticleSystem,0,1,"ParticleSystem_getLinger");
  result = (float)(arg1)->getLinger();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_isDead(lua_State* L) {
  int SWIG_arg = -1;
  love::ParticleSystem *arg1 = (love::ParticleSystem *) 0 ;
  bool result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::ParticleSystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ParticleSystem,0,1,"ParticleSystem_isDead");
  result = (bool)((love::ParticleSystem const *)arg1)->isDead();
  SWIG_arg=0;
  lua_pushboolean(L,(int)result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_isActive(lua_State* L) {
  int SWIG_arg = -1;
  love::ParticleSystem *arg1 = (love::ParticleSystem *) 0 ;
  bool result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::ParticleSystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ParticleSystem,0,1,"ParticleSystem_isActive");
  result = (bool)((love::ParticleSystem const *)arg1)->isActive();
  SWIG_arg=0;
  lua_pushboolean(L,(int)result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_setParticlesPerSecond(lua_State* L) {
  int SWIG_arg = -1;
  love::ParticleSystem *arg1 = (love::ParticleSystem *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::ParticleSystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ParticleSystem,0,1,"ParticleSystem_setParticlesPerSecond");
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setParticlesPerSecond(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_addColor__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::ParticleSystem *arg1 = (love::ParticleSystem *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  float arg6 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  if(!lua_isnumber(L,6)) SWIG_fail_arg(6);
  arg1=(love::ParticleSystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ParticleSystem,0,1,"ParticleSystem_addColor");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  (arg1)->addColor(arg2,arg3,arg4,arg5,arg6);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_addColor__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::ParticleSystem *arg1 = (love::ParticleSystem *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  arg1=(love::ParticleSystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ParticleSystem,0,1,"ParticleSystem_addColor");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  (arg1)->addColor(arg2,arg3,arg4,arg5);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_addColor__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  love::ParticleSystem *arg1 = (love::ParticleSystem *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::ParticleSystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ParticleSystem,0,1,"ParticleSystem_addColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"ParticleSystem_addColor");
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->addColor((love::pAbstractColor const *)arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_addColor__SWIG_3(lua_State* L) {
  int SWIG_arg = -1;
  love::ParticleSystem *arg1 = (love::ParticleSystem *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::ParticleSystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ParticleSystem,0,1,"ParticleSystem_addColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"ParticleSystem_addColor");
  (arg1)->addColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_addColor(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ParticleSystem_addColor__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ParticleSystem_addColor__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_ParticleSystem_addColor__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_ParticleSystem_addColor__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'ParticleSystem_addColor'");
  lua_error(L);return 0;
}


static int _wrap_ParticleSystem_setSprite__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::ParticleSystem *arg1 = (love::ParticleSystem *) 0 ;
  pSprite *arg2 = (pSprite *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::ParticleSystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ParticleSystem,0,1,"ParticleSystem_setSprite");
  arg2=(pSprite *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_pSprite,0,2,"ParticleSystem_setSprite");
  (arg1)->setSprite((pSprite const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_setSprite__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::ParticleSystem *arg1 = (love::ParticleSystem *) 0 ;
  pAbstractImage *arg2 = (pAbstractImage *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::ParticleSystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ParticleSystem,0,1,"ParticleSystem_setSprite");
  arg2=(pAbstractImage *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_pAbstractImage,0,2,"ParticleSystem_setSprite");
  (arg1)->setSprite((pAbstractImage const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_setSprite__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  love::ParticleSystem *arg1 = (love::ParticleSystem *) 0 ;
  love::pFrameAnimation *arg2 = (love::pFrameAnimation *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::ParticleSystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ParticleSystem,0,1,"ParticleSystem_setSprite");
  arg2=(love::pFrameAnimation *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__FrameAnimation_t,0,2,"ParticleSystem_setSprite");
  (arg1)->setSprite((love::pFrameAnimation const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_setSprite(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_pSprite, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ParticleSystem_setSprite__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_pAbstractImage, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ParticleSystem_setSprite__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__FrameAnimation_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ParticleSystem_setSprite__SWIG_2(L);
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'ParticleSystem_setSprite'");
  lua_error(L);return 0;
}


static int _wrap_ParticleSystem_setAdditiveBlending(lua_State* L) {
  int SWIG_arg = -1;
  love::ParticleSystem *arg1 = (love::ParticleSystem *) 0 ;
  bool arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isboolean(L,2)) SWIG_fail_arg(2);
  arg1=(love::ParticleSystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ParticleSystem,0,1,"ParticleSystem_setAdditiveBlending");
  arg2 = (bool)lua_toboolean(L, 2);
  (arg1)->setAdditiveBlending(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_setDirection__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::ParticleSystem *arg1 = (love::ParticleSystem *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(love::ParticleSystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ParticleSystem,0,1,"ParticleSystem_setDirection");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->setDirection(arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_setDirection__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::ParticleSystem *arg1 = (love::ParticleSystem *) 0 ;
  float arg2 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::ParticleSystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ParticleSystem,0,1,"ParticleSystem_setDirection");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setDirection(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_setDirection__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  love::ParticleSystem *arg1 = (love::ParticleSystem *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::ParticleSystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ParticleSystem,0,1,"ParticleSystem_setDirection");
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setDirection(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_setDirection(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ParticleSystem_setDirection__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ParticleSystem_setDirection__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ParticleSystem_setDirection__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'ParticleSystem_setDirection'");
  lua_error(L);return 0;
}


static int _wrap_ParticleSystem_setStartSpeed__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::ParticleSystem *arg1 = (love::ParticleSystem *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(love::ParticleSystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ParticleSystem,0,1,"ParticleSystem_setStartSpeed");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->setStartSpeed(arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_setStartSpeed__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::ParticleSystem *arg1 = (love::ParticleSystem *) 0 ;
  float arg2 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::ParticleSystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ParticleSystem,0,1,"ParticleSystem_setStartSpeed");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setStartSpeed(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_setStartSpeed__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  love::ParticleSystem *arg1 = (love::ParticleSystem *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::ParticleSystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ParticleSystem,0,1,"ParticleSystem_setStartSpeed");
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setStartSpeed(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_setStartSpeed(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ParticleSystem_setStartSpeed__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ParticleSystem_setStartSpeed__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ParticleSystem_setStartSpeed__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'ParticleSystem_setStartSpeed'");
  lua_error(L);return 0;
}


static int _wrap_ParticleSystem_setGravity__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::ParticleSystem *arg1 = (love::ParticleSystem *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(love::ParticleSystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ParticleSystem,0,1,"ParticleSystem_setGravity");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->setGravity(arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_setGravity__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::ParticleSystem *arg1 = (love::ParticleSystem *) 0 ;
  float arg2 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::ParticleSystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ParticleSystem,0,1,"ParticleSystem_setGravity");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setGravity(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_setGravity__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  love::ParticleSystem *arg1 = (love::ParticleSystem *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::ParticleSystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ParticleSystem,0,1,"ParticleSystem_setGravity");
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setGravity(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_setGravity(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ParticleSystem_setGravity__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ParticleSystem_setGravity__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ParticleSystem_setGravity__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'ParticleSystem_setGravity'");
  lua_error(L);return 0;
}


static int _wrap_ParticleSystem_setRadialAcc__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::ParticleSystem *arg1 = (love::ParticleSystem *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(love::ParticleSystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ParticleSystem,0,1,"ParticleSystem_setRadialAcc");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->setRadialAcc(arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_setRadialAcc__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::ParticleSystem *arg1 = (love::ParticleSystem *) 0 ;
  float arg2 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::ParticleSystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ParticleSystem,0,1,"ParticleSystem_setRadialAcc");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setRadialAcc(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_setRadialAcc__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  love::ParticleSystem *arg1 = (love::ParticleSystem *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::ParticleSystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ParticleSystem,0,1,"ParticleSystem_setRadialAcc");
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setRadialAcc(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_setRadialAcc(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ParticleSystem_setRadialAcc__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ParticleSystem_setRadialAcc__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ParticleSystem_setRadialAcc__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'ParticleSystem_setRadialAcc'");
  lua_error(L);return 0;
}


static int _wrap_ParticleSystem_setTangentialAcc__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::ParticleSystem *arg1 = (love::ParticleSystem *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(love::ParticleSystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ParticleSystem,0,1,"ParticleSystem_setTangentialAcc");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->setTangentialAcc(arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_setTangentialAcc__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::ParticleSystem *arg1 = (love::ParticleSystem *) 0 ;
  float arg2 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::ParticleSystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ParticleSystem,0,1,"ParticleSystem_setTangentialAcc");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setTangentialAcc(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_setTangentialAcc__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  love::ParticleSystem *arg1 = (love::ParticleSystem *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::ParticleSystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ParticleSystem,0,1,"ParticleSystem_setTangentialAcc");
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setTangentialAcc(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_setTangentialAcc(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ParticleSystem_setTangentialAcc__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ParticleSystem_setTangentialAcc__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ParticleSystem_setTangentialAcc__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'ParticleSystem_setTangentialAcc'");
  lua_error(L);return 0;
}


static int _wrap_ParticleSystem_setParticleLifetime__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::ParticleSystem *arg1 = (love::ParticleSystem *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(love::ParticleSystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ParticleSystem,0,1,"ParticleSystem_setParticleLifetime");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->setParticleLifetime(arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_setParticleLifetime__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::ParticleSystem *arg1 = (love::ParticleSystem *) 0 ;
  float arg2 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::ParticleSystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ParticleSystem,0,1,"ParticleSystem_setParticleLifetime");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setParticleLifetime(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_setParticleLifetime__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  love::ParticleSystem *arg1 = (love::ParticleSystem *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::ParticleSystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ParticleSystem,0,1,"ParticleSystem_setParticleLifetime");
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setParticleLifetime(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_setParticleLifetime(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ParticleSystem_setParticleLifetime__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ParticleSystem_setParticleLifetime__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ParticleSystem_setParticleLifetime__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'ParticleSystem_setParticleLifetime'");
  lua_error(L);return 0;
}


static int _wrap_ParticleSystem_setParticleSize__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::ParticleSystem *arg1 = (love::ParticleSystem *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(love::ParticleSystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ParticleSystem,0,1,"ParticleSystem_setParticleSize");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->setParticleSize(arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_setParticleSize__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::ParticleSystem *arg1 = (love::ParticleSystem *) 0 ;
  float arg2 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::ParticleSystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ParticleSystem,0,1,"ParticleSystem_setParticleSize");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setParticleSize(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_setParticleSize__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  love::ParticleSystem *arg1 = (love::ParticleSystem *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::ParticleSystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ParticleSystem,0,1,"ParticleSystem_setParticleSize");
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setParticleSize(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_setParticleSize(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ParticleSystem_setParticleSize__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ParticleSystem_setParticleSize__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ParticleSystem_setParticleSize__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'ParticleSystem_setParticleSize'");
  lua_error(L);return 0;
}


static int _wrap_ParticleSystem_setParticleSpin__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::ParticleSystem *arg1 = (love::ParticleSystem *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(love::ParticleSystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ParticleSystem,0,1,"ParticleSystem_setParticleSpin");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->setParticleSpin(arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_setParticleSpin__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::ParticleSystem *arg1 = (love::ParticleSystem *) 0 ;
  float arg2 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::ParticleSystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ParticleSystem,0,1,"ParticleSystem_setParticleSpin");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setParticleSpin(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_setParticleSpin__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  love::ParticleSystem *arg1 = (love::ParticleSystem *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::ParticleSystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ParticleSystem,0,1,"ParticleSystem_setParticleSpin");
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setParticleSpin(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_setParticleSpin(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ParticleSystem_setParticleSpin__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ParticleSystem_setParticleSpin__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ParticleSystem_setParticleSpin__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'ParticleSystem_setParticleSpin'");
  lua_error(L);return 0;
}


static int _wrap_ParticleSystem_update(lua_State* L) {
  int SWIG_arg = -1;
  love::ParticleSystem *arg1 = (love::ParticleSystem *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::ParticleSystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ParticleSystem,0,1,"ParticleSystem_update");
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->update(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_render__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::ParticleSystem *arg1 = (love::ParticleSystem *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::ParticleSystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ParticleSystem,0,1,"ParticleSystem_render");
  (arg1)->render();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_render__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::ParticleSystem *arg1 = (love::ParticleSystem *) 0 ;
  float arg2 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::ParticleSystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ParticleSystem,0,1,"ParticleSystem_render");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->render(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_render(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ParticleSystem_render__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ParticleSystem_render__SWIG_1(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'ParticleSystem_render'");
  lua_error(L);return 0;
}


static void swig_delete_ParticleSystem(void *obj) {
love::ParticleSystem *arg1 = (love::ParticleSystem *) obj;
delete arg1;
}
static swig_lua_method swig_love_ParticleSystem_methods[] = {
    {"load", _wrap_ParticleSystem_load}, 
    {"unload", _wrap_ParticleSystem_unload}, 
    {"spawn", _wrap_ParticleSystem_spawn}, 
    {"setAutostart", _wrap_ParticleSystem_setAutostart}, 
    {"getNumParticles", _wrap_ParticleSystem_getNumParticles}, 
    {"getParticles", _wrap_ParticleSystem_getParticles}, 
    {"getSprite", _wrap_ParticleSystem_getSprite}, 
    {"getColor", _wrap_ParticleSystem_getColor}, 
    {"isAdditive", _wrap_ParticleSystem_isAdditive}, 
    {"reset", _wrap_ParticleSystem_reset}, 
    {"setPosition", _wrap_ParticleSystem_setPosition}, 
    {"getLifetime", _wrap_ParticleSystem_getLifetime}, 
    {"setLifetime", _wrap_ParticleSystem_setLifetime}, 
    {"getAge", _wrap_ParticleSystem_getAge}, 
    {"setLinger", _wrap_ParticleSystem_setLinger}, 
    {"getLinger", _wrap_ParticleSystem_getLinger}, 
    {"isDead", _wrap_ParticleSystem_isDead}, 
    {"isActive", _wrap_ParticleSystem_isActive}, 
    {"setParticlesPerSecond", _wrap_ParticleSystem_setParticlesPerSecond}, 
    {"addColor", _wrap_ParticleSystem_addColor}, 
    {"setSprite", _wrap_ParticleSystem_setSprite}, 
    {"setAdditiveBlending", _wrap_ParticleSystem_setAdditiveBlending}, 
    {"setDirection", _wrap_ParticleSystem_setDirection}, 
    {"setStartSpeed", _wrap_ParticleSystem_setStartSpeed}, 
    {"setGravity", _wrap_ParticleSystem_setGravity}, 
    {"setRadialAcc", _wrap_ParticleSystem_setRadialAcc}, 
    {"setTangentialAcc", _wrap_ParticleSystem_setTangentialAcc}, 
    {"setParticleLifetime", _wrap_ParticleSystem_setParticleLifetime}, 
    {"setParticleSize", _wrap_ParticleSystem_setParticleSize}, 
    {"setParticleSpin", _wrap_ParticleSystem_setParticleSpin}, 
    {"update", _wrap_ParticleSystem_update}, 
    {"render", _wrap_ParticleSystem_render}, 
    {0,0}
};
static swig_lua_attribute swig_love_ParticleSystem_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_love_ParticleSystem_bases[] = {0};
swig_lua_class _wrap_class_love_ParticleSystem = { "ParticleSystem", &SWIGTYPE_p_love__ParticleSystem,_wrap_new_ParticleSystem, swig_delete_ParticleSystem, swig_love_ParticleSystem_methods, swig_love_ParticleSystem_attributes, swig_love_ParticleSystem_bases };

static int _wrap_delete_Timer(lua_State* L) {
  int SWIG_arg = -1;
  love::Timer *arg1 = (love::Timer *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Timer *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Timer,0,1,"delete_Timer");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_init(lua_State* L) {
  int SWIG_arg = -1;
  love::Timer *arg1 = (love::Timer *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Timer *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Timer,0,1,"Timer_init");
  result = (int)(arg1)->init();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_getDelta(lua_State* L) {
  int SWIG_arg = -1;
  love::Timer *arg1 = (love::Timer *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Timer *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Timer,0,1,"Timer_getDelta");
  result = (float)(arg1)->getDelta();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_getFrames(lua_State* L) {
  int SWIG_arg = -1;
  love::Timer *arg1 = (love::Timer *) 0 ;
  unsigned int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Timer *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Timer,0,1,"Timer_getFrames");
  result = (unsigned int)((love::Timer const *)arg1)->getFrames();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_setFrames(lua_State* L) {
  int SWIG_arg = -1;
  love::Timer *arg1 = (love::Timer *) 0 ;
  unsigned int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Timer *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Timer,0,1,"Timer_setFrames");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setFrames(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_getFpsUpdateFrequency(lua_State* L) {
  int SWIG_arg = -1;
  love::Timer *arg1 = (love::Timer *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Timer *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Timer,0,1,"Timer_getFpsUpdateFrequency");
  result = (float)((love::Timer const *)arg1)->getFpsUpdateFrequency();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_setFpsUpdateFrequency(lua_State* L) {
  int SWIG_arg = -1;
  love::Timer *arg1 = (love::Timer *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Timer *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Timer,0,1,"Timer_setFpsUpdateFrequency");
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setFpsUpdateFrequency(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_getFps(lua_State* L) {
  int SWIG_arg = -1;
  love::Timer *arg1 = (love::Timer *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Timer *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Timer,0,1,"Timer_getFps");
  result = (float)((love::Timer const *)arg1)->getFps();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_setFps(lua_State* L) {
  int SWIG_arg = -1;
  love::Timer *arg1 = (love::Timer *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Timer *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Timer,0,1,"Timer_setFps");
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setFps(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_getLockedFps(lua_State* L) {
  int SWIG_arg = -1;
  love::Timer *arg1 = (love::Timer *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Timer *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Timer,0,1,"Timer_getLockedFps");
  result = (float)((love::Timer const *)arg1)->getLockedFps();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_setLockedFps(lua_State* L) {
  int SWIG_arg = -1;
  love::Timer *arg1 = (love::Timer *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Timer *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Timer,0,1,"Timer_setLockedFps");
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setLockedFps(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_getMaxFps(lua_State* L) {
  int SWIG_arg = -1;
  love::Timer *arg1 = (love::Timer *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Timer *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Timer,0,1,"Timer_getMaxFps");
  result = (float)((love::Timer const *)arg1)->getMaxFps();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_setMaxFps(lua_State* L) {
  int SWIG_arg = -1;
  love::Timer *arg1 = (love::Timer *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Timer *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Timer,0,1,"Timer_setMaxFps");
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setMaxFps(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_getMinFps(lua_State* L) {
  int SWIG_arg = -1;
  love::Timer *arg1 = (love::Timer *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Timer *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Timer,0,1,"Timer_getMinFps");
  result = (float)((love::Timer const *)arg1)->getMinFps();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_setMinFps(lua_State* L) {
  int SWIG_arg = -1;
  love::Timer *arg1 = (love::Timer *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Timer *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Timer,0,1,"Timer_setMinFps");
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setMinFps(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_addValue(lua_State* L) {
  int SWIG_arg = -1;
  love::Timer *arg1 = (love::Timer *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Timer *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Timer,0,1,"Timer_addValue");
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->addValue(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_getAverage(lua_State* L) {
  int SWIG_arg = -1;
  love::Timer *arg1 = (love::Timer *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Timer *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Timer,0,1,"Timer_getAverage");
  result = (float)((love::Timer const *)arg1)->getAverage();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Timer(void *obj) {
love::Timer *arg1 = (love::Timer *) obj;
delete arg1;
}
static swig_lua_method swig_love_Timer_methods[] = {
    {"init", _wrap_Timer_init}, 
    {"getDelta", _wrap_Timer_getDelta}, 
    {"getFrames", _wrap_Timer_getFrames}, 
    {"setFrames", _wrap_Timer_setFrames}, 
    {"getFpsUpdateFrequency", _wrap_Timer_getFpsUpdateFrequency}, 
    {"setFpsUpdateFrequency", _wrap_Timer_setFpsUpdateFrequency}, 
    {"getFps", _wrap_Timer_getFps}, 
    {"setFps", _wrap_Timer_setFps}, 
    {"getLockedFps", _wrap_Timer_getLockedFps}, 
    {"setLockedFps", _wrap_Timer_setLockedFps}, 
    {"getMaxFps", _wrap_Timer_getMaxFps}, 
    {"setMaxFps", _wrap_Timer_setMaxFps}, 
    {"getMinFps", _wrap_Timer_getMinFps}, 
    {"setMinFps", _wrap_Timer_setMinFps}, 
    {"addValue", _wrap_Timer_addValue}, 
    {"getAverage", _wrap_Timer_getAverage}, 
    {0,0}
};
static swig_lua_attribute swig_love_Timer_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_love_Timer_bases[] = {0};
swig_lua_class _wrap_class_love_Timer = { "Timer", &SWIGTYPE_p_love__Timer,0, swig_delete_Timer, swig_love_Timer_methods, swig_love_Timer_attributes, swig_love_Timer_bases };

static int _wrap_new_DisplayMode__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::DisplayMode *result = 0 ;
  
  result = (love::DisplayMode *)new love::DisplayMode();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__DisplayMode,1); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DisplayMode__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  bool arg5 ;
  int arg6 ;
  love::DisplayMode *result = 0 ;
  
  if(!lua_isnumber(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isboolean(L,4)) SWIG_fail_arg(4);
  if(!lua_isboolean(L,5)) SWIG_fail_arg(5);
  if(!lua_isnumber(L,6)) SWIG_fail_arg(6);
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (bool)lua_toboolean(L, 4);
  arg5 = (bool)lua_toboolean(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  result = (love::DisplayMode *)new love::DisplayMode(arg1,arg2,arg3,arg4,arg5,arg6);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__DisplayMode,1); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DisplayMode__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  bool arg5 ;
  love::DisplayMode *result = 0 ;
  
  if(!lua_isnumber(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isboolean(L,4)) SWIG_fail_arg(4);
  if(!lua_isboolean(L,5)) SWIG_fail_arg(5);
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (bool)lua_toboolean(L, 4);
  arg5 = (bool)lua_toboolean(L, 5);
  result = (love::DisplayMode *)new love::DisplayMode(arg1,arg2,arg3,arg4,arg5);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__DisplayMode,1); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DisplayMode__SWIG_3(lua_State* L) {
  int SWIG_arg = -1;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  love::DisplayMode *result = 0 ;
  
  if(!lua_isnumber(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isboolean(L,4)) SWIG_fail_arg(4);
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (bool)lua_toboolean(L, 4);
  result = (love::DisplayMode *)new love::DisplayMode(arg1,arg2,arg3,arg4);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__DisplayMode,1); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DisplayMode__SWIG_4(lua_State* L) {
  int SWIG_arg = -1;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  love::DisplayMode *result = 0 ;
  
  if(!lua_isnumber(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (love::DisplayMode *)new love::DisplayMode(arg1,arg2,arg3);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__DisplayMode,1); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DisplayMode__SWIG_5(lua_State* L) {
  int SWIG_arg = -1;
  int arg1 ;
  int arg2 ;
  love::DisplayMode *result = 0 ;
  
  if(!lua_isnumber(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (love::DisplayMode *)new love::DisplayMode(arg1,arg2);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__DisplayMode,1); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DisplayMode(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_DisplayMode__SWIG_0(L);
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_DisplayMode__SWIG_5(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_DisplayMode__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_DisplayMode__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_DisplayMode__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_DisplayMode__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'new_DisplayMode'");
  lua_error(L);return 0;
}


static int _wrap_delete_DisplayMode(lua_State* L) {
  int SWIG_arg = -1;
  love::DisplayMode *arg1 = (love::DisplayMode *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::DisplayMode *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__DisplayMode,0,1,"delete_DisplayMode");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DisplayMode_resize(lua_State* L) {
  int SWIG_arg = -1;
  love::DisplayMode *arg1 = (love::DisplayMode *) 0 ;
  int arg2 ;
  int arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::DisplayMode *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__DisplayMode,0,1,"DisplayMode_resize");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->resize(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DisplayMode_getWidth(lua_State* L) {
  int SWIG_arg = -1;
  love::DisplayMode *arg1 = (love::DisplayMode *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::DisplayMode *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__DisplayMode,0,1,"DisplayMode_getWidth");
  result = (int)((love::DisplayMode const *)arg1)->getWidth();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DisplayMode_getHeight(lua_State* L) {
  int SWIG_arg = -1;
  love::DisplayMode *arg1 = (love::DisplayMode *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::DisplayMode *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__DisplayMode,0,1,"DisplayMode_getHeight");
  result = (int)((love::DisplayMode const *)arg1)->getHeight();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DisplayMode_getColorDepth(lua_State* L) {
  int SWIG_arg = -1;
  love::DisplayMode *arg1 = (love::DisplayMode *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::DisplayMode *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__DisplayMode,0,1,"DisplayMode_getColorDepth");
  result = (int)((love::DisplayMode const *)arg1)->getColorDepth();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DisplayMode_isFullscreen(lua_State* L) {
  int SWIG_arg = -1;
  love::DisplayMode *arg1 = (love::DisplayMode *) 0 ;
  bool result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::DisplayMode *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__DisplayMode,0,1,"DisplayMode_isFullscreen");
  result = (bool)((love::DisplayMode const *)arg1)->isFullscreen();
  SWIG_arg=0;
  lua_pushboolean(L,(int)result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DisplayMode_isVsync(lua_State* L) {
  int SWIG_arg = -1;
  love::DisplayMode *arg1 = (love::DisplayMode *) 0 ;
  bool result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::DisplayMode *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__DisplayMode,0,1,"DisplayMode_isVsync");
  result = (bool)((love::DisplayMode const *)arg1)->isVsync();
  SWIG_arg=0;
  lua_pushboolean(L,(int)result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DisplayMode_getFSAA(lua_State* L) {
  int SWIG_arg = -1;
  love::DisplayMode *arg1 = (love::DisplayMode *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::DisplayMode *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__DisplayMode,0,1,"DisplayMode_getFSAA");
  result = (int)((love::DisplayMode const *)arg1)->getFSAA();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DisplayMode_equals(lua_State* L) {
  int SWIG_arg = -1;
  love::DisplayMode *arg1 = (love::DisplayMode *) 0 ;
  love::DisplayMode *arg2 = 0 ;
  bool result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::DisplayMode *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__DisplayMode,0,1,"DisplayMode_equals");
  arg2=(love::DisplayMode *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_love__DisplayMode,0,2,"DisplayMode_equals");
  result = (bool)((love::DisplayMode const *)arg1)->equals((love::DisplayMode const &)*arg2);
  SWIG_arg=0;
  lua_pushboolean(L,(int)result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DisplayMode(void *obj) {
love::DisplayMode *arg1 = (love::DisplayMode *) obj;
delete arg1;
}
static swig_lua_method swig_love_DisplayMode_methods[] = {
    {"resize", _wrap_DisplayMode_resize}, 
    {"getWidth", _wrap_DisplayMode_getWidth}, 
    {"getHeight", _wrap_DisplayMode_getHeight}, 
    {"getColorDepth", _wrap_DisplayMode_getColorDepth}, 
    {"isFullscreen", _wrap_DisplayMode_isFullscreen}, 
    {"isVsync", _wrap_DisplayMode_isVsync}, 
    {"getFSAA", _wrap_DisplayMode_getFSAA}, 
    {"equals", _wrap_DisplayMode_equals}, 
    {0,0}
};
static swig_lua_attribute swig_love_DisplayMode_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_love_DisplayMode_bases[] = {&_wrap_class_love_Object,0};
swig_lua_class _wrap_class_love_DisplayMode = { "DisplayMode", &SWIGTYPE_p_love__DisplayMode,_wrap_new_DisplayMode, swig_delete_DisplayMode, swig_love_DisplayMode_methods, swig_love_DisplayMode_attributes, swig_love_DisplayMode_bases };

static int _wrap_new_LuaGL(lua_State* L) {
  int SWIG_arg = -1;
  love::LuaGL *result = 0 ;
  
  result = (love::LuaGL *)new love::LuaGL();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__LuaGL,1); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_LuaGL(lua_State* L) {
  int SWIG_arg = -1;
  love::LuaGL *arg1 = (love::LuaGL *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::LuaGL *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__LuaGL,0,1,"delete_LuaGL");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaGL_translate(lua_State* L) {
  int SWIG_arg = -1;
  love::LuaGL *arg1 = (love::LuaGL *) 0 ;
  float arg2 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::LuaGL *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__LuaGL,0,1,"LuaGL_translate");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->translate(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaGL_rotate__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::LuaGL *arg1 = (love::LuaGL *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::LuaGL *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__LuaGL,0,1,"LuaGL_rotate");
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->rotate(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaGL_rotate__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::LuaGL *arg1 = (love::LuaGL *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  arg1=(love::LuaGL *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__LuaGL,0,1,"LuaGL_rotate");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  (arg1)->rotate(arg2,arg3,arg4,arg5);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaGL_rotate(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__LuaGL, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_LuaGL_rotate__SWIG_0(L);
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__LuaGL, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_LuaGL_rotate__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'LuaGL_rotate'");
  lua_error(L);return 0;
}


static int _wrap_LuaGL_scale(lua_State* L) {
  int SWIG_arg = -1;
  love::LuaGL *arg1 = (love::LuaGL *) 0 ;
  float arg2 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::LuaGL *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__LuaGL,0,1,"LuaGL_scale");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->scale(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaGL_loadIdentity(lua_State* L) {
  int SWIG_arg = -1;
  love::LuaGL *arg1 = (love::LuaGL *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::LuaGL *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__LuaGL,0,1,"LuaGL_loadIdentity");
  (arg1)->loadIdentity();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaGL_pushMatrix(lua_State* L) {
  int SWIG_arg = -1;
  love::LuaGL *arg1 = (love::LuaGL *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::LuaGL *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__LuaGL,0,1,"LuaGL_pushMatrix");
  (arg1)->pushMatrix();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaGL_popMatrix(lua_State* L) {
  int SWIG_arg = -1;
  love::LuaGL *arg1 = (love::LuaGL *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::LuaGL *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__LuaGL,0,1,"LuaGL_popMatrix");
  (arg1)->popMatrix();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaGL_begin(lua_State* L) {
  int SWIG_arg = -1;
  love::LuaGL *arg1 = (love::LuaGL *) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(love::LuaGL *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__LuaGL,0,1,"LuaGL_begin");
  arg2 = (char*)lua_tostring(L, 2);
  (arg1)->begin((char const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaGL_finish(lua_State* L) {
  int SWIG_arg = -1;
  love::LuaGL *arg1 = (love::LuaGL *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::LuaGL *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__LuaGL,0,1,"LuaGL_finish");
  (arg1)->finish();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaGL_vertex(lua_State* L) {
  int SWIG_arg = -1;
  love::LuaGL *arg1 = (love::LuaGL *) 0 ;
  float arg2 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::LuaGL *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__LuaGL,0,1,"LuaGL_vertex");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->vertex(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaGL_texCoord(lua_State* L) {
  int SWIG_arg = -1;
  love::LuaGL *arg1 = (love::LuaGL *) 0 ;
  float arg2 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::LuaGL *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__LuaGL,0,1,"LuaGL_texCoord");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->texCoord(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaGL_color__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::LuaGL *arg1 = (love::LuaGL *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  arg1=(love::LuaGL *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__LuaGL,0,1,"LuaGL_color");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  (arg1)->color(arg2,arg3,arg4,arg5);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaGL_color__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::LuaGL *arg1 = (love::LuaGL *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(love::LuaGL *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__LuaGL,0,1,"LuaGL_color");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->color(arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaGL_color__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  love::LuaGL *arg1 = (love::LuaGL *) 0 ;
  Color *arg2 = (Color *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::LuaGL *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__LuaGL,0,1,"LuaGL_color");
  arg2=(Color *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_Color,0,2,"LuaGL_color");
  (arg1)->color(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaGL_color(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__LuaGL, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Color, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LuaGL_color__SWIG_2(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__LuaGL, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_LuaGL_color__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__LuaGL, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_LuaGL_color__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'LuaGL_color'");
  lua_error(L);return 0;
}


static int _wrap_LuaGL_enable(lua_State* L) {
  int SWIG_arg = -1;
  love::LuaGL *arg1 = (love::LuaGL *) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(love::LuaGL *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__LuaGL,0,1,"LuaGL_enable");
  arg2 = (char*)lua_tostring(L, 2);
  (arg1)->enable((char const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaGL_disable(lua_State* L) {
  int SWIG_arg = -1;
  love::LuaGL *arg1 = (love::LuaGL *) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(love::LuaGL *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__LuaGL,0,1,"LuaGL_disable");
  arg2 = (char*)lua_tostring(L, 2);
  (arg1)->disable((char const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaGL_hint(lua_State* L) {
  int SWIG_arg = -1;
  love::LuaGL *arg1 = (love::LuaGL *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isstring(L,3)) SWIG_fail_arg(3);
  arg1=(love::LuaGL *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__LuaGL,0,1,"LuaGL_hint");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (char*)lua_tostring(L, 3);
  (arg1)->hint((char const *)arg2,(char const *)arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaGL_shadeModel(lua_State* L) {
  int SWIG_arg = -1;
  love::LuaGL *arg1 = (love::LuaGL *) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(love::LuaGL *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__LuaGL,0,1,"LuaGL_shadeModel");
  arg2 = (char*)lua_tostring(L, 2);
  (arg1)->shadeModel((char const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaGL_blendFunc(lua_State* L) {
  int SWIG_arg = -1;
  love::LuaGL *arg1 = (love::LuaGL *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isstring(L,3)) SWIG_fail_arg(3);
  arg1=(love::LuaGL *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__LuaGL,0,1,"LuaGL_blendFunc");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (char*)lua_tostring(L, 3);
  (arg1)->blendFunc((char const *)arg2,(char const *)arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaGL_blendFuncNormal(lua_State* L) {
  int SWIG_arg = -1;
  love::LuaGL *arg1 = (love::LuaGL *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::LuaGL *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__LuaGL,0,1,"LuaGL_blendFuncNormal");
  (arg1)->blendFuncNormal();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaGL_blendFuncAdditive(lua_State* L) {
  int SWIG_arg = -1;
  love::LuaGL *arg1 = (love::LuaGL *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::LuaGL *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__LuaGL,0,1,"LuaGL_blendFuncAdditive");
  (arg1)->blendFuncAdditive();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaGL_alphaFunc(lua_State* L) {
  int SWIG_arg = -1;
  love::LuaGL *arg1 = (love::LuaGL *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::LuaGL *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__LuaGL,0,1,"LuaGL_alphaFunc");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->alphaFunc((char const *)arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaGL_clear(lua_State* L) {
  int SWIG_arg = -1;
  love::LuaGL *arg1 = (love::LuaGL *) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(love::LuaGL *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__LuaGL,0,1,"LuaGL_clear");
  arg2 = (char*)lua_tostring(L, 2);
  (arg1)->clear((char const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LuaGL(void *obj) {
love::LuaGL *arg1 = (love::LuaGL *) obj;
delete arg1;
}
static swig_lua_method swig_love_LuaGL_methods[] = {
    {"translate", _wrap_LuaGL_translate}, 
    {"rotate", _wrap_LuaGL_rotate}, 
    {"scale", _wrap_LuaGL_scale}, 
    {"loadIdentity", _wrap_LuaGL_loadIdentity}, 
    {"pushMatrix", _wrap_LuaGL_pushMatrix}, 
    {"popMatrix", _wrap_LuaGL_popMatrix}, 
    {"begin", _wrap_LuaGL_begin}, 
    {"finish", _wrap_LuaGL_finish}, 
    {"vertex", _wrap_LuaGL_vertex}, 
    {"texCoord", _wrap_LuaGL_texCoord}, 
    {"color", _wrap_LuaGL_color}, 
    {"enable", _wrap_LuaGL_enable}, 
    {"disable", _wrap_LuaGL_disable}, 
    {"hint", _wrap_LuaGL_hint}, 
    {"shadeModel", _wrap_LuaGL_shadeModel}, 
    {"blendFunc", _wrap_LuaGL_blendFunc}, 
    {"blendFuncNormal", _wrap_LuaGL_blendFuncNormal}, 
    {"blendFuncAdditive", _wrap_LuaGL_blendFuncAdditive}, 
    {"alphaFunc", _wrap_LuaGL_alphaFunc}, 
    {"clear", _wrap_LuaGL_clear}, 
    {0,0}
};
static swig_lua_attribute swig_love_LuaGL_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_love_LuaGL_bases[] = {&_wrap_class_love_Object,0};
swig_lua_class _wrap_class_love_LuaGL = { "LuaGL", &SWIGTYPE_p_love__LuaGL,_wrap_new_LuaGL, swig_delete_LuaGL, swig_love_LuaGL_methods, swig_love_LuaGL_attributes, swig_love_LuaGL_bases };

static int _wrap_new_LuaGame(lua_State* L) {
  int SWIG_arg = -1;
  string *arg1 = 0 ;
  love::LuaGame *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(string *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_string,0,1,"new_LuaGame");
  result = (love::LuaGame *)new love::LuaGame((string const &)*arg1);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__LuaGame,1); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_LuaGame(lua_State* L) {
  int SWIG_arg = -1;
  love::LuaGame *arg1 = (love::LuaGame *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::LuaGame *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__LuaGame,0,1,"delete_LuaGame");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaGame_init(lua_State* L) {
  int SWIG_arg = -1;
  love::LuaGame *arg1 = (love::LuaGame *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::LuaGame *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__LuaGame,0,1,"LuaGame_init");
  result = (int)(arg1)->init();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaGame_load(lua_State* L) {
  int SWIG_arg = -1;
  love::LuaGame *arg1 = (love::LuaGame *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::LuaGame *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__LuaGame,0,1,"LuaGame_load");
  result = (int)(arg1)->load();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaGame_unload(lua_State* L) {
  int SWIG_arg = -1;
  love::LuaGame *arg1 = (love::LuaGame *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::LuaGame *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__LuaGame,0,1,"LuaGame_unload");
  (arg1)->unload();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaGame_render(lua_State* L) {
  int SWIG_arg = -1;
  love::LuaGame *arg1 = (love::LuaGame *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::LuaGame *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__LuaGame,0,1,"LuaGame_render");
  (arg1)->render();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaGame_update(lua_State* L) {
  int SWIG_arg = -1;
  love::LuaGame *arg1 = (love::LuaGame *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::LuaGame *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__LuaGame,0,1,"LuaGame_update");
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->update(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaGame_suspend(lua_State* L) {
  int SWIG_arg = -1;
  love::LuaGame *arg1 = (love::LuaGame *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::LuaGame *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__LuaGame,0,1,"LuaGame_suspend");
  (arg1)->suspend();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaGame_resume(lua_State* L) {
  int SWIG_arg = -1;
  love::LuaGame *arg1 = (love::LuaGame *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::LuaGame *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__LuaGame,0,1,"LuaGame_resume");
  (arg1)->resume();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaGame_reloadGraphics(lua_State* L) {
  int SWIG_arg = -1;
  love::LuaGame *arg1 = (love::LuaGame *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::LuaGame *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__LuaGame,0,1,"LuaGame_reloadGraphics");
  (arg1)->reloadGraphics();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaGame_keyPressed(lua_State* L) {
  int SWIG_arg = -1;
  love::LuaGame *arg1 = (love::LuaGame *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::LuaGame *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__LuaGame,0,1,"LuaGame_keyPressed");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->keyPressed(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaGame_keyReleased(lua_State* L) {
  int SWIG_arg = -1;
  love::LuaGame *arg1 = (love::LuaGame *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::LuaGame *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__LuaGame,0,1,"LuaGame_keyReleased");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->keyReleased(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaGame_mousePressed(lua_State* L) {
  int SWIG_arg = -1;
  love::LuaGame *arg1 = (love::LuaGame *) 0 ;
  float arg2 ;
  float arg3 ;
  int arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(love::LuaGame *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__LuaGame,0,1,"LuaGame_mousePressed");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->mousePressed(arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaGame_mouseReleased(lua_State* L) {
  int SWIG_arg = -1;
  love::LuaGame *arg1 = (love::LuaGame *) 0 ;
  float arg2 ;
  float arg3 ;
  int arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(love::LuaGame *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__LuaGame,0,1,"LuaGame_mouseReleased");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->mouseReleased(arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaGame_eventFired(lua_State* L) {
  int SWIG_arg = -1;
  love::LuaGame *arg1 = (love::LuaGame *) 0 ;
  pEvent arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::LuaGame *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__LuaGame,0,1,"LuaGame_eventFired");
  {
    pEvent * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_pEvent,0)) SWIG_fail;
    arg2 = *argp;
  }
  (arg1)->eventFired(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaGame_include(lua_State* L) {
  int SWIG_arg = -1;
  love::LuaGame *arg1 = (love::LuaGame *) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(love::LuaGame *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__LuaGame,0,1,"LuaGame_include");
  arg2 = (char*)lua_tostring(L, 2);
  (arg1)->include((char const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LuaGame(void *obj) {
love::LuaGame *arg1 = (love::LuaGame *) obj;
delete arg1;
}
static swig_lua_method swig_love_LuaGame_methods[] = {
    {"init", _wrap_LuaGame_init}, 
    {"load", _wrap_LuaGame_load}, 
    {"unload", _wrap_LuaGame_unload}, 
    {"render", _wrap_LuaGame_render}, 
    {"update", _wrap_LuaGame_update}, 
    {"suspend", _wrap_LuaGame_suspend}, 
    {"resume", _wrap_LuaGame_resume}, 
    {"reloadGraphics", _wrap_LuaGame_reloadGraphics}, 
    {"keyPressed", _wrap_LuaGame_keyPressed}, 
    {"keyReleased", _wrap_LuaGame_keyReleased}, 
    {"mousePressed", _wrap_LuaGame_mousePressed}, 
    {"mouseReleased", _wrap_LuaGame_mouseReleased}, 
    {"eventFired", _wrap_LuaGame_eventFired}, 
    {"include", _wrap_LuaGame_include}, 
    {0,0}
};
static swig_lua_attribute swig_love_LuaGame_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_love_LuaGame_bases[] = {0};
swig_lua_class _wrap_class_love_LuaGame = { "LuaGame", &SWIGTYPE_p_love__LuaGame,_wrap_new_LuaGame, swig_delete_LuaGame, swig_love_LuaGame_methods, swig_love_LuaGame_attributes, swig_love_LuaGame_bases };

static int _wrap_delete_AbstractDisplay(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractDisplay *arg1 = (love::AbstractDisplay *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractDisplay *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractDisplay,0,1,"delete_AbstractDisplay");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractDisplay_getCurrentDisplayMode(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractDisplay *arg1 = (love::AbstractDisplay *) 0 ;
  love::DisplayMode *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractDisplay *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractDisplay,0,1,"AbstractDisplay_getCurrentDisplayMode");
  {
    love::DisplayMode const &_result_ref = ((love::AbstractDisplay const *)arg1)->getCurrentDisplayMode();
    result = (love::DisplayMode *) &_result_ref;
  }
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__DisplayMode,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractDisplay_isSupported(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractDisplay *arg1 = (love::AbstractDisplay *) 0 ;
  love::DisplayMode arg2 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractDisplay *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractDisplay,0,1,"AbstractDisplay_isSupported");
  {
    love::DisplayMode * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_love__DisplayMode,0)) SWIG_fail;
    arg2 = *argp;
  }
  result = (int)(arg1)->isSupported(arg2);
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractDisplay_tryChange(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractDisplay *arg1 = (love::AbstractDisplay *) 0 ;
  love::DisplayMode arg2 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractDisplay *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractDisplay,0,1,"AbstractDisplay_tryChange");
  {
    love::DisplayMode * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_love__DisplayMode,0)) SWIG_fail;
    arg2 = *argp;
  }
  result = (int)(arg1)->tryChange(arg2);
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractDisplay_tryResize(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractDisplay *arg1 = (love::AbstractDisplay *) 0 ;
  love::DisplayMode arg2 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractDisplay *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractDisplay,0,1,"AbstractDisplay_tryResize");
  {
    love::DisplayMode * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_love__DisplayMode,0)) SWIG_fail;
    arg2 = *argp;
  }
  result = (int)(arg1)->tryResize(arg2);
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractDisplay_toggleVSync(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractDisplay *arg1 = (love::AbstractDisplay *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractDisplay *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractDisplay,0,1,"AbstractDisplay_toggleVSync");
  result = (int)(arg1)->toggleVSync();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractDisplay_toggleFullscreen(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractDisplay *arg1 = (love::AbstractDisplay *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractDisplay *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractDisplay,0,1,"AbstractDisplay_toggleFullscreen");
  result = (int)(arg1)->toggleFullscreen();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractDisplay_getGraphics(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractDisplay *arg1 = (love::AbstractDisplay *) 0 ;
  love::AbstractGraphics *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractDisplay *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractDisplay,0,1,"AbstractDisplay_getGraphics");
  result = (love::AbstractGraphics *)((love::AbstractDisplay const *)arg1)->getGraphics();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__AbstractGraphics,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractDisplay_getWidth(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractDisplay *arg1 = (love::AbstractDisplay *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractDisplay *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractDisplay,0,1,"AbstractDisplay_getWidth");
  result = (int)((love::AbstractDisplay const *)arg1)->getWidth();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractDisplay_getHeight(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractDisplay *arg1 = (love::AbstractDisplay *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractDisplay *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractDisplay,0,1,"AbstractDisplay_getHeight");
  result = (int)((love::AbstractDisplay const *)arg1)->getHeight();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AbstractDisplay(void *obj) {
love::AbstractDisplay *arg1 = (love::AbstractDisplay *) obj;
delete arg1;
}
static swig_lua_method swig_love_AbstractDisplay_methods[] = {
    {"getCurrentDisplayMode", _wrap_AbstractDisplay_getCurrentDisplayMode}, 
    {"isSupported", _wrap_AbstractDisplay_isSupported}, 
    {"tryChange", _wrap_AbstractDisplay_tryChange}, 
    {"tryResize", _wrap_AbstractDisplay_tryResize}, 
    {"toggleVSync", _wrap_AbstractDisplay_toggleVSync}, 
    {"toggleFullscreen", _wrap_AbstractDisplay_toggleFullscreen}, 
    {"getGraphics", _wrap_AbstractDisplay_getGraphics}, 
    {"getWidth", _wrap_AbstractDisplay_getWidth}, 
    {"getHeight", _wrap_AbstractDisplay_getHeight}, 
    {0,0}
};
static swig_lua_attribute swig_love_AbstractDisplay_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_love_AbstractDisplay_bases[] = {0};
swig_lua_class _wrap_class_love_AbstractDisplay = { "AbstractDisplay", &SWIGTYPE_p_love__AbstractDisplay,0, swig_delete_AbstractDisplay, swig_love_AbstractDisplay_methods, swig_love_AbstractDisplay_attributes, swig_love_AbstractDisplay_bases };

static int _wrap_delete_AbstractGraphics(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGraphics *arg1 = (love::AbstractGraphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractGraphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGraphics,0,1,"delete_AbstractGraphics");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGraphics_setColor__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGraphics *arg1 = (love::AbstractGraphics *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  arg1=(love::AbstractGraphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGraphics,0,1,"AbstractGraphics_setColor");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  (arg1)->setColor(arg2,arg3,arg4,arg5);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGraphics_setColor__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGraphics *arg1 = (love::AbstractGraphics *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(love::AbstractGraphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGraphics,0,1,"AbstractGraphics_setColor");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->setColor(arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGraphics_setColor__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGraphics *arg1 = (love::AbstractGraphics *) 0 ;
  int arg2 ;
  int arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::AbstractGraphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGraphics,0,1,"AbstractGraphics_setColor");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->setColor(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGraphics_setColor__SWIG_3(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGraphics *arg1 = (love::AbstractGraphics *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractGraphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGraphics,0,1,"AbstractGraphics_setColor");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setColor(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGraphics_setBackgroundColor__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGraphics *arg1 = (love::AbstractGraphics *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(love::AbstractGraphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGraphics,0,1,"AbstractGraphics_setBackgroundColor");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->setBackgroundColor(arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGraphics_setBackgroundColor__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGraphics *arg1 = (love::AbstractGraphics *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractGraphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGraphics,0,1,"AbstractGraphics_setBackgroundColor");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setBackgroundColor(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGraphics_getColor(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGraphics *arg1 = (love::AbstractGraphics *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractGraphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGraphics,0,1,"AbstractGraphics_getColor");
  result = (arg1)->getColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGraphics_getBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGraphics *arg1 = (love::AbstractGraphics *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractGraphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGraphics,0,1,"AbstractGraphics_getBackgroundColor");
  result = (arg1)->getBackgroundColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGraphics_getFont(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGraphics *arg1 = (love::AbstractGraphics *) 0 ;
  love::pAbstractFont result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractGraphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGraphics,0,1,"AbstractGraphics_getFont");
  result = (arg1)->getFont();
  SWIG_arg=0;
  {
    love::pAbstractFont * resultptr;
    resultptr = new love::pAbstractFont((love::pAbstractFont &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractFont_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGraphics_translate(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGraphics *arg1 = (love::AbstractGraphics *) 0 ;
  float arg2 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::AbstractGraphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGraphics,0,1,"AbstractGraphics_translate");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  ((love::AbstractGraphics const *)arg1)->translate(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGraphics_rotate(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGraphics *arg1 = (love::AbstractGraphics *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractGraphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGraphics,0,1,"AbstractGraphics_rotate");
  arg2 = (float)lua_tonumber(L, 2);
  ((love::AbstractGraphics const *)arg1)->rotate(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGraphics_scale__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGraphics *arg1 = (love::AbstractGraphics *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractGraphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGraphics,0,1,"AbstractGraphics_scale");
  arg2 = (float)lua_tonumber(L, 2);
  ((love::AbstractGraphics const *)arg1)->scale(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGraphics_scale__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGraphics *arg1 = (love::AbstractGraphics *) 0 ;
  float arg2 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::AbstractGraphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGraphics,0,1,"AbstractGraphics_scale");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  ((love::AbstractGraphics const *)arg1)->scale(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGraphics_scale(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractGraphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AbstractGraphics_scale__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractGraphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_AbstractGraphics_scale__SWIG_1(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'AbstractGraphics_scale'");
  lua_error(L);return 0;
}


static int _wrap_AbstractGraphics_drawLine__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGraphics *arg1 = (love::AbstractGraphics *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  if(!lua_isnumber(L,6)) SWIG_fail_arg(6);
  if(!lua_isnumber(L,7)) SWIG_fail_arg(7);
  arg1=(love::AbstractGraphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGraphics,0,1,"AbstractGraphics_drawLine");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  ((love::AbstractGraphics const *)arg1)->drawLine(arg2,arg3,arg4,arg5,arg6,arg7);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGraphics_drawLine__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGraphics *arg1 = (love::AbstractGraphics *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  if(!lua_isnumber(L,6)) SWIG_fail_arg(6);
  arg1=(love::AbstractGraphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGraphics,0,1,"AbstractGraphics_drawLine");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  ((love::AbstractGraphics const *)arg1)->drawLine(arg2,arg3,arg4,arg5,arg6);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGraphics_drawLine__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGraphics *arg1 = (love::AbstractGraphics *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  arg1=(love::AbstractGraphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGraphics,0,1,"AbstractGraphics_drawLine");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  ((love::AbstractGraphics const *)arg1)->drawLine(arg2,arg3,arg4,arg5);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGraphics_drawLine(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractGraphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_AbstractGraphics_drawLine__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractGraphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_AbstractGraphics_drawLine__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractGraphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_AbstractGraphics_drawLine__SWIG_0(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'AbstractGraphics_drawLine'");
  lua_error(L);return 0;
}


static int _wrap_AbstractGraphics_drawTriangle__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGraphics *arg1 = (love::AbstractGraphics *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  if(!lua_isnumber(L,6)) SWIG_fail_arg(6);
  if(!lua_isnumber(L,7)) SWIG_fail_arg(7);
  arg1=(love::AbstractGraphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGraphics,0,1,"AbstractGraphics_drawTriangle");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  ((love::AbstractGraphics const *)arg1)->drawTriangle(arg2,arg3,arg4,arg5,arg6,arg7);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGraphics_drawTriangle__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGraphics *arg1 = (love::AbstractGraphics *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  if(!lua_isnumber(L,6)) SWIG_fail_arg(6);
  arg1=(love::AbstractGraphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGraphics,0,1,"AbstractGraphics_drawTriangle");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  ((love::AbstractGraphics const *)arg1)->drawTriangle(arg2,arg3,arg4,arg5,arg6);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGraphics_drawTriangle__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGraphics *arg1 = (love::AbstractGraphics *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  arg1=(love::AbstractGraphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGraphics,0,1,"AbstractGraphics_drawTriangle");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  ((love::AbstractGraphics const *)arg1)->drawTriangle(arg2,arg3,arg4,arg5);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGraphics_drawTriangle(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractGraphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_AbstractGraphics_drawTriangle__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractGraphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_AbstractGraphics_drawTriangle__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractGraphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_AbstractGraphics_drawTriangle__SWIG_0(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'AbstractGraphics_drawTriangle'");
  lua_error(L);return 0;
}


static int _wrap_AbstractGraphics_fillTriangle__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGraphics *arg1 = (love::AbstractGraphics *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  if(!lua_isnumber(L,6)) SWIG_fail_arg(6);
  arg1=(love::AbstractGraphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGraphics,0,1,"AbstractGraphics_fillTriangle");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  ((love::AbstractGraphics const *)arg1)->fillTriangle(arg2,arg3,arg4,arg5,arg6);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGraphics_fillTriangle__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGraphics *arg1 = (love::AbstractGraphics *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  arg1=(love::AbstractGraphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGraphics,0,1,"AbstractGraphics_fillTriangle");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  ((love::AbstractGraphics const *)arg1)->fillTriangle(arg2,arg3,arg4,arg5);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGraphics_fillTriangle(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractGraphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_AbstractGraphics_fillTriangle__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractGraphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_AbstractGraphics_fillTriangle__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'AbstractGraphics_fillTriangle'");
  lua_error(L);return 0;
}


static int _wrap_AbstractGraphics_drawRectangle__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGraphics *arg1 = (love::AbstractGraphics *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  if(!lua_isnumber(L,6)) SWIG_fail_arg(6);
  if(!lua_isnumber(L,7)) SWIG_fail_arg(7);
  arg1=(love::AbstractGraphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGraphics,0,1,"AbstractGraphics_drawRectangle");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  ((love::AbstractGraphics const *)arg1)->drawRectangle(arg2,arg3,arg4,arg5,arg6,arg7);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGraphics_drawRectangle__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGraphics *arg1 = (love::AbstractGraphics *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  if(!lua_isnumber(L,6)) SWIG_fail_arg(6);
  arg1=(love::AbstractGraphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGraphics,0,1,"AbstractGraphics_drawRectangle");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  ((love::AbstractGraphics const *)arg1)->drawRectangle(arg2,arg3,arg4,arg5,arg6);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGraphics_drawRectangle__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGraphics *arg1 = (love::AbstractGraphics *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  arg1=(love::AbstractGraphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGraphics,0,1,"AbstractGraphics_drawRectangle");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  ((love::AbstractGraphics const *)arg1)->drawRectangle(arg2,arg3,arg4,arg5);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGraphics_drawRectangle(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractGraphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_AbstractGraphics_drawRectangle__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractGraphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_AbstractGraphics_drawRectangle__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractGraphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_AbstractGraphics_drawRectangle__SWIG_0(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'AbstractGraphics_drawRectangle'");
  lua_error(L);return 0;
}


static int _wrap_AbstractGraphics_fillRectangle__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGraphics *arg1 = (love::AbstractGraphics *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  if(!lua_isnumber(L,6)) SWIG_fail_arg(6);
  arg1=(love::AbstractGraphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGraphics,0,1,"AbstractGraphics_fillRectangle");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  ((love::AbstractGraphics const *)arg1)->fillRectangle(arg2,arg3,arg4,arg5,arg6);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGraphics_fillRectangle__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGraphics *arg1 = (love::AbstractGraphics *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  arg1=(love::AbstractGraphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGraphics,0,1,"AbstractGraphics_fillRectangle");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  ((love::AbstractGraphics const *)arg1)->fillRectangle(arg2,arg3,arg4,arg5);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGraphics_fillRectangle(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractGraphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_AbstractGraphics_fillRectangle__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractGraphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_AbstractGraphics_fillRectangle__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'AbstractGraphics_fillRectangle'");
  lua_error(L);return 0;
}


static int _wrap_AbstractGraphics_drawCircle__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGraphics *arg1 = (love::AbstractGraphics *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  int arg5 ;
  float arg6 ;
  float arg7 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  if(!lua_isnumber(L,6)) SWIG_fail_arg(6);
  if(!lua_isnumber(L,7)) SWIG_fail_arg(7);
  arg1=(love::AbstractGraphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGraphics,0,1,"AbstractGraphics_drawCircle");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  ((love::AbstractGraphics const *)arg1)->drawCircle(arg2,arg3,arg4,arg5,arg6,arg7);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGraphics_drawCircle__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGraphics *arg1 = (love::AbstractGraphics *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  int arg5 ;
  float arg6 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  if(!lua_isnumber(L,6)) SWIG_fail_arg(6);
  arg1=(love::AbstractGraphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGraphics,0,1,"AbstractGraphics_drawCircle");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  ((love::AbstractGraphics const *)arg1)->drawCircle(arg2,arg3,arg4,arg5,arg6);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGraphics_drawCircle__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGraphics *arg1 = (love::AbstractGraphics *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  int arg5 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  arg1=(love::AbstractGraphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGraphics,0,1,"AbstractGraphics_drawCircle");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  ((love::AbstractGraphics const *)arg1)->drawCircle(arg2,arg3,arg4,arg5);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGraphics_drawCircle__SWIG_3(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGraphics *arg1 = (love::AbstractGraphics *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(love::AbstractGraphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGraphics,0,1,"AbstractGraphics_drawCircle");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  ((love::AbstractGraphics const *)arg1)->drawCircle(arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGraphics_drawCircle(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractGraphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_AbstractGraphics_drawCircle__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractGraphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_AbstractGraphics_drawCircle__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractGraphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_AbstractGraphics_drawCircle__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractGraphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_AbstractGraphics_drawCircle__SWIG_0(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'AbstractGraphics_drawCircle'");
  lua_error(L);return 0;
}


static int _wrap_AbstractGraphics_fillCircle__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGraphics *arg1 = (love::AbstractGraphics *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  int arg5 ;
  float arg6 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  if(!lua_isnumber(L,6)) SWIG_fail_arg(6);
  arg1=(love::AbstractGraphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGraphics,0,1,"AbstractGraphics_fillCircle");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  ((love::AbstractGraphics const *)arg1)->fillCircle(arg2,arg3,arg4,arg5,arg6);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGraphics_fillCircle__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGraphics *arg1 = (love::AbstractGraphics *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  int arg5 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  arg1=(love::AbstractGraphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGraphics,0,1,"AbstractGraphics_fillCircle");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  ((love::AbstractGraphics const *)arg1)->fillCircle(arg2,arg3,arg4,arg5);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGraphics_fillCircle__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGraphics *arg1 = (love::AbstractGraphics *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(love::AbstractGraphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGraphics,0,1,"AbstractGraphics_fillCircle");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  ((love::AbstractGraphics const *)arg1)->fillCircle(arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGraphics_fillCircle(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractGraphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_AbstractGraphics_fillCircle__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractGraphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_AbstractGraphics_fillCircle__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractGraphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_AbstractGraphics_fillCircle__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'AbstractGraphics_fillCircle'");
  lua_error(L);return 0;
}


static int _wrap_AbstractGraphics_identity(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGraphics *arg1 = (love::AbstractGraphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractGraphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGraphics,0,1,"AbstractGraphics_identity");
  ((love::AbstractGraphics const *)arg1)->identity();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGraphics_push(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGraphics *arg1 = (love::AbstractGraphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractGraphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGraphics,0,1,"AbstractGraphics_push");
  ((love::AbstractGraphics const *)arg1)->push();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGraphics_pop(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGraphics *arg1 = (love::AbstractGraphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractGraphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGraphics,0,1,"AbstractGraphics_pop");
  ((love::AbstractGraphics const *)arg1)->pop();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGraphics_clear(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGraphics *arg1 = (love::AbstractGraphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractGraphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGraphics,0,1,"AbstractGraphics_clear");
  ((love::AbstractGraphics const *)arg1)->clear();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGraphics_setColor__SWIG_4(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGraphics *arg1 = (love::AbstractGraphics *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractGraphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGraphics,0,1,"AbstractGraphics_setColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"AbstractGraphics_setColor");
  love_AbstractGraphics_setColor__SWIG_4(arg1,(boost::shared_ptr<love::AbstractColor > const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGraphics_setColor(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractGraphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AbstractGraphics_setColor__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractGraphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AbstractGraphics_setColor__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractGraphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_AbstractGraphics_setColor__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractGraphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_AbstractGraphics_setColor__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractGraphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_AbstractGraphics_setColor__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'AbstractGraphics_setColor'");
  lua_error(L);return 0;
}


static int _wrap_AbstractGraphics_setBackgroundColor__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGraphics *arg1 = (love::AbstractGraphics *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractGraphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGraphics,0,1,"AbstractGraphics_setBackgroundColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"AbstractGraphics_setBackgroundColor");
  love_AbstractGraphics_setBackgroundColor__SWIG_2(arg1,(boost::shared_ptr<love::AbstractColor > const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGraphics_setBackgroundColor(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractGraphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AbstractGraphics_setBackgroundColor__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractGraphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AbstractGraphics_setBackgroundColor__SWIG_1(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractGraphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_AbstractGraphics_setBackgroundColor__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'AbstractGraphics_setBackgroundColor'");
  lua_error(L);return 0;
}


static int _wrap_AbstractGraphics_setFont(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGraphics *arg1 = (love::AbstractGraphics *) 0 ;
  love::pAbstractFont *arg2 = (love::pAbstractFont *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractGraphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGraphics,0,1,"AbstractGraphics_setFont");
  arg2=(love::pAbstractFont *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractFont_t,0,2,"AbstractGraphics_setFont");
  love_AbstractGraphics_setFont(arg1,(boost::shared_ptr<love::AbstractFont > const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGraphics_draw__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGraphics *arg1 = (love::AbstractGraphics *) 0 ;
  pAbstractImage *arg2 = (pAbstractImage *) 0 ;
  float arg3 ;
  float arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(love::AbstractGraphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGraphics,0,1,"AbstractGraphics_draw");
  arg2=(pAbstractImage *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_pAbstractImage,0,2,"AbstractGraphics_draw");
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  love_AbstractGraphics_draw__SWIG_0((love::AbstractGraphics const *)arg1,(pAbstractImage const *)arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGraphics_draw__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGraphics *arg1 = (love::AbstractGraphics *) 0 ;
  pAbstractImage *arg2 = (pAbstractImage *) 0 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::AbstractGraphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGraphics,0,1,"AbstractGraphics_draw");
  arg2=(pAbstractImage *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_pAbstractImage,0,2,"AbstractGraphics_draw");
  arg3 = (float)lua_tonumber(L, 3);
  love_AbstractGraphics_draw__SWIG_0((love::AbstractGraphics const *)arg1,(pAbstractImage const *)arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGraphics_draw__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGraphics *arg1 = (love::AbstractGraphics *) 0 ;
  pAbstractImage *arg2 = (pAbstractImage *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractGraphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGraphics,0,1,"AbstractGraphics_draw");
  arg2=(pAbstractImage *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_pAbstractImage,0,2,"AbstractGraphics_draw");
  love_AbstractGraphics_draw__SWIG_0((love::AbstractGraphics const *)arg1,(pAbstractImage const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGraphics_draw__SWIG_3(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGraphics *arg1 = (love::AbstractGraphics *) 0 ;
  pAbstractImage *arg2 = (pAbstractImage *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  if(!lua_isnumber(L,6)) SWIG_fail_arg(6);
  arg1=(love::AbstractGraphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGraphics,0,1,"AbstractGraphics_draw");
  arg2=(pAbstractImage *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_pAbstractImage,0,2,"AbstractGraphics_draw");
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  love_AbstractGraphics_draw__SWIG_3((love::AbstractGraphics const *)arg1,(pAbstractImage const *)arg2,arg3,arg4,arg5,arg6);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGraphics_draw__SWIG_4(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGraphics *arg1 = (love::AbstractGraphics *) 0 ;
  love::pFrameAnimation *arg2 = (love::pFrameAnimation *) 0 ;
  float arg3 ;
  float arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(love::AbstractGraphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGraphics,0,1,"AbstractGraphics_draw");
  arg2=(love::pFrameAnimation *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__FrameAnimation_t,0,2,"AbstractGraphics_draw");
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  love_AbstractGraphics_draw__SWIG_4((love::AbstractGraphics const *)arg1,(boost::shared_ptr<love::FrameAnimation > const *)arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGraphics_draw__SWIG_5(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGraphics *arg1 = (love::AbstractGraphics *) 0 ;
  love::pFrameAnimation *arg2 = (love::pFrameAnimation *) 0 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::AbstractGraphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGraphics,0,1,"AbstractGraphics_draw");
  arg2=(love::pFrameAnimation *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__FrameAnimation_t,0,2,"AbstractGraphics_draw");
  arg3 = (float)lua_tonumber(L, 3);
  love_AbstractGraphics_draw__SWIG_4((love::AbstractGraphics const *)arg1,(boost::shared_ptr<love::FrameAnimation > const *)arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGraphics_draw__SWIG_6(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGraphics *arg1 = (love::AbstractGraphics *) 0 ;
  love::pFrameAnimation *arg2 = (love::pFrameAnimation *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractGraphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGraphics,0,1,"AbstractGraphics_draw");
  arg2=(love::pFrameAnimation *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__FrameAnimation_t,0,2,"AbstractGraphics_draw");
  love_AbstractGraphics_draw__SWIG_4((love::AbstractGraphics const *)arg1,(boost::shared_ptr<love::FrameAnimation > const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGraphics_draw__SWIG_7(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGraphics *arg1 = (love::AbstractGraphics *) 0 ;
  love::pFrameAnimation *arg2 = (love::pFrameAnimation *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  if(!lua_isnumber(L,6)) SWIG_fail_arg(6);
  arg1=(love::AbstractGraphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGraphics,0,1,"AbstractGraphics_draw");
  arg2=(love::pFrameAnimation *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__FrameAnimation_t,0,2,"AbstractGraphics_draw");
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  love_AbstractGraphics_draw__SWIG_7((love::AbstractGraphics const *)arg1,(boost::shared_ptr<love::FrameAnimation > const *)arg2,arg3,arg4,arg5,arg6);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGraphics_draw__SWIG_8(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGraphics *arg1 = (love::AbstractGraphics *) 0 ;
  love::pParticleSystem *arg2 = (love::pParticleSystem *) 0 ;
  float arg3 ;
  float arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(love::AbstractGraphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGraphics,0,1,"AbstractGraphics_draw");
  arg2=(love::pParticleSystem *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,2,"AbstractGraphics_draw");
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  love_AbstractGraphics_draw__SWIG_8((love::AbstractGraphics const *)arg1,(boost::shared_ptr<love::ParticleSystem > const *)arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGraphics_draw__SWIG_9(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGraphics *arg1 = (love::AbstractGraphics *) 0 ;
  love::pParticleSystem *arg2 = (love::pParticleSystem *) 0 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::AbstractGraphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGraphics,0,1,"AbstractGraphics_draw");
  arg2=(love::pParticleSystem *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,2,"AbstractGraphics_draw");
  arg3 = (float)lua_tonumber(L, 3);
  love_AbstractGraphics_draw__SWIG_8((love::AbstractGraphics const *)arg1,(boost::shared_ptr<love::ParticleSystem > const *)arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGraphics_draw__SWIG_10(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGraphics *arg1 = (love::AbstractGraphics *) 0 ;
  love::pParticleSystem *arg2 = (love::pParticleSystem *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractGraphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGraphics,0,1,"AbstractGraphics_draw");
  arg2=(love::pParticleSystem *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,2,"AbstractGraphics_draw");
  love_AbstractGraphics_draw__SWIG_8((love::AbstractGraphics const *)arg1,(boost::shared_ptr<love::ParticleSystem > const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGraphics_draw__SWIG_11(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGraphics *arg1 = (love::AbstractGraphics *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  int arg6 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  if(!lua_isnumber(L,6)) SWIG_fail_arg(6);
  arg1=(love::AbstractGraphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGraphics,0,1,"AbstractGraphics_draw");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  love_AbstractGraphics_draw__SWIG_11((love::AbstractGraphics const *)arg1,(char const *)arg2,arg3,arg4,arg5,arg6);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGraphics_draw__SWIG_12(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGraphics *arg1 = (love::AbstractGraphics *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  arg1=(love::AbstractGraphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGraphics,0,1,"AbstractGraphics_draw");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  love_AbstractGraphics_draw__SWIG_11((love::AbstractGraphics const *)arg1,(char const *)arg2,arg3,arg4,arg5);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGraphics_draw__SWIG_13(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGraphics *arg1 = (love::AbstractGraphics *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  float arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(love::AbstractGraphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGraphics,0,1,"AbstractGraphics_draw");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  love_AbstractGraphics_draw__SWIG_11((love::AbstractGraphics const *)arg1,(char const *)arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGraphics_draw__SWIG_14(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGraphics *arg1 = (love::AbstractGraphics *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::AbstractGraphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGraphics,0,1,"AbstractGraphics_draw");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  love_AbstractGraphics_draw__SWIG_11((love::AbstractGraphics const *)arg1,(char const *)arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGraphics_draw__SWIG_15(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGraphics *arg1 = (love::AbstractGraphics *) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractGraphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGraphics,0,1,"AbstractGraphics_draw");
  arg2 = (char*)lua_tostring(L, 2);
  love_AbstractGraphics_draw__SWIG_11((love::AbstractGraphics const *)arg1,(char const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractGraphics_draw(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractGraphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_pAbstractImage, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AbstractGraphics_draw__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractGraphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__FrameAnimation_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AbstractGraphics_draw__SWIG_6(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractGraphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AbstractGraphics_draw__SWIG_10(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractGraphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_AbstractGraphics_draw__SWIG_15(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractGraphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_AbstractGraphics_draw__SWIG_9(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractGraphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__FrameAnimation_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_AbstractGraphics_draw__SWIG_5(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractGraphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_pAbstractImage, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_AbstractGraphics_draw__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractGraphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_AbstractGraphics_draw__SWIG_14(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractGraphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__FrameAnimation_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_AbstractGraphics_draw__SWIG_4(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractGraphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_AbstractGraphics_draw__SWIG_8(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractGraphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_pAbstractImage, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_AbstractGraphics_draw__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractGraphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_AbstractGraphics_draw__SWIG_13(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractGraphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_AbstractGraphics_draw__SWIG_12(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractGraphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_pAbstractImage, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_AbstractGraphics_draw__SWIG_3(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractGraphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__FrameAnimation_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_AbstractGraphics_draw__SWIG_7(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractGraphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_AbstractGraphics_draw__SWIG_11(L);
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'AbstractGraphics_draw'");
  lua_error(L);return 0;
}


static void swig_delete_AbstractGraphics(void *obj) {
love::AbstractGraphics *arg1 = (love::AbstractGraphics *) obj;
delete arg1;
}
static swig_lua_method swig_love_AbstractGraphics_methods[] = {
    {"getColor", _wrap_AbstractGraphics_getColor}, 
    {"getBackgroundColor", _wrap_AbstractGraphics_getBackgroundColor}, 
    {"getFont", _wrap_AbstractGraphics_getFont}, 
    {"translate", _wrap_AbstractGraphics_translate}, 
    {"rotate", _wrap_AbstractGraphics_rotate}, 
    {"scale", _wrap_AbstractGraphics_scale}, 
    {"drawLine", _wrap_AbstractGraphics_drawLine}, 
    {"drawTriangle", _wrap_AbstractGraphics_drawTriangle}, 
    {"fillTriangle", _wrap_AbstractGraphics_fillTriangle}, 
    {"drawRectangle", _wrap_AbstractGraphics_drawRectangle}, 
    {"fillRectangle", _wrap_AbstractGraphics_fillRectangle}, 
    {"drawCircle", _wrap_AbstractGraphics_drawCircle}, 
    {"fillCircle", _wrap_AbstractGraphics_fillCircle}, 
    {"identity", _wrap_AbstractGraphics_identity}, 
    {"push", _wrap_AbstractGraphics_push}, 
    {"pop", _wrap_AbstractGraphics_pop}, 
    {"clear", _wrap_AbstractGraphics_clear}, 
    {"setColor", _wrap_AbstractGraphics_setColor}, 
    {"setBackgroundColor", _wrap_AbstractGraphics_setBackgroundColor}, 
    {"setFont", _wrap_AbstractGraphics_setFont}, 
    {"draw", _wrap_AbstractGraphics_draw}, 
    {0,0}
};
static swig_lua_attribute swig_love_AbstractGraphics_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_love_AbstractGraphics_bases[] = {0};
swig_lua_class _wrap_class_love_AbstractGraphics = { "AbstractGraphics", &SWIGTYPE_p_love__AbstractGraphics,0, swig_delete_AbstractGraphics, swig_love_AbstractGraphics_methods, swig_love_AbstractGraphics_attributes, swig_love_AbstractGraphics_bases };

static int _wrap_AbstractSound_setVolume(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractSound *arg1 = (love::AbstractSound *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractSound *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractSound,0,1,"AbstractSound_setVolume");
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setVolume(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_AbstractSound(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractSound *arg1 = (love::AbstractSound *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractSound *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractSound,0,1,"delete_AbstractSound");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AbstractSound(void *obj) {
love::AbstractSound *arg1 = (love::AbstractSound *) obj;
delete arg1;
}
static swig_lua_method swig_love_AbstractSound_methods[] = {
    {"setVolume", _wrap_AbstractSound_setVolume}, 
    {0,0}
};
static swig_lua_attribute swig_love_AbstractSound_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_love_AbstractSound_bases[] = {&_wrap_class_love_Object,0};
swig_lua_class _wrap_class_love_AbstractSound = { "AbstractSound", &SWIGTYPE_p_love__AbstractSound,0, swig_delete_AbstractSound, swig_love_AbstractSound_methods, swig_love_AbstractSound_attributes, swig_love_AbstractSound_bases };

static int _wrap_SmartSound___deref__(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractSound > *arg1 = (boost::shared_ptr<love::AbstractSound > *) 0 ;
  love::AbstractSound *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractSound > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractSound_t,0,1,"SmartSound___deref__");
  result = (love::AbstractSound *)((boost::shared_ptr<love::AbstractSound > const *)arg1)->operator ->();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__AbstractSound,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_SmartSound(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractSound > *arg1 = (boost::shared_ptr<love::AbstractSound > *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractSound > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractSound_t,0,1,"delete_SmartSound");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartSound_setVolume(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractSound > *arg1 = (boost::shared_ptr<love::AbstractSound > *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::AbstractSound > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractSound_t,0,1,"SmartSound_setVolume");
  arg2 = (float)lua_tonumber(L, 2);
  (*arg1)->setVolume(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SmartSound(void *obj) {
boost::shared_ptr<love::AbstractSound > *arg1 = (boost::shared_ptr<love::AbstractSound > *) obj;
delete arg1;
}
static swig_lua_method swig_boost_shared_ptr_Sl_love_AbstractSound_Sg__methods[] = {
    {"__deref__", _wrap_SmartSound___deref__}, 
    {"setVolume", _wrap_SmartSound_setVolume}, 
    {0,0}
};
static swig_lua_attribute swig_boost_shared_ptr_Sl_love_AbstractSound_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_boost_shared_ptr_Sl_love_AbstractSound_Sg__bases[] = {0};
swig_lua_class _wrap_class_boost_shared_ptr_Sl_love_AbstractSound_Sg_ = { "SmartSound", &SWIGTYPE_p_boost__shared_ptrTlove__AbstractSound_t,0, swig_delete_SmartSound, swig_boost_shared_ptr_Sl_love_AbstractSound_Sg__methods, swig_boost_shared_ptr_Sl_love_AbstractSound_Sg__attributes, swig_boost_shared_ptr_Sl_love_AbstractSound_Sg__bases };

static int _wrap_delete_AbstractMusic(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractMusic *arg1 = (love::AbstractMusic *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractMusic *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractMusic,0,1,"delete_AbstractMusic");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AbstractMusic(void *obj) {
love::AbstractMusic *arg1 = (love::AbstractMusic *) obj;
delete arg1;
}
static swig_lua_method swig_love_AbstractMusic_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_love_AbstractMusic_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_love_AbstractMusic_bases[] = {&_wrap_class_love_Object,0};
swig_lua_class _wrap_class_love_AbstractMusic = { "AbstractMusic", &SWIGTYPE_p_love__AbstractMusic,0, swig_delete_AbstractMusic, swig_love_AbstractMusic_methods, swig_love_AbstractMusic_attributes, swig_love_AbstractMusic_bases };

static int _wrap_SmartMusic___deref__(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMusic > *arg1 = (boost::shared_ptr<love::AbstractMusic > *) 0 ;
  love::AbstractMusic *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractMusic > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMusic_t,0,1,"SmartMusic___deref__");
  result = (love::AbstractMusic *)((boost::shared_ptr<love::AbstractMusic > const *)arg1)->operator ->();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__AbstractMusic,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_SmartMusic(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMusic > *arg1 = (boost::shared_ptr<love::AbstractMusic > *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractMusic > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMusic_t,0,1,"delete_SmartMusic");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SmartMusic(void *obj) {
boost::shared_ptr<love::AbstractMusic > *arg1 = (boost::shared_ptr<love::AbstractMusic > *) obj;
delete arg1;
}
static swig_lua_method swig_boost_shared_ptr_Sl_love_AbstractMusic_Sg__methods[] = {
    {"__deref__", _wrap_SmartMusic___deref__}, 
    {0,0}
};
static swig_lua_attribute swig_boost_shared_ptr_Sl_love_AbstractMusic_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_boost_shared_ptr_Sl_love_AbstractMusic_Sg__bases[] = {0};
swig_lua_class _wrap_class_boost_shared_ptr_Sl_love_AbstractMusic_Sg_ = { "SmartMusic", &SWIGTYPE_p_boost__shared_ptrTlove__AbstractMusic_t,0, swig_delete_SmartMusic, swig_boost_shared_ptr_Sl_love_AbstractMusic_Sg__methods, swig_boost_shared_ptr_Sl_love_AbstractMusic_Sg__attributes, swig_boost_shared_ptr_Sl_love_AbstractMusic_Sg__bases };

static int _wrap_delete_AbstractSoundDevice(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractSoundDevice *arg1 = (love::AbstractSoundDevice *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractSoundDevice *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractSoundDevice,0,1,"delete_AbstractSoundDevice");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractSoundDevice_isPlaying(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractSoundDevice *arg1 = (love::AbstractSoundDevice *) 0 ;
  bool result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractSoundDevice *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractSoundDevice,0,1,"AbstractSoundDevice_isPlaying");
  result = (bool)((love::AbstractSoundDevice const *)arg1)->isPlaying();
  SWIG_arg=0;
  lua_pushboolean(L,(int)result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractSoundDevice_isPaused(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractSoundDevice *arg1 = (love::AbstractSoundDevice *) 0 ;
  bool result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractSoundDevice *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractSoundDevice,0,1,"AbstractSoundDevice_isPaused");
  result = (bool)((love::AbstractSoundDevice const *)arg1)->isPaused();
  SWIG_arg=0;
  lua_pushboolean(L,(int)result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractSoundDevice_pause(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractSoundDevice *arg1 = (love::AbstractSoundDevice *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractSoundDevice *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractSoundDevice,0,1,"AbstractSoundDevice_pause");
  ((love::AbstractSoundDevice const *)arg1)->pause();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractSoundDevice_stop(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractSoundDevice *arg1 = (love::AbstractSoundDevice *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractSoundDevice *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractSoundDevice,0,1,"AbstractSoundDevice_stop");
  ((love::AbstractSoundDevice const *)arg1)->stop();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractSoundDevice_resume(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractSoundDevice *arg1 = (love::AbstractSoundDevice *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractSoundDevice *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractSoundDevice,0,1,"AbstractSoundDevice_resume");
  ((love::AbstractSoundDevice const *)arg1)->resume();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractSoundDevice_setVolume(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractSoundDevice *arg1 = (love::AbstractSoundDevice *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractSoundDevice *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractSoundDevice,0,1,"AbstractSoundDevice_setVolume");
  arg2 = (float)lua_tonumber(L, 2);
  ((love::AbstractSoundDevice const *)arg1)->setVolume(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractSoundDevice_fist(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractSoundDevice *arg1 = (love::AbstractSoundDevice *) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractSoundDevice *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractSoundDevice,0,1,"AbstractSoundDevice_fist");
  result = (char *)love_AbstractSoundDevice_fist(arg1);
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractSoundDevice_play__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractSoundDevice *arg1 = (love::AbstractSoundDevice *) 0 ;
  pAbstractSound *arg2 = (pAbstractSound *) 0 ;
  int arg3 ;
  int arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(love::AbstractSoundDevice *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractSoundDevice,0,1,"AbstractSoundDevice_play");
  arg2=(pAbstractSound *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_pAbstractSound,0,2,"AbstractSoundDevice_play");
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  love_AbstractSoundDevice_play__SWIG_0((love::AbstractSoundDevice const *)arg1,(pAbstractSound const *)arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractSoundDevice_play__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractSoundDevice *arg1 = (love::AbstractSoundDevice *) 0 ;
  pAbstractSound *arg2 = (pAbstractSound *) 0 ;
  int arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::AbstractSoundDevice *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractSoundDevice,0,1,"AbstractSoundDevice_play");
  arg2=(pAbstractSound *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_pAbstractSound,0,2,"AbstractSoundDevice_play");
  arg3 = (int)lua_tonumber(L, 3);
  love_AbstractSoundDevice_play__SWIG_0((love::AbstractSoundDevice const *)arg1,(pAbstractSound const *)arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractSoundDevice_play__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractSoundDevice *arg1 = (love::AbstractSoundDevice *) 0 ;
  pAbstractSound *arg2 = (pAbstractSound *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractSoundDevice *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractSoundDevice,0,1,"AbstractSoundDevice_play");
  arg2=(pAbstractSound *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_pAbstractSound,0,2,"AbstractSoundDevice_play");
  love_AbstractSoundDevice_play__SWIG_0((love::AbstractSoundDevice const *)arg1,(pAbstractSound const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractSoundDevice_play__SWIG_3(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractSoundDevice *arg1 = (love::AbstractSoundDevice *) 0 ;
  pAbstractMusic *arg2 = (pAbstractMusic *) 0 ;
  int arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::AbstractSoundDevice *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractSoundDevice,0,1,"AbstractSoundDevice_play");
  arg2=(pAbstractMusic *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_pAbstractMusic,0,2,"AbstractSoundDevice_play");
  arg3 = (int)lua_tonumber(L, 3);
  love_AbstractSoundDevice_play__SWIG_3((love::AbstractSoundDevice const *)arg1,(pAbstractMusic const *)arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractSoundDevice_play__SWIG_4(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractSoundDevice *arg1 = (love::AbstractSoundDevice *) 0 ;
  pAbstractMusic *arg2 = (pAbstractMusic *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::AbstractSoundDevice *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractSoundDevice,0,1,"AbstractSoundDevice_play");
  arg2=(pAbstractMusic *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_pAbstractMusic,0,2,"AbstractSoundDevice_play");
  love_AbstractSoundDevice_play__SWIG_3((love::AbstractSoundDevice const *)arg1,(pAbstractMusic const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractSoundDevice_play(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractSoundDevice, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_pAbstractSound, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AbstractSoundDevice_play__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractSoundDevice, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_pAbstractMusic, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AbstractSoundDevice_play__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractSoundDevice, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_pAbstractMusic, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_AbstractSoundDevice_play__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractSoundDevice, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_pAbstractSound, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_AbstractSoundDevice_play__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__AbstractSoundDevice, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_pAbstractSound, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_AbstractSoundDevice_play__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'AbstractSoundDevice_play'");
  lua_error(L);return 0;
}


static void swig_delete_AbstractSoundDevice(void *obj) {
love::AbstractSoundDevice *arg1 = (love::AbstractSoundDevice *) obj;
delete arg1;
}
static swig_lua_method swig_love_AbstractSoundDevice_methods[] = {
    {"isPlaying", _wrap_AbstractSoundDevice_isPlaying}, 
    {"isPaused", _wrap_AbstractSoundDevice_isPaused}, 
    {"pause", _wrap_AbstractSoundDevice_pause}, 
    {"stop", _wrap_AbstractSoundDevice_stop}, 
    {"resume", _wrap_AbstractSoundDevice_resume}, 
    {"setVolume", _wrap_AbstractSoundDevice_setVolume}, 
    {"fist", _wrap_AbstractSoundDevice_fist}, 
    {"play", _wrap_AbstractSoundDevice_play}, 
    {0,0}
};
static swig_lua_attribute swig_love_AbstractSoundDevice_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_love_AbstractSoundDevice_bases[] = {0};
swig_lua_class _wrap_class_love_AbstractSoundDevice = { "AbstractSoundDevice", &SWIGTYPE_p_love__AbstractSoundDevice,0, swig_delete_AbstractSoundDevice, swig_love_AbstractSoundDevice_methods, swig_love_AbstractSoundDevice_attributes, swig_love_AbstractSoundDevice_bases };

static int _wrap_new_ObjectFactory(lua_State* L) {
  int SWIG_arg = -1;
  love::ObjectFactory *result = 0 ;
  
  result = (love::ObjectFactory *)new love::ObjectFactory();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__ObjectFactory,1); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_ObjectFactory(lua_State* L) {
  int SWIG_arg = -1;
  love::ObjectFactory *arg1 = (love::ObjectFactory *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::ObjectFactory *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ObjectFactory,0,1,"delete_ObjectFactory");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ObjectFactory_newImage(lua_State* L) {
  int SWIG_arg = -1;
  love::ObjectFactory *arg1 = (love::ObjectFactory *) 0 ;
  char *arg2 = (char *) 0 ;
  pAbstractImage result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(love::ObjectFactory *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ObjectFactory,0,1,"ObjectFactory_newImage");
  arg2 = (char*)lua_tostring(L, 2);
  result = ((love::ObjectFactory const *)arg1)->newImage((char const *)arg2);
  SWIG_arg=0;
  {
    pAbstractImage * resultptr;
    resultptr = new pAbstractImage((pAbstractImage &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pAbstractImage,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ObjectFactory_newAnimation__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::ObjectFactory *arg1 = (love::ObjectFactory *) 0 ;
  pAbstractImage *arg2 = (pAbstractImage *) 0 ;
  love::pFrameAnimation result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::ObjectFactory *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ObjectFactory,0,1,"ObjectFactory_newAnimation");
  arg2=(pAbstractImage *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_pAbstractImage,0,2,"ObjectFactory_newAnimation");
  result = (arg1)->newAnimation((pAbstractImage const *)arg2);
  SWIG_arg=0;
  {
    love::pFrameAnimation * resultptr;
    resultptr = new love::pFrameAnimation((love::pFrameAnimation &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__FrameAnimation_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ObjectFactory_newAnimation__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::ObjectFactory *arg1 = (love::ObjectFactory *) 0 ;
  pAbstractImage *arg2 = (pAbstractImage *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  float arg7 ;
  love::pFrameAnimation result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  if(!lua_isnumber(L,6)) SWIG_fail_arg(6);
  if(!lua_isnumber(L,7)) SWIG_fail_arg(7);
  arg1=(love::ObjectFactory *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ObjectFactory,0,1,"ObjectFactory_newAnimation");
  arg2=(pAbstractImage *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_pAbstractImage,0,2,"ObjectFactory_newAnimation");
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  result = (arg1)->newAnimation((pAbstractImage const *)arg2,arg3,arg4,arg5,arg6,arg7);
  SWIG_arg=0;
  {
    love::pFrameAnimation * resultptr;
    resultptr = new love::pFrameAnimation((love::pFrameAnimation &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__FrameAnimation_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ObjectFactory_newAnimation(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__ObjectFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_pAbstractImage, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ObjectFactory_newAnimation__SWIG_0(L);
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__ObjectFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_pAbstractImage, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_ObjectFactory_newAnimation__SWIG_1(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'ObjectFactory_newAnimation'");
  lua_error(L);return 0;
}


static int _wrap_ObjectFactory_newMusic(lua_State* L) {
  int SWIG_arg = -1;
  love::ObjectFactory *arg1 = (love::ObjectFactory *) 0 ;
  char *arg2 = (char *) 0 ;
  pAbstractMusic result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(love::ObjectFactory *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ObjectFactory,0,1,"ObjectFactory_newMusic");
  arg2 = (char*)lua_tostring(L, 2);
  result = ((love::ObjectFactory const *)arg1)->newMusic((char const *)arg2);
  SWIG_arg=0;
  {
    pAbstractMusic * resultptr;
    resultptr = new pAbstractMusic((pAbstractMusic &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pAbstractMusic,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ObjectFactory_newSound(lua_State* L) {
  int SWIG_arg = -1;
  love::ObjectFactory *arg1 = (love::ObjectFactory *) 0 ;
  char *arg2 = (char *) 0 ;
  pAbstractSound result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(love::ObjectFactory *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ObjectFactory,0,1,"ObjectFactory_newSound");
  arg2 = (char*)lua_tostring(L, 2);
  result = ((love::ObjectFactory const *)arg1)->newSound((char const *)arg2);
  SWIG_arg=0;
  {
    pAbstractSound * resultptr;
    resultptr = new pAbstractSound((pAbstractSound &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pAbstractSound,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ObjectFactory_newColor__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::ObjectFactory *arg1 = (love::ObjectFactory *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  arg1=(love::ObjectFactory *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ObjectFactory,0,1,"ObjectFactory_newColor");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  result = ((love::ObjectFactory const *)arg1)->newColor(arg2,arg3,arg4,arg5);
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ObjectFactory_newColor__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::ObjectFactory *arg1 = (love::ObjectFactory *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(love::ObjectFactory *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ObjectFactory,0,1,"ObjectFactory_newColor");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = ((love::ObjectFactory const *)arg1)->newColor(arg2,arg3,arg4);
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ObjectFactory_newColor__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  love::ObjectFactory *arg1 = (love::ObjectFactory *) 0 ;
  int arg2 ;
  int arg3 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::ObjectFactory *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ObjectFactory,0,1,"ObjectFactory_newColor");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = ((love::ObjectFactory const *)arg1)->newColor(arg2,arg3);
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ObjectFactory_newColor__SWIG_3(lua_State* L) {
  int SWIG_arg = -1;
  love::ObjectFactory *arg1 = (love::ObjectFactory *) 0 ;
  int arg2 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::ObjectFactory *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ObjectFactory,0,1,"ObjectFactory_newColor");
  arg2 = (int)lua_tonumber(L, 2);
  result = ((love::ObjectFactory const *)arg1)->newColor(arg2);
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ObjectFactory_newColor(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__ObjectFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ObjectFactory_newColor__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__ObjectFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ObjectFactory_newColor__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__ObjectFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ObjectFactory_newColor__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__ObjectFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_ObjectFactory_newColor__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'ObjectFactory_newColor'");
  lua_error(L);return 0;
}


static int _wrap_ObjectFactory_newAnimatedColor__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::ObjectFactory *arg1 = (love::ObjectFactory *) 0 ;
  int arg2 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::ObjectFactory *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ObjectFactory,0,1,"ObjectFactory_newAnimatedColor");
  arg2 = (int)lua_tonumber(L, 2);
  result = ((love::ObjectFactory const *)arg1)->newAnimatedColor(arg2);
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ObjectFactory_newAnimatedColor__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::ObjectFactory *arg1 = (love::ObjectFactory *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::ObjectFactory *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ObjectFactory,0,1,"ObjectFactory_newAnimatedColor");
  result = ((love::ObjectFactory const *)arg1)->newAnimatedColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ObjectFactory_newAnimatedColor(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__ObjectFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ObjectFactory_newAnimatedColor__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__ObjectFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ObjectFactory_newAnimatedColor__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'ObjectFactory_newAnimatedColor'");
  lua_error(L);return 0;
}


static int _wrap_ObjectFactory_newFont(lua_State* L) {
  int SWIG_arg = -1;
  love::ObjectFactory *arg1 = (love::ObjectFactory *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  love::pAbstractFont result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::ObjectFactory *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ObjectFactory,0,1,"ObjectFactory_newFont");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = ((love::ObjectFactory const *)arg1)->newFont((char const *)arg2,arg3);
  SWIG_arg=0;
  {
    love::pAbstractFont * resultptr;
    resultptr = new love::pAbstractFont((love::pAbstractFont &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractFont_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ObjectFactory_newDefaultFont(lua_State* L) {
  int SWIG_arg = -1;
  love::ObjectFactory *arg1 = (love::ObjectFactory *) 0 ;
  int arg2 ;
  love::pAbstractFont result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::ObjectFactory *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ObjectFactory,0,1,"ObjectFactory_newDefaultFont");
  arg2 = (int)lua_tonumber(L, 2);
  result = ((love::ObjectFactory const *)arg1)->newDefaultFont(arg2);
  SWIG_arg=0;
  {
    love::pAbstractFont * resultptr;
    resultptr = new love::pAbstractFont((love::pAbstractFont &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractFont_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ObjectFactory_newImageFont(lua_State* L) {
  int SWIG_arg = -1;
  love::ObjectFactory *arg1 = (love::ObjectFactory *) 0 ;
  pAbstractImage *arg2 = (pAbstractImage *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  love::pAbstractFont result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isstring(L,5)) SWIG_fail_arg(5);
  arg1=(love::ObjectFactory *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ObjectFactory,0,1,"ObjectFactory_newImageFont");
  arg2=(pAbstractImage *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_pAbstractImage,0,2,"ObjectFactory_newImageFont");
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (char*)lua_tostring(L, 5);
  result = ((love::ObjectFactory const *)arg1)->newImageFont((pAbstractImage const *)arg2,arg3,arg4,(char const *)arg5);
  SWIG_arg=0;
  {
    love::pAbstractFont * resultptr;
    resultptr = new love::pAbstractFont((love::pAbstractFont &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractFont_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ObjectFactory_newParticleSystem(lua_State* L) {
  int SWIG_arg = -1;
  love::ObjectFactory *arg1 = (love::ObjectFactory *) 0 ;
  love::pParticleSystem result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::ObjectFactory *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ObjectFactory,0,1,"ObjectFactory_newParticleSystem");
  result = ((love::ObjectFactory const *)arg1)->newParticleSystem();
  SWIG_arg=0;
  {
    love::pParticleSystem * resultptr;
    resultptr = new love::pParticleSystem((love::pParticleSystem &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ObjectFactory_newBezier__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::ObjectFactory *arg1 = (love::ObjectFactory *) 0 ;
  pBezier result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::ObjectFactory *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ObjectFactory,0,1,"ObjectFactory_newBezier");
  result = ((love::ObjectFactory const *)arg1)->newBezier();
  SWIG_arg=0;
  {
    pBezier * resultptr;
    resultptr = new pBezier((pBezier &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pBezier,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ObjectFactory_newBezier__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::ObjectFactory *arg1 = (love::ObjectFactory *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  pBezier result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  if(!lua_isnumber(L,6)) SWIG_fail_arg(6);
  if(!lua_isnumber(L,7)) SWIG_fail_arg(7);
  if(!lua_isnumber(L,8)) SWIG_fail_arg(8);
  if(!lua_isnumber(L,9)) SWIG_fail_arg(9);
  arg1=(love::ObjectFactory *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ObjectFactory,0,1,"ObjectFactory_newBezier");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  arg8 = (float)lua_tonumber(L, 8);
  arg9 = (float)lua_tonumber(L, 9);
  result = ((love::ObjectFactory const *)arg1)->newBezier(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  SWIG_arg=0;
  {
    pBezier * resultptr;
    resultptr = new pBezier((pBezier &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pBezier,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ObjectFactory_newBezier(lua_State* L) {
  int argc;
  int argv[10]={
    1,2,3,4,5,6,7,8,9,10
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__ObjectFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ObjectFactory_newBezier__SWIG_0(L);
    }
  }
  if (argc == 9) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__ObjectFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      return _wrap_ObjectFactory_newBezier__SWIG_1(L);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'ObjectFactory_newBezier'");
  lua_error(L);return 0;
}


static int _wrap_ObjectFactory_newMenu__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::ObjectFactory *arg1 = (love::ObjectFactory *) 0 ;
  int arg2 ;
  love::pAbstractMenu result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::ObjectFactory *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ObjectFactory,0,1,"ObjectFactory_newMenu");
  arg2 = (int)lua_tonumber(L, 2);
  result = (arg1)->newMenu(arg2);
  SWIG_arg=0;
  {
    love::pAbstractMenu * resultptr;
    resultptr = new love::pAbstractMenu((love::pAbstractMenu &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ObjectFactory_newMenu__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::ObjectFactory *arg1 = (love::ObjectFactory *) 0 ;
  love::pAbstractMenu result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::ObjectFactory *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ObjectFactory,0,1,"ObjectFactory_newMenu");
  result = (arg1)->newMenu();
  SWIG_arg=0;
  {
    love::pAbstractMenu * resultptr;
    resultptr = new love::pAbstractMenu((love::pAbstractMenu &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ObjectFactory_newMenu(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__ObjectFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ObjectFactory_newMenu__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__ObjectFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ObjectFactory_newMenu__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'ObjectFactory_newMenu'");
  lua_error(L);return 0;
}


static int _wrap_ObjectFactory_newScrollMenu__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::ObjectFactory *arg1 = (love::ObjectFactory *) 0 ;
  int arg2 ;
  love::pAbstractMenu result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::ObjectFactory *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ObjectFactory,0,1,"ObjectFactory_newScrollMenu");
  arg2 = (int)lua_tonumber(L, 2);
  result = (arg1)->newScrollMenu(arg2);
  SWIG_arg=0;
  {
    love::pAbstractMenu * resultptr;
    resultptr = new love::pAbstractMenu((love::pAbstractMenu &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ObjectFactory_newScrollMenu__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::ObjectFactory *arg1 = (love::ObjectFactory *) 0 ;
  love::pAbstractMenu result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::ObjectFactory *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ObjectFactory,0,1,"ObjectFactory_newScrollMenu");
  result = (arg1)->newScrollMenu();
  SWIG_arg=0;
  {
    love::pAbstractMenu * resultptr;
    resultptr = new love::pAbstractMenu((love::pAbstractMenu &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ObjectFactory_newScrollMenu(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__ObjectFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ObjectFactory_newScrollMenu__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__ObjectFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ObjectFactory_newScrollMenu__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'ObjectFactory_newScrollMenu'");
  lua_error(L);return 0;
}


static int _wrap_ObjectFactory_newWindowMenu__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::ObjectFactory *arg1 = (love::ObjectFactory *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  love::pAbstractMenu result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isstring(L,3)) SWIG_fail_arg(3);
  arg1=(love::ObjectFactory *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ObjectFactory,0,1,"ObjectFactory_newWindowMenu");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char*)lua_tostring(L, 3);
  result = (arg1)->newWindowMenu(arg2,(char const *)arg3);
  SWIG_arg=0;
  {
    love::pAbstractMenu * resultptr;
    resultptr = new love::pAbstractMenu((love::pAbstractMenu &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ObjectFactory_newWindowMenu__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::ObjectFactory *arg1 = (love::ObjectFactory *) 0 ;
  int arg2 ;
  love::pAbstractMenu result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::ObjectFactory *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ObjectFactory,0,1,"ObjectFactory_newWindowMenu");
  arg2 = (int)lua_tonumber(L, 2);
  result = (arg1)->newWindowMenu(arg2);
  SWIG_arg=0;
  {
    love::pAbstractMenu * resultptr;
    resultptr = new love::pAbstractMenu((love::pAbstractMenu &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ObjectFactory_newWindowMenu__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  love::ObjectFactory *arg1 = (love::ObjectFactory *) 0 ;
  love::pAbstractMenu result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::ObjectFactory *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ObjectFactory,0,1,"ObjectFactory_newWindowMenu");
  result = (arg1)->newWindowMenu();
  SWIG_arg=0;
  {
    love::pAbstractMenu * resultptr;
    resultptr = new love::pAbstractMenu((love::pAbstractMenu &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ObjectFactory_newWindowMenu(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__ObjectFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ObjectFactory_newWindowMenu__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__ObjectFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ObjectFactory_newWindowMenu__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__ObjectFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_ObjectFactory_newWindowMenu__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'ObjectFactory_newWindowMenu'");
  lua_error(L);return 0;
}


static void swig_delete_ObjectFactory(void *obj) {
love::ObjectFactory *arg1 = (love::ObjectFactory *) obj;
delete arg1;
}
static swig_lua_method swig_love_ObjectFactory_methods[] = {
    {"newImage", _wrap_ObjectFactory_newImage}, 
    {"newAnimation", _wrap_ObjectFactory_newAnimation}, 
    {"newMusic", _wrap_ObjectFactory_newMusic}, 
    {"newSound", _wrap_ObjectFactory_newSound}, 
    {"newColor", _wrap_ObjectFactory_newColor}, 
    {"newAnimatedColor", _wrap_ObjectFactory_newAnimatedColor}, 
    {"newFont", _wrap_ObjectFactory_newFont}, 
    {"newDefaultFont", _wrap_ObjectFactory_newDefaultFont}, 
    {"newImageFont", _wrap_ObjectFactory_newImageFont}, 
    {"newParticleSystem", _wrap_ObjectFactory_newParticleSystem}, 
    {"newBezier", _wrap_ObjectFactory_newBezier}, 
    {"newMenu", _wrap_ObjectFactory_newMenu}, 
    {"newScrollMenu", _wrap_ObjectFactory_newScrollMenu}, 
    {"newWindowMenu", _wrap_ObjectFactory_newWindowMenu}, 
    {0,0}
};
static swig_lua_attribute swig_love_ObjectFactory_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_love_ObjectFactory_bases[] = {0};
swig_lua_class _wrap_class_love_ObjectFactory = { "ObjectFactory", &SWIGTYPE_p_love__ObjectFactory,_wrap_new_ObjectFactory, swig_delete_ObjectFactory, swig_love_ObjectFactory_methods, swig_love_ObjectFactory_attributes, swig_love_ObjectFactory_bases };

static int _wrap_new_Event(lua_State* L) {
  int SWIG_arg = -1;
  love::Event *result = 0 ;
  
  result = (love::Event *)new love::Event();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__Event,1); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_Event(lua_State* L) {
  int SWIG_arg = -1;
  love::Event *arg1 = (love::Event *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Event *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Event,0,1,"delete_Event");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Event_getType(lua_State* L) {
  int SWIG_arg = -1;
  love::Event *arg1 = (love::Event *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Event *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Event,0,1,"Event_getType");
  result = (int)((love::Event const *)arg1)->getType();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Event_setType(lua_State* L) {
  int SWIG_arg = -1;
  love::Event *arg1 = (love::Event *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Event *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Event,0,1,"Event_setType");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setType(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Event(void *obj) {
love::Event *arg1 = (love::Event *) obj;
delete arg1;
}
static swig_lua_method swig_love_Event_methods[] = {
    {"getType", _wrap_Event_getType}, 
    {"setType", _wrap_Event_setType}, 
    {0,0}
};
static swig_lua_attribute swig_love_Event_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_love_Event_bases[] = {&_wrap_class_love_Object,0};
swig_lua_class _wrap_class_love_Event = { "Event", &SWIGTYPE_p_love__Event,_wrap_new_Event, swig_delete_Event, swig_love_Event_methods, swig_love_Event_attributes, swig_love_Event_bases };

static int _wrap_new_GUIEvent__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::GUIEvent *result = 0 ;
  
  result = (love::GUIEvent *)new love::GUIEvent();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__GUIEvent,1); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GUIEvent__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  gcn::Widget *arg1 = (gcn::Widget *) 0 ;
  love::GUIEvent *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(gcn::Widget *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_gcn__Widget,0,1,"new_GUIEvent");
  result = (love::GUIEvent *)new love::GUIEvent(arg1);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__GUIEvent,1); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GUIEvent(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_GUIEvent__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gcn__Widget, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_GUIEvent__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'new_GUIEvent'");
  lua_error(L);return 0;
}


static int _wrap_delete_GUIEvent(lua_State* L) {
  int SWIG_arg = -1;
  love::GUIEvent *arg1 = (love::GUIEvent *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::GUIEvent *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__GUIEvent,0,1,"delete_GUIEvent");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GUIEvent_getSource(lua_State* L) {
  int SWIG_arg = -1;
  love::GUIEvent *arg1 = (love::GUIEvent *) 0 ;
  gcn::Widget *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::GUIEvent *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__GUIEvent,0,1,"GUIEvent_getSource");
  result = (gcn::Widget *)(arg1)->getSource();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gcn__Widget,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GUIEvent_getName(lua_State* L) {
  int SWIG_arg = -1;
  love::GUIEvent *arg1 = (love::GUIEvent *) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::GUIEvent *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__GUIEvent,0,1,"GUIEvent_getName");
  result = (char *)(arg1)->getName();
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GUIEvent_setSource(lua_State* L) {
  int SWIG_arg = -1;
  love::GUIEvent *arg1 = (love::GUIEvent *) 0 ;
  gcn::Widget *arg2 = (gcn::Widget *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::GUIEvent *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__GUIEvent,0,1,"GUIEvent_setSource");
  arg2=(gcn::Widget *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Widget,0,2,"GUIEvent_setSource");
  (arg1)->setSource(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GUIEvent_setName(lua_State* L) {
  int SWIG_arg = -1;
  love::GUIEvent *arg1 = (love::GUIEvent *) 0 ;
  string arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::GUIEvent *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__GUIEvent,0,1,"GUIEvent_setName");
  {
    string * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_string,0)) SWIG_fail;
    arg2 = *argp;
  }
  (arg1)->setName(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_GUIEvent(void *obj) {
love::GUIEvent *arg1 = (love::GUIEvent *) obj;
delete arg1;
}
static swig_lua_method swig_love_GUIEvent_methods[] = {
    {"getSource", _wrap_GUIEvent_getSource}, 
    {"getName", _wrap_GUIEvent_getName}, 
    {"setSource", _wrap_GUIEvent_setSource}, 
    {"setName", _wrap_GUIEvent_setName}, 
    {0,0}
};
static swig_lua_attribute swig_love_GUIEvent_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_love_GUIEvent_bases[] = {&_wrap_class_love_Event,0};
swig_lua_class _wrap_class_love_GUIEvent = { "GUIEvent", &SWIGTYPE_p_love__GUIEvent,_wrap_new_GUIEvent, swig_delete_GUIEvent, swig_love_GUIEvent_methods, swig_love_GUIEvent_attributes, swig_love_GUIEvent_bases };

static int _wrap_new_MessageEvent__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::MessageEvent *result = 0 ;
  
  result = (love::MessageEvent *)new love::MessageEvent();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__MessageEvent,1); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MessageEvent__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  string arg1 ;
  love::MessageEvent *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  {
    string * argp;
    if(SWIG_ConvertPtr(L,1,(void**)(&argp),SWIGTYPE_p_string,0)) SWIG_fail;
    arg1 = *argp;
  }
  result = (love::MessageEvent *)new love::MessageEvent(arg1);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__MessageEvent,1); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MessageEvent(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_MessageEvent__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_MessageEvent__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'new_MessageEvent'");
  lua_error(L);return 0;
}


static int _wrap_delete_MessageEvent(lua_State* L) {
  int SWIG_arg = -1;
  love::MessageEvent *arg1 = (love::MessageEvent *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::MessageEvent *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__MessageEvent,0,1,"delete_MessageEvent");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MessageEvent_getMessage(lua_State* L) {
  int SWIG_arg = -1;
  love::MessageEvent *arg1 = (love::MessageEvent *) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::MessageEvent *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__MessageEvent,0,1,"MessageEvent_getMessage");
  result = (char *)((love::MessageEvent const *)arg1)->getMessage();
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MessageEvent(void *obj) {
love::MessageEvent *arg1 = (love::MessageEvent *) obj;
delete arg1;
}
static swig_lua_method swig_love_MessageEvent_methods[] = {
    {"getMessage", _wrap_MessageEvent_getMessage}, 
    {0,0}
};
static swig_lua_attribute swig_love_MessageEvent_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_love_MessageEvent_bases[] = {&_wrap_class_love_Event,0};
swig_lua_class _wrap_class_love_MessageEvent = { "MessageEvent", &SWIGTYPE_p_love__MessageEvent,_wrap_new_MessageEvent, swig_delete_MessageEvent, swig_love_MessageEvent_methods, swig_love_MessageEvent_attributes, swig_love_MessageEvent_bases };

static int _wrap_keyboard_set(lua_State* L) {
  int SWIG_arg = -1;
  love::Keyboard *arg1 = (love::Keyboard *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Keyboard *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Keyboard,0,1,"keyboard_set");
  love::keyboard = arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_keyboard_get(lua_State* L) {
  int SWIG_arg = -1;
  love::Keyboard *result = 0 ;
  
  result = (love::Keyboard *)love::keyboard;
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__Keyboard,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_mouse_set(lua_State* L) {
  int SWIG_arg = -1;
  love::Mouse *arg1 = (love::Mouse *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Mouse *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Mouse,0,1,"mouse_set");
  love::mouse = arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_mouse_get(lua_State* L) {
  int SWIG_arg = -1;
  love::Mouse *result = 0 ;
  
  result = (love::Mouse *)love::mouse;
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__Mouse,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_display_set(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractDisplay *arg1 = (love::AbstractDisplay *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractDisplay *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractDisplay,0,1,"display_set");
  love::display = arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_display_get(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractDisplay *result = 0 ;
  
  result = (love::AbstractDisplay *)love::display;
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__AbstractDisplay,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_graphics_set(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGraphics *arg1 = (love::AbstractGraphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractGraphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractGraphics,0,1,"graphics_set");
  love::graphics = arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_graphics_get(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractGraphics *result = 0 ;
  
  result = (love::AbstractGraphics *)love::graphics;
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__AbstractGraphics,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_audio_set(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractSoundDevice *arg1 = (love::AbstractSoundDevice *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::AbstractSoundDevice *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__AbstractSoundDevice,0,1,"audio_set");
  love::audio = arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_audio_get(lua_State* L) {
  int SWIG_arg = -1;
  love::AbstractSoundDevice *result = 0 ;
  
  result = (love::AbstractSoundDevice *)love::audio;
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__AbstractSoundDevice,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_timer_set(lua_State* L) {
  int SWIG_arg = -1;
  love::Timer *arg1 = (love::Timer *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Timer *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Timer,0,1,"timer_set");
  love::timer = arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_timer_get(lua_State* L) {
  int SWIG_arg = -1;
  love::Timer *result = 0 ;
  
  result = (love::Timer *)love::timer;
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__Timer,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_objects_set(lua_State* L) {
  int SWIG_arg = -1;
  love::ObjectFactory *arg1 = (love::ObjectFactory *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::ObjectFactory *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ObjectFactory,0,1,"objects_set");
  love::objects = arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_objects_get(lua_State* L) {
  int SWIG_arg = -1;
  love::ObjectFactory *result = 0 ;
  
  result = (love::ObjectFactory *)love::objects;
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__ObjectFactory,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_game_set(lua_State* L) {
  int SWIG_arg = -1;
  love::LuaGame *arg1 = (love::LuaGame *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::LuaGame *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__LuaGame,0,1,"game_set");
  love::game = arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_game_get(lua_State* L) {
  int SWIG_arg = -1;
  love::LuaGame *result = 0 ;
  
  result = (love::LuaGame *)love::game;
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__LuaGame,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_gui_set(lua_State* L) {
  int SWIG_arg = -1;
  love::GUIContainer *arg1 = (love::GUIContainer *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::GUIContainer *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__GUIContainer,0,1,"gui_set");
  love::gui = arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_gui_get(lua_State* L) {
  int SWIG_arg = -1;
  love::GUIContainer *result = 0 ;
  
  result = (love::GUIContainer *)love::gui;
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__GUIContainer,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartDisplay___deref__(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractDisplay > *arg1 = (boost::shared_ptr<love::AbstractDisplay > *) 0 ;
  love::AbstractDisplay *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractDisplay > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractDisplay_t,0,1,"SmartDisplay___deref__");
  result = (love::AbstractDisplay *)((boost::shared_ptr<love::AbstractDisplay > const *)arg1)->operator ->();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__AbstractDisplay,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_SmartDisplay(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractDisplay > *arg1 = (boost::shared_ptr<love::AbstractDisplay > *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractDisplay > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractDisplay_t,0,1,"delete_SmartDisplay");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartDisplay_getCurrentDisplayMode(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractDisplay > *arg1 = (boost::shared_ptr<love::AbstractDisplay > *) 0 ;
  love::DisplayMode *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractDisplay > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractDisplay_t,0,1,"SmartDisplay_getCurrentDisplayMode");
  {
    love::DisplayMode const &_result_ref = (*arg1)->getCurrentDisplayMode();
    result = (love::DisplayMode *) &_result_ref;
  }
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__DisplayMode,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartDisplay_isSupported(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractDisplay > *arg1 = (boost::shared_ptr<love::AbstractDisplay > *) 0 ;
  love::DisplayMode arg2 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::AbstractDisplay > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractDisplay_t,0,1,"SmartDisplay_isSupported");
  {
    love::DisplayMode * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_love__DisplayMode,0)) SWIG_fail;
    arg2 = *argp;
  }
  result = (int)(*arg1)->isSupported(arg2);
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartDisplay_tryChange(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractDisplay > *arg1 = (boost::shared_ptr<love::AbstractDisplay > *) 0 ;
  love::DisplayMode arg2 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::AbstractDisplay > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractDisplay_t,0,1,"SmartDisplay_tryChange");
  {
    love::DisplayMode * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_love__DisplayMode,0)) SWIG_fail;
    arg2 = *argp;
  }
  result = (int)(*arg1)->tryChange(arg2);
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartDisplay_tryResize(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractDisplay > *arg1 = (boost::shared_ptr<love::AbstractDisplay > *) 0 ;
  love::DisplayMode arg2 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::AbstractDisplay > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractDisplay_t,0,1,"SmartDisplay_tryResize");
  {
    love::DisplayMode * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_love__DisplayMode,0)) SWIG_fail;
    arg2 = *argp;
  }
  result = (int)(*arg1)->tryResize(arg2);
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartDisplay_toggleVSync(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractDisplay > *arg1 = (boost::shared_ptr<love::AbstractDisplay > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractDisplay > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractDisplay_t,0,1,"SmartDisplay_toggleVSync");
  result = (int)(*arg1)->toggleVSync();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartDisplay_toggleFullscreen(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractDisplay > *arg1 = (boost::shared_ptr<love::AbstractDisplay > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractDisplay > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractDisplay_t,0,1,"SmartDisplay_toggleFullscreen");
  result = (int)(*arg1)->toggleFullscreen();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartDisplay_getGraphics(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractDisplay > *arg1 = (boost::shared_ptr<love::AbstractDisplay > *) 0 ;
  love::AbstractGraphics *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractDisplay > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractDisplay_t,0,1,"SmartDisplay_getGraphics");
  result = (love::AbstractGraphics *)(*arg1)->getGraphics();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__AbstractGraphics,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartDisplay_getWidth(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractDisplay > *arg1 = (boost::shared_ptr<love::AbstractDisplay > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractDisplay > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractDisplay_t,0,1,"SmartDisplay_getWidth");
  result = (int)(*arg1)->getWidth();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartDisplay_getHeight(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractDisplay > *arg1 = (boost::shared_ptr<love::AbstractDisplay > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractDisplay > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractDisplay_t,0,1,"SmartDisplay_getHeight");
  result = (int)(*arg1)->getHeight();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SmartDisplay(void *obj) {
boost::shared_ptr<love::AbstractDisplay > *arg1 = (boost::shared_ptr<love::AbstractDisplay > *) obj;
delete arg1;
}
static swig_lua_method swig_boost_shared_ptr_Sl_love_AbstractDisplay_Sg__methods[] = {
    {"__deref__", _wrap_SmartDisplay___deref__}, 
    {"getCurrentDisplayMode", _wrap_SmartDisplay_getCurrentDisplayMode}, 
    {"isSupported", _wrap_SmartDisplay_isSupported}, 
    {"tryChange", _wrap_SmartDisplay_tryChange}, 
    {"tryResize", _wrap_SmartDisplay_tryResize}, 
    {"toggleVSync", _wrap_SmartDisplay_toggleVSync}, 
    {"toggleFullscreen", _wrap_SmartDisplay_toggleFullscreen}, 
    {"getGraphics", _wrap_SmartDisplay_getGraphics}, 
    {"getWidth", _wrap_SmartDisplay_getWidth}, 
    {"getHeight", _wrap_SmartDisplay_getHeight}, 
    {0,0}
};
static swig_lua_attribute swig_boost_shared_ptr_Sl_love_AbstractDisplay_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_boost_shared_ptr_Sl_love_AbstractDisplay_Sg__bases[] = {0};
swig_lua_class _wrap_class_boost_shared_ptr_Sl_love_AbstractDisplay_Sg_ = { "SmartDisplay", &SWIGTYPE_p_boost__shared_ptrTlove__AbstractDisplay_t,0, swig_delete_SmartDisplay, swig_boost_shared_ptr_Sl_love_AbstractDisplay_Sg__methods, swig_boost_shared_ptr_Sl_love_AbstractDisplay_Sg__attributes, swig_boost_shared_ptr_Sl_love_AbstractDisplay_Sg__bases };

static int _wrap_SmartAbstractColor___deref__(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractColor > *arg1 = (boost::shared_ptr<love::AbstractColor > *) 0 ;
  love::AbstractColor *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractColor > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,1,"SmartAbstractColor___deref__");
  result = (love::AbstractColor *)((boost::shared_ptr<love::AbstractColor > const *)arg1)->operator ->();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__AbstractColor,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_SmartAbstractColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractColor > *arg1 = (boost::shared_ptr<love::AbstractColor > *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractColor > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,1,"delete_SmartAbstractColor");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAbstractColor_LOVE_COLOR_BLACK_get(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractColor > *arg1 = (boost::shared_ptr<love::AbstractColor > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractColor > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,1,"SmartAbstractColor_LOVE_COLOR_BLACK_get");
  result = (int)(int) (love::AbstractColor::LOVE_COLOR_BLACK);
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAbstractColor_LOVE_COLOR_WHITE_get(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractColor > *arg1 = (boost::shared_ptr<love::AbstractColor > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractColor > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,1,"SmartAbstractColor_LOVE_COLOR_WHITE_get");
  result = (int)(int) (love::AbstractColor::LOVE_COLOR_WHITE);
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAbstractColor_LOVE_COLOR_RED_get(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractColor > *arg1 = (boost::shared_ptr<love::AbstractColor > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractColor > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,1,"SmartAbstractColor_LOVE_COLOR_RED_get");
  result = (int)(int) (love::AbstractColor::LOVE_COLOR_RED);
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAbstractColor_LOVE_COLOR_GREEN_get(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractColor > *arg1 = (boost::shared_ptr<love::AbstractColor > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractColor > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,1,"SmartAbstractColor_LOVE_COLOR_GREEN_get");
  result = (int)(int) (love::AbstractColor::LOVE_COLOR_GREEN);
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAbstractColor_LOVE_COLOR_BLUE_get(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractColor > *arg1 = (boost::shared_ptr<love::AbstractColor > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractColor > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,1,"SmartAbstractColor_LOVE_COLOR_BLUE_get");
  result = (int)(int) (love::AbstractColor::LOVE_COLOR_BLUE);
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAbstractColor_LOVE_COLOR_YELLOW_get(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractColor > *arg1 = (boost::shared_ptr<love::AbstractColor > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractColor > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,1,"SmartAbstractColor_LOVE_COLOR_YELLOW_get");
  result = (int)(int) (love::AbstractColor::LOVE_COLOR_YELLOW);
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAbstractColor_LOVE_COLOR_CYAN_get(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractColor > *arg1 = (boost::shared_ptr<love::AbstractColor > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractColor > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,1,"SmartAbstractColor_LOVE_COLOR_CYAN_get");
  result = (int)(int) (love::AbstractColor::LOVE_COLOR_CYAN);
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAbstractColor_LOVE_COLOR_MAGENTA_get(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractColor > *arg1 = (boost::shared_ptr<love::AbstractColor > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractColor > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,1,"SmartAbstractColor_LOVE_COLOR_MAGENTA_get");
  result = (int)(int) (love::AbstractColor::LOVE_COLOR_MAGENTA);
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAbstractColor_getRed(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractColor > *arg1 = (boost::shared_ptr<love::AbstractColor > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractColor > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,1,"SmartAbstractColor_getRed");
  result = (int)(*arg1)->getRed();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAbstractColor_getGreen(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractColor > *arg1 = (boost::shared_ptr<love::AbstractColor > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractColor > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,1,"SmartAbstractColor_getGreen");
  result = (int)(*arg1)->getGreen();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAbstractColor_getBlue(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractColor > *arg1 = (boost::shared_ptr<love::AbstractColor > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractColor > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,1,"SmartAbstractColor_getBlue");
  result = (int)(*arg1)->getBlue();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAbstractColor_getAlpha(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractColor > *arg1 = (boost::shared_ptr<love::AbstractColor > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractColor > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,1,"SmartAbstractColor_getAlpha");
  result = (int)(*arg1)->getAlpha();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAbstractColor_getCode(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractColor > *arg1 = (boost::shared_ptr<love::AbstractColor > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractColor > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,1,"SmartAbstractColor_getCode");
  result = (int)(*arg1)->getCode();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAbstractColor_setRed(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractColor > *arg1 = (boost::shared_ptr<love::AbstractColor > *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::AbstractColor > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,1,"SmartAbstractColor_setRed");
  arg2 = (int)lua_tonumber(L, 2);
  (*arg1)->setRed(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAbstractColor_setGreen(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractColor > *arg1 = (boost::shared_ptr<love::AbstractColor > *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::AbstractColor > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,1,"SmartAbstractColor_setGreen");
  arg2 = (int)lua_tonumber(L, 2);
  (*arg1)->setGreen(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAbstractColor_setBlue(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractColor > *arg1 = (boost::shared_ptr<love::AbstractColor > *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::AbstractColor > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,1,"SmartAbstractColor_setBlue");
  arg2 = (int)lua_tonumber(L, 2);
  (*arg1)->setBlue(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAbstractColor_setAlpha(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractColor > *arg1 = (boost::shared_ptr<love::AbstractColor > *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::AbstractColor > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,1,"SmartAbstractColor_setAlpha");
  arg2 = (int)lua_tonumber(L, 2);
  (*arg1)->setAlpha(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAbstractColor_setColor__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractColor > *arg1 = (boost::shared_ptr<love::AbstractColor > *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::AbstractColor > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,1,"SmartAbstractColor_setColor");
  arg2 = (int)lua_tonumber(L, 2);
  (*arg1)->setColor(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAbstractColor_setColor__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractColor > *arg1 = (boost::shared_ptr<love::AbstractColor > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(boost::shared_ptr<love::AbstractColor > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,1,"SmartAbstractColor_setColor");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (*arg1)->setColor(arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAbstractColor_setColor__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractColor > *arg1 = (boost::shared_ptr<love::AbstractColor > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  arg1=(boost::shared_ptr<love::AbstractColor > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,1,"SmartAbstractColor_setColor");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  (*arg1)->setColor(arg2,arg3,arg4,arg5);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAbstractColor_setColor__SWIG_3(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractColor > *arg1 = (boost::shared_ptr<love::AbstractColor > *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::AbstractColor > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,1,"SmartAbstractColor_setColor");
  arg2 = (float)lua_tonumber(L, 2);
  (*arg1)->setColor(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAbstractColor_setColor(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SmartAbstractColor_setColor__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SmartAbstractColor_setColor__SWIG_3(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SmartAbstractColor_setColor__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_SmartAbstractColor_setColor__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'SmartAbstractColor_setColor'");
  lua_error(L);return 0;
}


static int _wrap_SmartAbstractColor_getColor__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractColor > *arg1 = (boost::shared_ptr<love::AbstractColor > *) 0 ;
  boost::shared_ptr<love::AbstractColor > result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractColor > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,1,"SmartAbstractColor_getColor");
  result = (*arg1)->getColor();
  SWIG_arg=0;
  {
    boost::shared_ptr<love::AbstractColor > * resultptr;
    resultptr = new boost::shared_ptr<love::AbstractColor >((boost::shared_ptr<love::AbstractColor > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAbstractColor_getColor__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractColor > *arg1 = (boost::shared_ptr<love::AbstractColor > *) 0 ;
  float arg2 ;
  boost::shared_ptr<love::AbstractColor > result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::AbstractColor > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,1,"SmartAbstractColor_getColor");
  arg2 = (float)lua_tonumber(L, 2);
  result = (*arg1)->getColor(arg2);
  SWIG_arg=0;
  {
    boost::shared_ptr<love::AbstractColor > * resultptr;
    resultptr = new boost::shared_ptr<love::AbstractColor >((boost::shared_ptr<love::AbstractColor > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAbstractColor_getColor(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SmartAbstractColor_getColor__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SmartAbstractColor_getColor__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'SmartAbstractColor_getColor'");
  lua_error(L);return 0;
}


static int _wrap_SmartAbstractColor_getGradient(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractColor > *arg1 = (boost::shared_ptr<love::AbstractColor > *) 0 ;
  boost::shared_ptr<love::AbstractColor > *arg2 = (boost::shared_ptr<love::AbstractColor > *) 0 ;
  float arg3 ;
  boost::shared_ptr<love::AbstractColor > result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(boost::shared_ptr<love::AbstractColor > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,1,"SmartAbstractColor_getGradient");
  arg2=(boost::shared_ptr<love::AbstractColor > *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"SmartAbstractColor_getGradient");
  arg3 = (float)lua_tonumber(L, 3);
  result = (*arg1)->getGradient((boost::shared_ptr<love::AbstractColor > const *)arg2,arg3);
  SWIG_arg=0;
  {
    boost::shared_ptr<love::AbstractColor > * resultptr;
    resultptr = new boost::shared_ptr<love::AbstractColor >((boost::shared_ptr<love::AbstractColor > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAbstractColor_addColor__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractColor > *arg1 = (boost::shared_ptr<love::AbstractColor > *) 0 ;
  boost::shared_ptr<love::AbstractColor > *arg2 = (boost::shared_ptr<love::AbstractColor > *) 0 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(boost::shared_ptr<love::AbstractColor > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,1,"SmartAbstractColor_addColor");
  arg2=(boost::shared_ptr<love::AbstractColor > *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"SmartAbstractColor_addColor");
  arg3 = (float)lua_tonumber(L, 3);
  (*arg1)->addColor((boost::shared_ptr<love::AbstractColor > const *)arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAbstractColor_addColor__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractColor > *arg1 = (boost::shared_ptr<love::AbstractColor > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  float arg6 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  if(!lua_isnumber(L,6)) SWIG_fail_arg(6);
  arg1=(boost::shared_ptr<love::AbstractColor > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,1,"SmartAbstractColor_addColor");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  (*arg1)->addColor(arg2,arg3,arg4,arg5,arg6);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAbstractColor_addColor(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SmartAbstractColor_addColor__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_SmartAbstractColor_addColor__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'SmartAbstractColor_addColor'");
  lua_error(L);return 0;
}


static int _wrap_SmartAbstractColor_update(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractColor > *arg1 = (boost::shared_ptr<love::AbstractColor > *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::AbstractColor > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,1,"SmartAbstractColor_update");
  arg2 = (float)lua_tonumber(L, 2);
  (*arg1)->update(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAbstractColor_setMode(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractColor > *arg1 = (boost::shared_ptr<love::AbstractColor > *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::AbstractColor > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,1,"SmartAbstractColor_setMode");
  arg2 = (int)lua_tonumber(L, 2);
  (*arg1)->setMode(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAbstractColor_play(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractColor > *arg1 = (boost::shared_ptr<love::AbstractColor > *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractColor > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,1,"SmartAbstractColor_play");
  (*arg1)->play();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAbstractColor_stop(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractColor > *arg1 = (boost::shared_ptr<love::AbstractColor > *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractColor > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,1,"SmartAbstractColor_stop");
  (*arg1)->stop();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAbstractColor_reset(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractColor > *arg1 = (boost::shared_ptr<love::AbstractColor > *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractColor > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,1,"SmartAbstractColor_reset");
  (*arg1)->reset();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAbstractColor_testColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractColor > *arg1 = (boost::shared_ptr<love::AbstractColor > *) 0 ;
  boost::shared_ptr<love::AbstractColor > arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::AbstractColor > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,1,"SmartAbstractColor_testColor");
  {
    boost::shared_ptr<love::AbstractColor > * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0)) SWIG_fail;
    arg2 = *argp;
  }
  (*arg1)->testColor(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SmartAbstractColor(void *obj) {
boost::shared_ptr<love::AbstractColor > *arg1 = (boost::shared_ptr<love::AbstractColor > *) obj;
delete arg1;
}
static swig_lua_method swig_boost_shared_ptr_Sl_love_AbstractColor_Sg__methods[] = {
    {"__deref__", _wrap_SmartAbstractColor___deref__}, 
    {"getRed", _wrap_SmartAbstractColor_getRed}, 
    {"getGreen", _wrap_SmartAbstractColor_getGreen}, 
    {"getBlue", _wrap_SmartAbstractColor_getBlue}, 
    {"getAlpha", _wrap_SmartAbstractColor_getAlpha}, 
    {"getCode", _wrap_SmartAbstractColor_getCode}, 
    {"setRed", _wrap_SmartAbstractColor_setRed}, 
    {"setGreen", _wrap_SmartAbstractColor_setGreen}, 
    {"setBlue", _wrap_SmartAbstractColor_setBlue}, 
    {"setAlpha", _wrap_SmartAbstractColor_setAlpha}, 
    {"setColor", _wrap_SmartAbstractColor_setColor}, 
    {"getColor", _wrap_SmartAbstractColor_getColor}, 
    {"getGradient", _wrap_SmartAbstractColor_getGradient}, 
    {"addColor", _wrap_SmartAbstractColor_addColor}, 
    {"update", _wrap_SmartAbstractColor_update}, 
    {"setMode", _wrap_SmartAbstractColor_setMode}, 
    {"play", _wrap_SmartAbstractColor_play}, 
    {"stop", _wrap_SmartAbstractColor_stop}, 
    {"reset", _wrap_SmartAbstractColor_reset}, 
    {"testColor", _wrap_SmartAbstractColor_testColor}, 
    {0,0}
};
static swig_lua_attribute swig_boost_shared_ptr_Sl_love_AbstractColor_Sg__attributes[] = {
    { "LOVE_COLOR_BLACK",_wrap_SmartAbstractColor_LOVE_COLOR_BLACK_get, 0 },
    { "LOVE_COLOR_WHITE",_wrap_SmartAbstractColor_LOVE_COLOR_WHITE_get, 0 },
    { "LOVE_COLOR_RED",_wrap_SmartAbstractColor_LOVE_COLOR_RED_get, 0 },
    { "LOVE_COLOR_GREEN",_wrap_SmartAbstractColor_LOVE_COLOR_GREEN_get, 0 },
    { "LOVE_COLOR_BLUE",_wrap_SmartAbstractColor_LOVE_COLOR_BLUE_get, 0 },
    { "LOVE_COLOR_YELLOW",_wrap_SmartAbstractColor_LOVE_COLOR_YELLOW_get, 0 },
    { "LOVE_COLOR_CYAN",_wrap_SmartAbstractColor_LOVE_COLOR_CYAN_get, 0 },
    { "LOVE_COLOR_MAGENTA",_wrap_SmartAbstractColor_LOVE_COLOR_MAGENTA_get, 0 },
    {0,0,0}
};
static swig_lua_class *swig_boost_shared_ptr_Sl_love_AbstractColor_Sg__bases[] = {0};
swig_lua_class _wrap_class_boost_shared_ptr_Sl_love_AbstractColor_Sg_ = { "SmartAbstractColor", &SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0, swig_delete_SmartAbstractColor, swig_boost_shared_ptr_Sl_love_AbstractColor_Sg__methods, swig_boost_shared_ptr_Sl_love_AbstractColor_Sg__attributes, swig_boost_shared_ptr_Sl_love_AbstractColor_Sg__bases };

static int _wrap_SmartAbstractFont___deref__(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractFont > *arg1 = (boost::shared_ptr<love::AbstractFont > *) 0 ;
  love::AbstractFont *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractFont > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractFont_t,0,1,"SmartAbstractFont___deref__");
  result = (love::AbstractFont *)((boost::shared_ptr<love::AbstractFont > const *)arg1)->operator ->();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__AbstractFont,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_SmartAbstractFont(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractFont > *arg1 = (boost::shared_ptr<love::AbstractFont > *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractFont > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractFont_t,0,1,"delete_SmartAbstractFont");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAbstractFont_MAX_CHARS_get(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractFont > *arg1 = (boost::shared_ptr<love::AbstractFont > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractFont > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractFont_t,0,1,"SmartAbstractFont_MAX_CHARS_get");
  result = (int)(int) (love::AbstractFont::MAX_CHARS);
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAbstractFont_width_set(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractFont > *arg1 = (boost::shared_ptr<love::AbstractFont > *) 0 ;
  int *arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::AbstractFont > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractFont_t,0,1,"SmartAbstractFont_width_set");
  arg2=(int *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_int,0,2,"SmartAbstractFont_width_set");
  {
    size_t ii;
    int *b = (int *) (*arg1)->width;
    for (ii = 0; ii < (size_t)love::AbstractFont::MAX_CHARS; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAbstractFont_width_get(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractFont > *arg1 = (boost::shared_ptr<love::AbstractFont > *) 0 ;
  int *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractFont > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractFont_t,0,1,"SmartAbstractFont_width_get");
  result = (int *)(int *) ((*arg1)->width);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAbstractFont_print__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractFont > *arg1 = (boost::shared_ptr<love::AbstractFont > *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  float arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(boost::shared_ptr<love::AbstractFont > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractFont_t,0,1,"SmartAbstractFont_print");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (*arg1)->print((char const *)arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAbstractFont_print__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractFont > *arg1 = (boost::shared_ptr<love::AbstractFont > *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(boost::shared_ptr<love::AbstractFont > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractFont_t,0,1,"SmartAbstractFont_print");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (*arg1)->print((char const *)arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAbstractFont_print__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractFont > *arg1 = (boost::shared_ptr<love::AbstractFont > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::AbstractFont > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractFont_t,0,1,"SmartAbstractFont_print");
  arg2 = (char*)lua_tostring(L, 2);
  (*arg1)->print((char const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAbstractFont_print__SWIG_3(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractFont > *arg1 = (boost::shared_ptr<love::AbstractFont > *) 0 ;
  string arg2 ;
  float arg3 ;
  float arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(boost::shared_ptr<love::AbstractFont > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractFont_t,0,1,"SmartAbstractFont_print");
  {
    string * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_string,0)) SWIG_fail;
    arg2 = *argp;
  }
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (*arg1)->print(arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAbstractFont_print__SWIG_4(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractFont > *arg1 = (boost::shared_ptr<love::AbstractFont > *) 0 ;
  string arg2 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(boost::shared_ptr<love::AbstractFont > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractFont_t,0,1,"SmartAbstractFont_print");
  {
    string * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_string,0)) SWIG_fail;
    arg2 = *argp;
  }
  arg3 = (float)lua_tonumber(L, 3);
  (*arg1)->print(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAbstractFont_print__SWIG_5(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractFont > *arg1 = (boost::shared_ptr<love::AbstractFont > *) 0 ;
  string arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::AbstractFont > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractFont_t,0,1,"SmartAbstractFont_print");
  {
    string * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_string,0)) SWIG_fail;
    arg2 = *argp;
  }
  (*arg1)->print(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAbstractFont_print__SWIG_6(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractFont > *arg1 = (boost::shared_ptr<love::AbstractFont > *) 0 ;
  char arg2 ;
  float arg3 ;
  float arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(boost::shared_ptr<love::AbstractFont > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractFont_t,0,1,"SmartAbstractFont_print");
  arg2 = ((char*)lua_tostring(L, 2))[0];
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (*arg1)->print(arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAbstractFont_print__SWIG_7(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractFont > *arg1 = (boost::shared_ptr<love::AbstractFont > *) 0 ;
  char arg2 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(boost::shared_ptr<love::AbstractFont > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractFont_t,0,1,"SmartAbstractFont_print");
  arg2 = ((char*)lua_tostring(L, 2))[0];
  arg3 = (float)lua_tonumber(L, 3);
  (*arg1)->print(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAbstractFont_print__SWIG_8(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractFont > *arg1 = (boost::shared_ptr<love::AbstractFont > *) 0 ;
  char arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::AbstractFont > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractFont_t,0,1,"SmartAbstractFont_print");
  arg2 = ((char*)lua_tostring(L, 2))[0];
  (*arg1)->print(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAbstractFont_print(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractFont_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_string, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SmartAbstractFont_print__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractFont_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]) && (lua_strlen(L,argv[1])==1);
      }
      if (_v) {
        return _wrap_SmartAbstractFont_print__SWIG_8(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractFont_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_SmartAbstractFont_print__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractFont_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_string, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SmartAbstractFont_print__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractFont_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]) && (lua_strlen(L,argv[1])==1);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SmartAbstractFont_print__SWIG_7(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractFont_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SmartAbstractFont_print__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractFont_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_string, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SmartAbstractFont_print__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractFont_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]) && (lua_strlen(L,argv[1])==1);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SmartAbstractFont_print__SWIG_6(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractFont_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SmartAbstractFont_print__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'SmartAbstractFont_print'");
  lua_error(L);return 0;
}


static int _wrap_SmartAbstractFont_getLineHeight(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractFont > *arg1 = (boost::shared_ptr<love::AbstractFont > *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractFont > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractFont_t,0,1,"SmartAbstractFont_getLineHeight");
  result = (float)(*arg1)->getLineHeight();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAbstractFont_getLineWidth(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractFont > *arg1 = (boost::shared_ptr<love::AbstractFont > *) 0 ;
  char *arg2 = (char *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::AbstractFont > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractFont_t,0,1,"SmartAbstractFont_getLineWidth");
  arg2 = (char*)lua_tostring(L, 2);
  result = (float)(*arg1)->getLineWidth((char const *)arg2);
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAbstractFont_load(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractFont > *arg1 = (boost::shared_ptr<love::AbstractFont > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractFont > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractFont_t,0,1,"SmartAbstractFont_load");
  result = (int)(*arg1)->load();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAbstractFont_unload(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractFont > *arg1 = (boost::shared_ptr<love::AbstractFont > *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractFont > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractFont_t,0,1,"SmartAbstractFont_unload");
  (*arg1)->unload();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SmartAbstractFont(void *obj) {
boost::shared_ptr<love::AbstractFont > *arg1 = (boost::shared_ptr<love::AbstractFont > *) obj;
delete arg1;
}
static swig_lua_method swig_boost_shared_ptr_Sl_love_AbstractFont_Sg__methods[] = {
    {"__deref__", _wrap_SmartAbstractFont___deref__}, 
    {"print", _wrap_SmartAbstractFont_print}, 
    {"getLineHeight", _wrap_SmartAbstractFont_getLineHeight}, 
    {"getLineWidth", _wrap_SmartAbstractFont_getLineWidth}, 
    {"load", _wrap_SmartAbstractFont_load}, 
    {"unload", _wrap_SmartAbstractFont_unload}, 
    {0,0}
};
static swig_lua_attribute swig_boost_shared_ptr_Sl_love_AbstractFont_Sg__attributes[] = {
    { "MAX_CHARS",_wrap_SmartAbstractFont_MAX_CHARS_get, 0 },
    { "width",_wrap_SmartAbstractFont_width_get, _wrap_SmartAbstractFont_width_set},
    {0,0,0}
};
static swig_lua_class *swig_boost_shared_ptr_Sl_love_AbstractFont_Sg__bases[] = {0};
swig_lua_class _wrap_class_boost_shared_ptr_Sl_love_AbstractFont_Sg_ = { "SmartAbstractFont", &SWIGTYPE_p_boost__shared_ptrTlove__AbstractFont_t,0, swig_delete_SmartAbstractFont, swig_boost_shared_ptr_Sl_love_AbstractFont_Sg__methods, swig_boost_shared_ptr_Sl_love_AbstractFont_Sg__attributes, swig_boost_shared_ptr_Sl_love_AbstractFont_Sg__bases };

static int _wrap_SmartParticleSystem___deref__(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ParticleSystem > *arg1 = (boost::shared_ptr<love::ParticleSystem > *) 0 ;
  love::ParticleSystem *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::ParticleSystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,1,"SmartParticleSystem___deref__");
  result = (love::ParticleSystem *)((boost::shared_ptr<love::ParticleSystem > const *)arg1)->operator ->();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__ParticleSystem,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_SmartParticleSystem(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ParticleSystem > *arg1 = (boost::shared_ptr<love::ParticleSystem > *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::ParticleSystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,1,"delete_SmartParticleSystem");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticleSystem_load(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ParticleSystem > *arg1 = (boost::shared_ptr<love::ParticleSystem > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::ParticleSystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,1,"SmartParticleSystem_load");
  result = (int)(*arg1)->load();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticleSystem_unload(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ParticleSystem > *arg1 = (boost::shared_ptr<love::ParticleSystem > *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::ParticleSystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,1,"SmartParticleSystem_unload");
  (*arg1)->unload();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticleSystem_spawn__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ParticleSystem > *arg1 = (boost::shared_ptr<love::ParticleSystem > *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::ParticleSystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,1,"SmartParticleSystem_spawn");
  arg2 = (float)lua_tonumber(L, 2);
  (*arg1)->spawn(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticleSystem_spawn__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ParticleSystem > *arg1 = (boost::shared_ptr<love::ParticleSystem > *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::ParticleSystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,1,"SmartParticleSystem_spawn");
  (*arg1)->spawn();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticleSystem_spawn(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SmartParticleSystem_spawn__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SmartParticleSystem_spawn__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'SmartParticleSystem_spawn'");
  lua_error(L);return 0;
}


static int _wrap_SmartParticleSystem_setAutostart(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ParticleSystem > *arg1 = (boost::shared_ptr<love::ParticleSystem > *) 0 ;
  bool arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isboolean(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::ParticleSystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,1,"SmartParticleSystem_setAutostart");
  arg2 = (bool)lua_toboolean(L, 2);
  (*arg1)->setAutostart(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticleSystem_getNumParticles(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ParticleSystem > *arg1 = (boost::shared_ptr<love::ParticleSystem > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::ParticleSystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,1,"SmartParticleSystem_getNumParticles");
  result = (int)(*arg1)->getNumParticles();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticleSystem_getParticles(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ParticleSystem > *arg1 = (boost::shared_ptr<love::ParticleSystem > *) 0 ;
  list<love::particle > *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::ParticleSystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,1,"SmartParticleSystem_getParticles");
  {
    list<love::particle > const &_result_ref = (*arg1)->getParticles();
    result = (list<love::particle > *) &_result_ref;
  }
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_listTlove__particle_t,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticleSystem_getSprite(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ParticleSystem > *arg1 = (boost::shared_ptr<love::ParticleSystem > *) 0 ;
  pSprite *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::ParticleSystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,1,"SmartParticleSystem_getSprite");
  {
    pSprite const &_result_ref = (*arg1)->getSprite();
    result = (pSprite *) &_result_ref;
  }
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pSprite,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticleSystem_getColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ParticleSystem > *arg1 = (boost::shared_ptr<love::ParticleSystem > *) 0 ;
  pAnimatedColor *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::ParticleSystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,1,"SmartParticleSystem_getColor");
  {
    pAnimatedColor const &_result_ref = (*arg1)->getColor();
    result = (pAnimatedColor *) &_result_ref;
  }
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pAnimatedColor,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticleSystem_isAdditive(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ParticleSystem > *arg1 = (boost::shared_ptr<love::ParticleSystem > *) 0 ;
  bool result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::ParticleSystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,1,"SmartParticleSystem_isAdditive");
  result = (bool)(*arg1)->isAdditive();
  SWIG_arg=0;
  lua_pushboolean(L,(int)result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticleSystem_reset(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ParticleSystem > *arg1 = (boost::shared_ptr<love::ParticleSystem > *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::ParticleSystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,1,"SmartParticleSystem_reset");
  (*arg1)->reset();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticleSystem_setPosition(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ParticleSystem > *arg1 = (boost::shared_ptr<love::ParticleSystem > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(boost::shared_ptr<love::ParticleSystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,1,"SmartParticleSystem_setPosition");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (*arg1)->setPosition(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticleSystem_getLifetime(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ParticleSystem > *arg1 = (boost::shared_ptr<love::ParticleSystem > *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::ParticleSystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,1,"SmartParticleSystem_getLifetime");
  result = (float)(*arg1)->getLifetime();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticleSystem_setLifetime(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ParticleSystem > *arg1 = (boost::shared_ptr<love::ParticleSystem > *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::ParticleSystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,1,"SmartParticleSystem_setLifetime");
  arg2 = (float)lua_tonumber(L, 2);
  (*arg1)->setLifetime(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticleSystem_getAge(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ParticleSystem > *arg1 = (boost::shared_ptr<love::ParticleSystem > *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::ParticleSystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,1,"SmartParticleSystem_getAge");
  result = (float)(*arg1)->getAge();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticleSystem_setLinger(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ParticleSystem > *arg1 = (boost::shared_ptr<love::ParticleSystem > *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::ParticleSystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,1,"SmartParticleSystem_setLinger");
  arg2 = (float)lua_tonumber(L, 2);
  (*arg1)->setLinger(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticleSystem_getLinger(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ParticleSystem > *arg1 = (boost::shared_ptr<love::ParticleSystem > *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::ParticleSystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,1,"SmartParticleSystem_getLinger");
  result = (float)(*arg1)->getLinger();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticleSystem_isDead(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ParticleSystem > *arg1 = (boost::shared_ptr<love::ParticleSystem > *) 0 ;
  bool result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::ParticleSystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,1,"SmartParticleSystem_isDead");
  result = (bool)(*arg1)->isDead();
  SWIG_arg=0;
  lua_pushboolean(L,(int)result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticleSystem_isActive(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ParticleSystem > *arg1 = (boost::shared_ptr<love::ParticleSystem > *) 0 ;
  bool result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::ParticleSystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,1,"SmartParticleSystem_isActive");
  result = (bool)(*arg1)->isActive();
  SWIG_arg=0;
  lua_pushboolean(L,(int)result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticleSystem_setParticlesPerSecond(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ParticleSystem > *arg1 = (boost::shared_ptr<love::ParticleSystem > *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::ParticleSystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,1,"SmartParticleSystem_setParticlesPerSecond");
  arg2 = (float)lua_tonumber(L, 2);
  (*arg1)->setParticlesPerSecond(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticleSystem_addColor__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ParticleSystem > *arg1 = (boost::shared_ptr<love::ParticleSystem > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  float arg6 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  if(!lua_isnumber(L,6)) SWIG_fail_arg(6);
  arg1=(boost::shared_ptr<love::ParticleSystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,1,"SmartParticleSystem_addColor");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  (*arg1)->addColor(arg2,arg3,arg4,arg5,arg6);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticleSystem_addColor__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ParticleSystem > *arg1 = (boost::shared_ptr<love::ParticleSystem > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  arg1=(boost::shared_ptr<love::ParticleSystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,1,"SmartParticleSystem_addColor");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  (*arg1)->addColor(arg2,arg3,arg4,arg5);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticleSystem_addColor__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ParticleSystem > *arg1 = (boost::shared_ptr<love::ParticleSystem > *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(boost::shared_ptr<love::ParticleSystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,1,"SmartParticleSystem_addColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"SmartParticleSystem_addColor");
  arg3 = (float)lua_tonumber(L, 3);
  (*arg1)->addColor((love::pAbstractColor const *)arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticleSystem_addColor__SWIG_3(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ParticleSystem > *arg1 = (boost::shared_ptr<love::ParticleSystem > *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::ParticleSystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,1,"SmartParticleSystem_addColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"SmartParticleSystem_addColor");
  (*arg1)->addColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticleSystem_addColor(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SmartParticleSystem_addColor__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SmartParticleSystem_addColor__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_SmartParticleSystem_addColor__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_SmartParticleSystem_addColor__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'SmartParticleSystem_addColor'");
  lua_error(L);return 0;
}


static int _wrap_SmartParticleSystem_setSprite__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ParticleSystem > *arg1 = (boost::shared_ptr<love::ParticleSystem > *) 0 ;
  pSprite *arg2 = (pSprite *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::ParticleSystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,1,"SmartParticleSystem_setSprite");
  arg2=(pSprite *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_pSprite,0,2,"SmartParticleSystem_setSprite");
  (*arg1)->setSprite((pSprite const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticleSystem_setSprite__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ParticleSystem > *arg1 = (boost::shared_ptr<love::ParticleSystem > *) 0 ;
  pAbstractImage *arg2 = (pAbstractImage *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::ParticleSystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,1,"SmartParticleSystem_setSprite");
  arg2=(pAbstractImage *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_pAbstractImage,0,2,"SmartParticleSystem_setSprite");
  (*arg1)->setSprite((pAbstractImage const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticleSystem_setSprite__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ParticleSystem > *arg1 = (boost::shared_ptr<love::ParticleSystem > *) 0 ;
  love::pFrameAnimation *arg2 = (love::pFrameAnimation *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::ParticleSystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,1,"SmartParticleSystem_setSprite");
  arg2=(love::pFrameAnimation *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__FrameAnimation_t,0,2,"SmartParticleSystem_setSprite");
  (*arg1)->setSprite((love::pFrameAnimation const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticleSystem_setSprite(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_pSprite, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SmartParticleSystem_setSprite__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_pAbstractImage, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SmartParticleSystem_setSprite__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__FrameAnimation_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SmartParticleSystem_setSprite__SWIG_2(L);
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'SmartParticleSystem_setSprite'");
  lua_error(L);return 0;
}


static int _wrap_SmartParticleSystem_setAdditiveBlending(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ParticleSystem > *arg1 = (boost::shared_ptr<love::ParticleSystem > *) 0 ;
  bool arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isboolean(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::ParticleSystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,1,"SmartParticleSystem_setAdditiveBlending");
  arg2 = (bool)lua_toboolean(L, 2);
  (*arg1)->setAdditiveBlending(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticleSystem_setDirection__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ParticleSystem > *arg1 = (boost::shared_ptr<love::ParticleSystem > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(boost::shared_ptr<love::ParticleSystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,1,"SmartParticleSystem_setDirection");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (*arg1)->setDirection(arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticleSystem_setDirection__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ParticleSystem > *arg1 = (boost::shared_ptr<love::ParticleSystem > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(boost::shared_ptr<love::ParticleSystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,1,"SmartParticleSystem_setDirection");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (*arg1)->setDirection(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticleSystem_setDirection__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ParticleSystem > *arg1 = (boost::shared_ptr<love::ParticleSystem > *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::ParticleSystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,1,"SmartParticleSystem_setDirection");
  arg2 = (float)lua_tonumber(L, 2);
  (*arg1)->setDirection(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticleSystem_setDirection(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SmartParticleSystem_setDirection__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SmartParticleSystem_setDirection__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SmartParticleSystem_setDirection__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'SmartParticleSystem_setDirection'");
  lua_error(L);return 0;
}


static int _wrap_SmartParticleSystem_setStartSpeed__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ParticleSystem > *arg1 = (boost::shared_ptr<love::ParticleSystem > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(boost::shared_ptr<love::ParticleSystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,1,"SmartParticleSystem_setStartSpeed");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (*arg1)->setStartSpeed(arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticleSystem_setStartSpeed__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ParticleSystem > *arg1 = (boost::shared_ptr<love::ParticleSystem > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(boost::shared_ptr<love::ParticleSystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,1,"SmartParticleSystem_setStartSpeed");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (*arg1)->setStartSpeed(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticleSystem_setStartSpeed__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ParticleSystem > *arg1 = (boost::shared_ptr<love::ParticleSystem > *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::ParticleSystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,1,"SmartParticleSystem_setStartSpeed");
  arg2 = (float)lua_tonumber(L, 2);
  (*arg1)->setStartSpeed(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticleSystem_setStartSpeed(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SmartParticleSystem_setStartSpeed__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SmartParticleSystem_setStartSpeed__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SmartParticleSystem_setStartSpeed__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'SmartParticleSystem_setStartSpeed'");
  lua_error(L);return 0;
}


static int _wrap_SmartParticleSystem_setGravity__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ParticleSystem > *arg1 = (boost::shared_ptr<love::ParticleSystem > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(boost::shared_ptr<love::ParticleSystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,1,"SmartParticleSystem_setGravity");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (*arg1)->setGravity(arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticleSystem_setGravity__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ParticleSystem > *arg1 = (boost::shared_ptr<love::ParticleSystem > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(boost::shared_ptr<love::ParticleSystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,1,"SmartParticleSystem_setGravity");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (*arg1)->setGravity(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticleSystem_setGravity__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ParticleSystem > *arg1 = (boost::shared_ptr<love::ParticleSystem > *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::ParticleSystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,1,"SmartParticleSystem_setGravity");
  arg2 = (float)lua_tonumber(L, 2);
  (*arg1)->setGravity(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticleSystem_setGravity(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SmartParticleSystem_setGravity__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SmartParticleSystem_setGravity__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SmartParticleSystem_setGravity__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'SmartParticleSystem_setGravity'");
  lua_error(L);return 0;
}


static int _wrap_SmartParticleSystem_setRadialAcc__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ParticleSystem > *arg1 = (boost::shared_ptr<love::ParticleSystem > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(boost::shared_ptr<love::ParticleSystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,1,"SmartParticleSystem_setRadialAcc");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (*arg1)->setRadialAcc(arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticleSystem_setRadialAcc__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ParticleSystem > *arg1 = (boost::shared_ptr<love::ParticleSystem > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(boost::shared_ptr<love::ParticleSystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,1,"SmartParticleSystem_setRadialAcc");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (*arg1)->setRadialAcc(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticleSystem_setRadialAcc__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ParticleSystem > *arg1 = (boost::shared_ptr<love::ParticleSystem > *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::ParticleSystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,1,"SmartParticleSystem_setRadialAcc");
  arg2 = (float)lua_tonumber(L, 2);
  (*arg1)->setRadialAcc(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticleSystem_setRadialAcc(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SmartParticleSystem_setRadialAcc__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SmartParticleSystem_setRadialAcc__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SmartParticleSystem_setRadialAcc__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'SmartParticleSystem_setRadialAcc'");
  lua_error(L);return 0;
}


static int _wrap_SmartParticleSystem_setTangentialAcc__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ParticleSystem > *arg1 = (boost::shared_ptr<love::ParticleSystem > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(boost::shared_ptr<love::ParticleSystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,1,"SmartParticleSystem_setTangentialAcc");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (*arg1)->setTangentialAcc(arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticleSystem_setTangentialAcc__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ParticleSystem > *arg1 = (boost::shared_ptr<love::ParticleSystem > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(boost::shared_ptr<love::ParticleSystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,1,"SmartParticleSystem_setTangentialAcc");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (*arg1)->setTangentialAcc(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticleSystem_setTangentialAcc__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ParticleSystem > *arg1 = (boost::shared_ptr<love::ParticleSystem > *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::ParticleSystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,1,"SmartParticleSystem_setTangentialAcc");
  arg2 = (float)lua_tonumber(L, 2);
  (*arg1)->setTangentialAcc(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticleSystem_setTangentialAcc(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SmartParticleSystem_setTangentialAcc__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SmartParticleSystem_setTangentialAcc__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SmartParticleSystem_setTangentialAcc__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'SmartParticleSystem_setTangentialAcc'");
  lua_error(L);return 0;
}


static int _wrap_SmartParticleSystem_setParticleLifetime__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ParticleSystem > *arg1 = (boost::shared_ptr<love::ParticleSystem > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(boost::shared_ptr<love::ParticleSystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,1,"SmartParticleSystem_setParticleLifetime");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (*arg1)->setParticleLifetime(arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticleSystem_setParticleLifetime__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ParticleSystem > *arg1 = (boost::shared_ptr<love::ParticleSystem > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(boost::shared_ptr<love::ParticleSystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,1,"SmartParticleSystem_setParticleLifetime");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (*arg1)->setParticleLifetime(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticleSystem_setParticleLifetime__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ParticleSystem > *arg1 = (boost::shared_ptr<love::ParticleSystem > *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::ParticleSystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,1,"SmartParticleSystem_setParticleLifetime");
  arg2 = (float)lua_tonumber(L, 2);
  (*arg1)->setParticleLifetime(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticleSystem_setParticleLifetime(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SmartParticleSystem_setParticleLifetime__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SmartParticleSystem_setParticleLifetime__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SmartParticleSystem_setParticleLifetime__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'SmartParticleSystem_setParticleLifetime'");
  lua_error(L);return 0;
}


static int _wrap_SmartParticleSystem_setParticleSize__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ParticleSystem > *arg1 = (boost::shared_ptr<love::ParticleSystem > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(boost::shared_ptr<love::ParticleSystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,1,"SmartParticleSystem_setParticleSize");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (*arg1)->setParticleSize(arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticleSystem_setParticleSize__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ParticleSystem > *arg1 = (boost::shared_ptr<love::ParticleSystem > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(boost::shared_ptr<love::ParticleSystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,1,"SmartParticleSystem_setParticleSize");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (*arg1)->setParticleSize(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticleSystem_setParticleSize__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ParticleSystem > *arg1 = (boost::shared_ptr<love::ParticleSystem > *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::ParticleSystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,1,"SmartParticleSystem_setParticleSize");
  arg2 = (float)lua_tonumber(L, 2);
  (*arg1)->setParticleSize(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticleSystem_setParticleSize(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SmartParticleSystem_setParticleSize__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SmartParticleSystem_setParticleSize__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SmartParticleSystem_setParticleSize__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'SmartParticleSystem_setParticleSize'");
  lua_error(L);return 0;
}


static int _wrap_SmartParticleSystem_setParticleSpin__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ParticleSystem > *arg1 = (boost::shared_ptr<love::ParticleSystem > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(boost::shared_ptr<love::ParticleSystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,1,"SmartParticleSystem_setParticleSpin");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (*arg1)->setParticleSpin(arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticleSystem_setParticleSpin__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ParticleSystem > *arg1 = (boost::shared_ptr<love::ParticleSystem > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(boost::shared_ptr<love::ParticleSystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,1,"SmartParticleSystem_setParticleSpin");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (*arg1)->setParticleSpin(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticleSystem_setParticleSpin__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ParticleSystem > *arg1 = (boost::shared_ptr<love::ParticleSystem > *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::ParticleSystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,1,"SmartParticleSystem_setParticleSpin");
  arg2 = (float)lua_tonumber(L, 2);
  (*arg1)->setParticleSpin(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticleSystem_setParticleSpin(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SmartParticleSystem_setParticleSpin__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SmartParticleSystem_setParticleSpin__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SmartParticleSystem_setParticleSpin__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'SmartParticleSystem_setParticleSpin'");
  lua_error(L);return 0;
}


static int _wrap_SmartParticleSystem_update(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ParticleSystem > *arg1 = (boost::shared_ptr<love::ParticleSystem > *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::ParticleSystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,1,"SmartParticleSystem_update");
  arg2 = (float)lua_tonumber(L, 2);
  (*arg1)->update(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticleSystem_render__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ParticleSystem > *arg1 = (boost::shared_ptr<love::ParticleSystem > *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::ParticleSystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,1,"SmartParticleSystem_render");
  (*arg1)->render();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticleSystem_render__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ParticleSystem > *arg1 = (boost::shared_ptr<love::ParticleSystem > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(boost::shared_ptr<love::ParticleSystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0,1,"SmartParticleSystem_render");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (*arg1)->render(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticleSystem_render(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SmartParticleSystem_render__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SmartParticleSystem_render__SWIG_1(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'SmartParticleSystem_render'");
  lua_error(L);return 0;
}


static void swig_delete_SmartParticleSystem(void *obj) {
boost::shared_ptr<love::ParticleSystem > *arg1 = (boost::shared_ptr<love::ParticleSystem > *) obj;
delete arg1;
}
static swig_lua_method swig_boost_shared_ptr_Sl_love_ParticleSystem_Sg__methods[] = {
    {"__deref__", _wrap_SmartParticleSystem___deref__}, 
    {"load", _wrap_SmartParticleSystem_load}, 
    {"unload", _wrap_SmartParticleSystem_unload}, 
    {"spawn", _wrap_SmartParticleSystem_spawn}, 
    {"setAutostart", _wrap_SmartParticleSystem_setAutostart}, 
    {"getNumParticles", _wrap_SmartParticleSystem_getNumParticles}, 
    {"getParticles", _wrap_SmartParticleSystem_getParticles}, 
    {"getSprite", _wrap_SmartParticleSystem_getSprite}, 
    {"getColor", _wrap_SmartParticleSystem_getColor}, 
    {"isAdditive", _wrap_SmartParticleSystem_isAdditive}, 
    {"reset", _wrap_SmartParticleSystem_reset}, 
    {"setPosition", _wrap_SmartParticleSystem_setPosition}, 
    {"getLifetime", _wrap_SmartParticleSystem_getLifetime}, 
    {"setLifetime", _wrap_SmartParticleSystem_setLifetime}, 
    {"getAge", _wrap_SmartParticleSystem_getAge}, 
    {"setLinger", _wrap_SmartParticleSystem_setLinger}, 
    {"getLinger", _wrap_SmartParticleSystem_getLinger}, 
    {"isDead", _wrap_SmartParticleSystem_isDead}, 
    {"isActive", _wrap_SmartParticleSystem_isActive}, 
    {"setParticlesPerSecond", _wrap_SmartParticleSystem_setParticlesPerSecond}, 
    {"addColor", _wrap_SmartParticleSystem_addColor}, 
    {"setSprite", _wrap_SmartParticleSystem_setSprite}, 
    {"setAdditiveBlending", _wrap_SmartParticleSystem_setAdditiveBlending}, 
    {"setDirection", _wrap_SmartParticleSystem_setDirection}, 
    {"setStartSpeed", _wrap_SmartParticleSystem_setStartSpeed}, 
    {"setGravity", _wrap_SmartParticleSystem_setGravity}, 
    {"setRadialAcc", _wrap_SmartParticleSystem_setRadialAcc}, 
    {"setTangentialAcc", _wrap_SmartParticleSystem_setTangentialAcc}, 
    {"setParticleLifetime", _wrap_SmartParticleSystem_setParticleLifetime}, 
    {"setParticleSize", _wrap_SmartParticleSystem_setParticleSize}, 
    {"setParticleSpin", _wrap_SmartParticleSystem_setParticleSpin}, 
    {"update", _wrap_SmartParticleSystem_update}, 
    {"render", _wrap_SmartParticleSystem_render}, 
    {0,0}
};
static swig_lua_attribute swig_boost_shared_ptr_Sl_love_ParticleSystem_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_boost_shared_ptr_Sl_love_ParticleSystem_Sg__bases[] = {0};
swig_lua_class _wrap_class_boost_shared_ptr_Sl_love_ParticleSystem_Sg_ = { "SmartParticleSystem", &SWIGTYPE_p_boost__shared_ptrTlove__ParticleSystem_t,0, swig_delete_SmartParticleSystem, swig_boost_shared_ptr_Sl_love_ParticleSystem_Sg__methods, swig_boost_shared_ptr_Sl_love_ParticleSystem_Sg__attributes, swig_boost_shared_ptr_Sl_love_ParticleSystem_Sg__bases };

static int _wrap_SmartBezier___deref__(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Bezier > *arg1 = (boost::shared_ptr<love::Bezier > *) 0 ;
  love::Bezier *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Bezier > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Bezier_t,0,1,"SmartBezier___deref__");
  result = (love::Bezier *)((boost::shared_ptr<love::Bezier > const *)arg1)->operator ->();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__Bezier,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_SmartBezier(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Bezier > *arg1 = (boost::shared_ptr<love::Bezier > *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Bezier > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Bezier_t,0,1,"delete_SmartBezier");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SmartBezier(void *obj) {
boost::shared_ptr<love::Bezier > *arg1 = (boost::shared_ptr<love::Bezier > *) obj;
delete arg1;
}
static swig_lua_method swig_boost_shared_ptr_Sl_love_Bezier_Sg__methods[] = {
    {"__deref__", _wrap_SmartBezier___deref__}, 
    {0,0}
};
static swig_lua_attribute swig_boost_shared_ptr_Sl_love_Bezier_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_boost_shared_ptr_Sl_love_Bezier_Sg__bases[] = {0};
swig_lua_class _wrap_class_boost_shared_ptr_Sl_love_Bezier_Sg_ = { "SmartBezier", &SWIGTYPE_p_boost__shared_ptrTlove__Bezier_t,0, swig_delete_SmartBezier, swig_boost_shared_ptr_Sl_love_Bezier_Sg__methods, swig_boost_shared_ptr_Sl_love_Bezier_Sg__attributes, swig_boost_shared_ptr_Sl_love_Bezier_Sg__bases };

static int _wrap_SmartMenu___deref__(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  love::AbstractMenu *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu___deref__");
  result = (love::AbstractMenu *)((boost::shared_ptr<love::AbstractMenu > const *)arg1)->operator ->();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__AbstractMenu,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_SmartMenu(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"delete_SmartMenu");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_LOVE_MENU_VERTICAL_get(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_LOVE_MENU_VERTICAL_get");
  result = (int)(int) (love::AbstractMenu::LOVE_MENU_VERTICAL);
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_LOVE_MENU_HORIZONTAL_get(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_LOVE_MENU_HORIZONTAL_get");
  result = (int)(int) (love::AbstractMenu::LOVE_MENU_HORIZONTAL);
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_LOVE_MENU_DEFAULT_get(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_LOVE_MENU_DEFAULT_get");
  result = (int)(int) (love::AbstractMenu::LOVE_MENU_DEFAULT);
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_LOVE_MENU_WINDOW_get(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_LOVE_MENU_WINDOW_get");
  result = (int)(int) (love::AbstractMenu::LOVE_MENU_WINDOW);
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_LOVE_MENU_SCROLL_get(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_LOVE_MENU_SCROLL_get");
  result = (int)(int) (love::AbstractMenu::LOVE_MENU_SCROLL);
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_show(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_show");
  (*arg1)->show();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_hide(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_hide");
  (*arg1)->hide();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_setFont(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  love::pAbstractFont *arg2 = (love::pAbstractFont *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_setFont");
  arg2=(love::pAbstractFont *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractFont_t,0,2,"SmartMenu_setFont");
  (*arg1)->setFont((love::pAbstractFont const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_setColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_setColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"SmartMenu_setColor");
  (*arg1)->setColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_setBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_setBackgroundColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"SmartMenu_setBackgroundColor");
  (*arg1)->setBackgroundColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_setBackground(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  pAbstractImage *arg2 = (pAbstractImage *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_setBackground");
  arg2=(pAbstractImage *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_pAbstractImage,0,2,"SmartMenu_setBackground");
  (*arg1)->setBackground((pAbstractImage const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_setSpacing(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_setSpacing");
  arg2 = (int)lua_tonumber(L, 2);
  (*arg1)->setSpacing(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_stretchContent(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  bool arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isboolean(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_stretchContent");
  arg2 = (bool)lua_toboolean(L, 2);
  (*arg1)->stretchContent(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_align(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_align");
  arg2 = (int)lua_tonumber(L, 2);
  (*arg1)->align(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_valign(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_valign");
  arg2 = (int)lua_tonumber(L, 2);
  (*arg1)->valign(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_getFont(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  love::pAbstractFont result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_getFont");
  result = (*arg1)->getFont();
  SWIG_arg=0;
  {
    love::pAbstractFont * resultptr;
    resultptr = new love::pAbstractFont((love::pAbstractFont &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractFont_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_getBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_getBackgroundColor");
  result = (*arg1)->getBackgroundColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_getSpacing(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_getSpacing");
  result = (int)(*arg1)->getSpacing();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_getMenuType(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_getMenuType");
  result = (int)(*arg1)->getMenuType();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_setSize(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_setSize");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (*arg1)->setSize(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_setWidth(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_setWidth");
  arg2 = (int)lua_tonumber(L, 2);
  (*arg1)->setWidth(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_setHeight(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_setHeight");
  arg2 = (int)lua_tonumber(L, 2);
  (*arg1)->setHeight(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_setBorderSize(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  unsigned int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_setBorderSize");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (*arg1)->setBorderSize(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_setPosition(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_setPosition");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (*arg1)->setPosition(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_setX(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_setX");
  arg2 = (int)lua_tonumber(L, 2);
  (*arg1)->setX(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_setY(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_setY");
  arg2 = (int)lua_tonumber(L, 2);
  (*arg1)->setY(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_getWidth(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_getWidth");
  result = (int)(*arg1)->getWidth();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_getHeight(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_getHeight");
  result = (int)(*arg1)->getHeight();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_getX(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_getX");
  result = (int)(*arg1)->getX();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_getY(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_getY");
  result = (int)(*arg1)->getY();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_getBorderSize(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  unsigned int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_getBorderSize");
  result = (unsigned int)(*arg1)->getBorderSize();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_adjustSize(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_adjustSize");
  (*arg1)->adjustSize();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_adjustWidth(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_adjustWidth");
  (*arg1)->adjustWidth();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_adjustHeight(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_adjustHeight");
  (*arg1)->adjustHeight();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_adjustContent(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_adjustContent");
  result = (int)(*arg1)->adjustContent();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_draw(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  gcn::Graphics *arg2 = (gcn::Graphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_draw");
  arg2=(gcn::Graphics *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Graphics,0,2,"SmartMenu_draw");
  (*arg1)->draw(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_drawBorder(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  gcn::Graphics *arg2 = (gcn::Graphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_drawBorder");
  arg2=(gcn::Graphics *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Graphics,0,2,"SmartMenu_drawBorder");
  (*arg1)->drawBorder(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_drawChildren(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  gcn::Graphics *arg2 = (gcn::Graphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_drawChildren");
  arg2=(gcn::Graphics *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Graphics,0,2,"SmartMenu_drawChildren");
  (*arg1)->drawChildren(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_add(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  gcn::Widget *arg2 = (gcn::Widget *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_add");
  arg2=(gcn::Widget *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Widget,0,2,"SmartMenu_add");
  (*arg1)->add(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_setCaption(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_setCaption");
  arg2 = (char*)lua_tostring(L, 2);
  (*arg1)->setCaption((char const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_setTitleBarHeight(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  unsigned int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_setTitleBarHeight");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (*arg1)->setTitleBarHeight(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_getCaption(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_getCaption");
  result = (char *)(*arg1)->getCaption();
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_getTitleBarHeight(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  unsigned int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_getTitleBarHeight");
  result = (unsigned int)(*arg1)->getTitleBarHeight();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_addMenu__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  boost::shared_ptr<love::AbstractMenu > result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_addMenu");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (*arg1)->addMenu(arg2,arg3,arg4);
  SWIG_arg=0;
  {
    boost::shared_ptr<love::AbstractMenu > * resultptr;
    resultptr = new boost::shared_ptr<love::AbstractMenu >((boost::shared_ptr<love::AbstractMenu > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_addMenu__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  int arg2 ;
  int arg3 ;
  boost::shared_ptr<love::AbstractMenu > result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_addMenu");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (*arg1)->addMenu(arg2,arg3);
  SWIG_arg=0;
  {
    boost::shared_ptr<love::AbstractMenu > * resultptr;
    resultptr = new boost::shared_ptr<love::AbstractMenu >((boost::shared_ptr<love::AbstractMenu > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_addMenu__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  int arg2 ;
  boost::shared_ptr<love::AbstractMenu > result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_addMenu");
  arg2 = (int)lua_tonumber(L, 2);
  result = (*arg1)->addMenu(arg2);
  SWIG_arg=0;
  {
    boost::shared_ptr<love::AbstractMenu > * resultptr;
    resultptr = new boost::shared_ptr<love::AbstractMenu >((boost::shared_ptr<love::AbstractMenu > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_addMenu(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SmartMenu_addMenu__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SmartMenu_addMenu__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SmartMenu_addMenu__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'SmartMenu_addMenu'");
  lua_error(L);return 0;
}


static int _wrap_SmartMenu_addScrollMenu__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  boost::shared_ptr<love::AbstractMenu > result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_addScrollMenu");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (*arg1)->addScrollMenu(arg2,arg3,arg4);
  SWIG_arg=0;
  {
    boost::shared_ptr<love::AbstractMenu > * resultptr;
    resultptr = new boost::shared_ptr<love::AbstractMenu >((boost::shared_ptr<love::AbstractMenu > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_addScrollMenu__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  int arg2 ;
  int arg3 ;
  boost::shared_ptr<love::AbstractMenu > result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_addScrollMenu");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (*arg1)->addScrollMenu(arg2,arg3);
  SWIG_arg=0;
  {
    boost::shared_ptr<love::AbstractMenu > * resultptr;
    resultptr = new boost::shared_ptr<love::AbstractMenu >((boost::shared_ptr<love::AbstractMenu > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_addScrollMenu__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  int arg2 ;
  boost::shared_ptr<love::AbstractMenu > result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_addScrollMenu");
  arg2 = (int)lua_tonumber(L, 2);
  result = (*arg1)->addScrollMenu(arg2);
  SWIG_arg=0;
  {
    boost::shared_ptr<love::AbstractMenu > * resultptr;
    resultptr = new boost::shared_ptr<love::AbstractMenu >((boost::shared_ptr<love::AbstractMenu > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_addScrollMenu(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SmartMenu_addScrollMenu__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SmartMenu_addScrollMenu__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SmartMenu_addScrollMenu__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'SmartMenu_addScrollMenu'");
  lua_error(L);return 0;
}


static int _wrap_SmartMenu_addWindowMenu__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int arg5 ;
  boost::shared_ptr<love::AbstractMenu > result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isstring(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_addWindowMenu");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char*)lua_tostring(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  result = (*arg1)->addWindowMenu(arg2,(char const *)arg3,arg4,arg5);
  SWIG_arg=0;
  {
    boost::shared_ptr<love::AbstractMenu > * resultptr;
    resultptr = new boost::shared_ptr<love::AbstractMenu >((boost::shared_ptr<love::AbstractMenu > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_addWindowMenu__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  boost::shared_ptr<love::AbstractMenu > result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isstring(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_addWindowMenu");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char*)lua_tostring(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (*arg1)->addWindowMenu(arg2,(char const *)arg3,arg4);
  SWIG_arg=0;
  {
    boost::shared_ptr<love::AbstractMenu > * resultptr;
    resultptr = new boost::shared_ptr<love::AbstractMenu >((boost::shared_ptr<love::AbstractMenu > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_addWindowMenu__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  boost::shared_ptr<love::AbstractMenu > result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isstring(L,3)) SWIG_fail_arg(3);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_addWindowMenu");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char*)lua_tostring(L, 3);
  result = (*arg1)->addWindowMenu(arg2,(char const *)arg3);
  SWIG_arg=0;
  {
    boost::shared_ptr<love::AbstractMenu > * resultptr;
    resultptr = new boost::shared_ptr<love::AbstractMenu >((boost::shared_ptr<love::AbstractMenu > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_addWindowMenu__SWIG_3(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  int arg2 ;
  boost::shared_ptr<love::AbstractMenu > result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_addWindowMenu");
  arg2 = (int)lua_tonumber(L, 2);
  result = (*arg1)->addWindowMenu(arg2);
  SWIG_arg=0;
  {
    boost::shared_ptr<love::AbstractMenu > * resultptr;
    resultptr = new boost::shared_ptr<love::AbstractMenu >((boost::shared_ptr<love::AbstractMenu > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_addWindowMenu(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SmartMenu_addWindowMenu__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_SmartMenu_addWindowMenu__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SmartMenu_addWindowMenu__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_SmartMenu_addWindowMenu__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'SmartMenu_addWindowMenu'");
  lua_error(L);return 0;
}


static int _wrap_SmartMenu_addLabel__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  love::pLabel result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_addLabel");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (*arg1)->addLabel((char const *)arg2,arg3,arg4);
  SWIG_arg=0;
  {
    love::pLabel * resultptr;
    resultptr = new love::pLabel((love::pLabel &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__Label_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_addLabel__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  love::pLabel result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_addLabel");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (*arg1)->addLabel((char const *)arg2,arg3);
  SWIG_arg=0;
  {
    love::pLabel * resultptr;
    resultptr = new love::pLabel((love::pLabel &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__Label_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_addLabel__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  char *arg2 = (char *) 0 ;
  love::pLabel result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_addLabel");
  arg2 = (char*)lua_tostring(L, 2);
  result = (*arg1)->addLabel((char const *)arg2);
  SWIG_arg=0;
  {
    love::pLabel * resultptr;
    resultptr = new love::pLabel((love::pLabel &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__Label_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_addLabel(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_SmartMenu_addLabel__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SmartMenu_addLabel__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SmartMenu_addLabel__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'SmartMenu_addLabel'");
  lua_error(L);return 0;
}


static int _wrap_SmartMenu_addMultilineLabel__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  love::pMultilineLabel result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_addMultilineLabel");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (*arg1)->addMultilineLabel((char const *)arg2,arg3,arg4);
  SWIG_arg=0;
  {
    love::pMultilineLabel * resultptr;
    resultptr = new love::pMultilineLabel((love::pMultilineLabel &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__MultilineLabel_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_addMultilineLabel__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  love::pMultilineLabel result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_addMultilineLabel");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (*arg1)->addMultilineLabel((char const *)arg2,arg3);
  SWIG_arg=0;
  {
    love::pMultilineLabel * resultptr;
    resultptr = new love::pMultilineLabel((love::pMultilineLabel &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__MultilineLabel_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_addMultilineLabel__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  char *arg2 = (char *) 0 ;
  love::pMultilineLabel result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_addMultilineLabel");
  arg2 = (char*)lua_tostring(L, 2);
  result = (*arg1)->addMultilineLabel((char const *)arg2);
  SWIG_arg=0;
  {
    love::pMultilineLabel * resultptr;
    resultptr = new love::pMultilineLabel((love::pMultilineLabel &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__MultilineLabel_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_addMultilineLabel(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_SmartMenu_addMultilineLabel__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SmartMenu_addMultilineLabel__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SmartMenu_addMultilineLabel__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'SmartMenu_addMultilineLabel'");
  lua_error(L);return 0;
}


static int _wrap_SmartMenu_addImage(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  pAbstractImage *arg2 = (pAbstractImage *) 0 ;
  love::pLabel result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_addImage");
  arg2=(pAbstractImage *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_pAbstractImage,0,2,"SmartMenu_addImage");
  result = (*arg1)->addImage((pAbstractImage const *)arg2);
  SWIG_arg=0;
  {
    love::pLabel * resultptr;
    resultptr = new love::pLabel((love::pLabel &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__Label_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_addButton__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int arg5 ;
  love::pButton result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isstring(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_addButton");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (char*)lua_tostring(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  result = (*arg1)->addButton((char const *)arg2,(char const *)arg3,arg4,arg5);
  SWIG_arg=0;
  {
    love::pButton * resultptr;
    resultptr = new love::pButton((love::pButton &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__Button_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_addButton__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  love::pButton result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isstring(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_addButton");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (char*)lua_tostring(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (*arg1)->addButton((char const *)arg2,(char const *)arg3,arg4);
  SWIG_arg=0;
  {
    love::pButton * resultptr;
    resultptr = new love::pButton((love::pButton &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__Button_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_addButton__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  love::pButton result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isstring(L,3)) SWIG_fail_arg(3);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_addButton");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (char*)lua_tostring(L, 3);
  result = (*arg1)->addButton((char const *)arg2,(char const *)arg3);
  SWIG_arg=0;
  {
    love::pButton * resultptr;
    resultptr = new love::pButton((love::pButton &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__Button_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_addButton(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_SmartMenu_addButton__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SmartMenu_addButton__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_SmartMenu_addButton__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'SmartMenu_addButton'");
  lua_error(L);return 0;
}


static int _wrap_SmartMenu_addTextField__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int arg5 ;
  love::pTextField result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isstring(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_addTextField");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (char*)lua_tostring(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  result = (*arg1)->addTextField((char const *)arg2,(char const *)arg3,arg4,arg5);
  SWIG_arg=0;
  {
    love::pTextField * resultptr;
    resultptr = new love::pTextField((love::pTextField &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__TextField_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_addTextField__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  love::pTextField result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isstring(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_addTextField");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (char*)lua_tostring(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (*arg1)->addTextField((char const *)arg2,(char const *)arg3,arg4);
  SWIG_arg=0;
  {
    love::pTextField * resultptr;
    resultptr = new love::pTextField((love::pTextField &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__TextField_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_addTextField__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  love::pTextField result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isstring(L,3)) SWIG_fail_arg(3);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_addTextField");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (char*)lua_tostring(L, 3);
  result = (*arg1)->addTextField((char const *)arg2,(char const *)arg3);
  SWIG_arg=0;
  {
    love::pTextField * resultptr;
    resultptr = new love::pTextField((love::pTextField &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__TextField_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_addTextField__SWIG_3(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  char *arg2 = (char *) 0 ;
  love::pTextField result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_addTextField");
  arg2 = (char*)lua_tostring(L, 2);
  result = (*arg1)->addTextField((char const *)arg2);
  SWIG_arg=0;
  {
    love::pTextField * resultptr;
    resultptr = new love::pTextField((love::pTextField &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__TextField_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_addTextField(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_SmartMenu_addTextField__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_SmartMenu_addTextField__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SmartMenu_addTextField__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_SmartMenu_addTextField__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'SmartMenu_addTextField'");
  lua_error(L);return 0;
}


static int _wrap_SmartMenu_addDropDown__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  love::pDropDown result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_addDropDown");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (*arg1)->addDropDown((char const *)arg2,arg3,arg4);
  SWIG_arg=0;
  {
    love::pDropDown * resultptr;
    resultptr = new love::pDropDown((love::pDropDown &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__DropDown_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_addDropDown__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  love::pDropDown result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_addDropDown");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (*arg1)->addDropDown((char const *)arg2,arg3);
  SWIG_arg=0;
  {
    love::pDropDown * resultptr;
    resultptr = new love::pDropDown((love::pDropDown &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__DropDown_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_addDropDown__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  char *arg2 = (char *) 0 ;
  love::pDropDown result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_addDropDown");
  arg2 = (char*)lua_tostring(L, 2);
  result = (*arg1)->addDropDown((char const *)arg2);
  SWIG_arg=0;
  {
    love::pDropDown * resultptr;
    resultptr = new love::pDropDown((love::pDropDown &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__DropDown_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_addDropDown(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_SmartMenu_addDropDown__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SmartMenu_addDropDown__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SmartMenu_addDropDown__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'SmartMenu_addDropDown'");
  lua_error(L);return 0;
}


static int _wrap_SmartMenu_addRadioButton__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int arg5 ;
  love::pRadioButton result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isstring(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_addRadioButton");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (char*)lua_tostring(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  result = (*arg1)->addRadioButton((char const *)arg2,(char const *)arg3,arg4,arg5);
  SWIG_arg=0;
  {
    love::pRadioButton * resultptr;
    resultptr = new love::pRadioButton((love::pRadioButton &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__RadioButton_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_addRadioButton__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  love::pRadioButton result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isstring(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_addRadioButton");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (char*)lua_tostring(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (*arg1)->addRadioButton((char const *)arg2,(char const *)arg3,arg4);
  SWIG_arg=0;
  {
    love::pRadioButton * resultptr;
    resultptr = new love::pRadioButton((love::pRadioButton &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__RadioButton_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_addRadioButton__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  love::pRadioButton result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isstring(L,3)) SWIG_fail_arg(3);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_addRadioButton");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (char*)lua_tostring(L, 3);
  result = (*arg1)->addRadioButton((char const *)arg2,(char const *)arg3);
  SWIG_arg=0;
  {
    love::pRadioButton * resultptr;
    resultptr = new love::pRadioButton((love::pRadioButton &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__RadioButton_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_addRadioButton__SWIG_3(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  char *arg2 = (char *) 0 ;
  love::pRadioButton result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_addRadioButton");
  arg2 = (char*)lua_tostring(L, 2);
  result = (*arg1)->addRadioButton((char const *)arg2);
  SWIG_arg=0;
  {
    love::pRadioButton * resultptr;
    resultptr = new love::pRadioButton((love::pRadioButton &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__RadioButton_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_addRadioButton(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_SmartMenu_addRadioButton__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_SmartMenu_addRadioButton__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SmartMenu_addRadioButton__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_SmartMenu_addRadioButton__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'SmartMenu_addRadioButton'");
  lua_error(L);return 0;
}


static int _wrap_SmartMenu_addCheckBox__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int arg5 ;
  love::pCheckBox result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isstring(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_addCheckBox");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (char*)lua_tostring(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  result = (*arg1)->addCheckBox((char const *)arg2,(char const *)arg3,arg4,arg5);
  SWIG_arg=0;
  {
    love::pCheckBox * resultptr;
    resultptr = new love::pCheckBox((love::pCheckBox &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__CheckBox_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_addCheckBox__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  love::pCheckBox result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isstring(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_addCheckBox");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (char*)lua_tostring(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (*arg1)->addCheckBox((char const *)arg2,(char const *)arg3,arg4);
  SWIG_arg=0;
  {
    love::pCheckBox * resultptr;
    resultptr = new love::pCheckBox((love::pCheckBox &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__CheckBox_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_addCheckBox__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  love::pCheckBox result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isstring(L,3)) SWIG_fail_arg(3);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_addCheckBox");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (char*)lua_tostring(L, 3);
  result = (*arg1)->addCheckBox((char const *)arg2,(char const *)arg3);
  SWIG_arg=0;
  {
    love::pCheckBox * resultptr;
    resultptr = new love::pCheckBox((love::pCheckBox &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__CheckBox_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_addCheckBox__SWIG_3(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  char *arg2 = (char *) 0 ;
  love::pCheckBox result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_addCheckBox");
  arg2 = (char*)lua_tostring(L, 2);
  result = (*arg1)->addCheckBox((char const *)arg2);
  SWIG_arg=0;
  {
    love::pCheckBox * resultptr;
    resultptr = new love::pCheckBox((love::pCheckBox &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__CheckBox_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_addCheckBox(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_SmartMenu_addCheckBox__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_SmartMenu_addCheckBox__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SmartMenu_addCheckBox__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_SmartMenu_addCheckBox__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'SmartMenu_addCheckBox'");
  lua_error(L);return 0;
}


static int _wrap_SmartMenu_addSlider__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  double arg4 ;
  double arg5 ;
  int arg6 ;
  int arg7 ;
  love::pSlider result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  if(!lua_isnumber(L,6)) SWIG_fail_arg(6);
  if(!lua_isnumber(L,7)) SWIG_fail_arg(7);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_addSlider");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (unsigned int)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (double)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  arg7 = (int)lua_tonumber(L, 7);
  result = (*arg1)->addSlider((char const *)arg2,arg3,arg4,arg5,arg6,arg7);
  SWIG_arg=0;
  {
    love::pSlider * resultptr;
    resultptr = new love::pSlider((love::pSlider &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__Slider_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_addSlider__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  double arg4 ;
  double arg5 ;
  int arg6 ;
  love::pSlider result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  if(!lua_isnumber(L,6)) SWIG_fail_arg(6);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_addSlider");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (unsigned int)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (double)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  result = (*arg1)->addSlider((char const *)arg2,arg3,arg4,arg5,arg6);
  SWIG_arg=0;
  {
    love::pSlider * resultptr;
    resultptr = new love::pSlider((love::pSlider &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__Slider_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_addSlider__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  double arg4 ;
  double arg5 ;
  love::pSlider result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_addSlider");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (unsigned int)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (double)lua_tonumber(L, 5);
  result = (*arg1)->addSlider((char const *)arg2,arg3,arg4,arg5);
  SWIG_arg=0;
  {
    love::pSlider * resultptr;
    resultptr = new love::pSlider((love::pSlider &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__Slider_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_addSlider__SWIG_3(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  double arg4 ;
  love::pSlider result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_addSlider");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (unsigned int)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = (*arg1)->addSlider((char const *)arg2,arg3,arg4);
  SWIG_arg=0;
  {
    love::pSlider * resultptr;
    resultptr = new love::pSlider((love::pSlider &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__Slider_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_addSlider__SWIG_4(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  love::pSlider result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_addSlider");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (*arg1)->addSlider((char const *)arg2,arg3);
  SWIG_arg=0;
  {
    love::pSlider * resultptr;
    resultptr = new love::pSlider((love::pSlider &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__Slider_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_addSlider__SWIG_5(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  char *arg2 = (char *) 0 ;
  love::pSlider result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_addSlider");
  arg2 = (char*)lua_tostring(L, 2);
  result = (*arg1)->addSlider((char const *)arg2);
  SWIG_arg=0;
  {
    love::pSlider * resultptr;
    resultptr = new love::pSlider((love::pSlider &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__Slider_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_addSlider(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_SmartMenu_addSlider__SWIG_5(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SmartMenu_addSlider__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SmartMenu_addSlider__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_SmartMenu_addSlider__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_SmartMenu_addSlider__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_SmartMenu_addSlider__SWIG_0(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'SmartMenu_addSlider'");
  lua_error(L);return 0;
}


static int _wrap_SmartMenu_addListBox__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  love::pListBox result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_addListBox");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (*arg1)->addListBox((char const *)arg2,arg3,arg4);
  SWIG_arg=0;
  {
    love::pListBox * resultptr;
    resultptr = new love::pListBox((love::pListBox &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__ListBox_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_addListBox__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  love::pListBox result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_addListBox");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (*arg1)->addListBox((char const *)arg2,arg3);
  SWIG_arg=0;
  {
    love::pListBox * resultptr;
    resultptr = new love::pListBox((love::pListBox &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__ListBox_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_addListBox__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  char *arg2 = (char *) 0 ;
  love::pListBox result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_addListBox");
  arg2 = (char*)lua_tostring(L, 2);
  result = (*arg1)->addListBox((char const *)arg2);
  SWIG_arg=0;
  {
    love::pListBox * resultptr;
    resultptr = new love::pListBox((love::pListBox &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__ListBox_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_addListBox(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_SmartMenu_addListBox__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SmartMenu_addListBox__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SmartMenu_addListBox__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'SmartMenu_addListBox'");
  lua_error(L);return 0;
}


static int _wrap_SmartMenu_addTextBox__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  love::pTextBox result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_addTextBox");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (*arg1)->addTextBox((char const *)arg2,arg3,arg4);
  SWIG_arg=0;
  {
    love::pTextBox * resultptr;
    resultptr = new love::pTextBox((love::pTextBox &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__TextBox_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_addTextBox__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  love::pTextBox result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_addTextBox");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (*arg1)->addTextBox((char const *)arg2,arg3);
  SWIG_arg=0;
  {
    love::pTextBox * resultptr;
    resultptr = new love::pTextBox((love::pTextBox &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__TextBox_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_addTextBox__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  char *arg2 = (char *) 0 ;
  love::pTextBox result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_addTextBox");
  arg2 = (char*)lua_tostring(L, 2);
  result = (*arg1)->addTextBox((char const *)arg2);
  SWIG_arg=0;
  {
    love::pTextBox * resultptr;
    resultptr = new love::pTextBox((love::pTextBox &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__TextBox_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_addTextBox(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_SmartMenu_addTextBox__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SmartMenu_addTextBox__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SmartMenu_addTextBox__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'SmartMenu_addTextBox'");
  lua_error(L);return 0;
}


static int _wrap_SmartMenu_setBorderColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_setBorderColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"SmartMenu_setBorderColor");
  (*arg1)->setBorderColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_getColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_getColor");
  result = (*arg1)->getColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_getBorderColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_getBorderColor");
  result = (*arg1)->getBorderColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_setPadding__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_setPadding");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  (*arg1)->setPadding(arg2,arg3,arg4,arg5);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_setPadding__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_setPadding");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (*arg1)->setPadding(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_setPadding__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_setPadding");
  arg2 = (int)lua_tonumber(L, 2);
  (*arg1)->setPadding(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_setPadding(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SmartMenu_setPadding__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SmartMenu_setPadding__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_SmartMenu_setPadding__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'SmartMenu_setPadding'");
  lua_error(L);return 0;
}


static int _wrap_SmartMenu_setPaddingTop(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_setPaddingTop");
  arg2 = (int)lua_tonumber(L, 2);
  (*arg1)->setPaddingTop(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_setPaddingRight(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_setPaddingRight");
  arg2 = (int)lua_tonumber(L, 2);
  (*arg1)->setPaddingRight(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_setPaddingBottom(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_setPaddingBottom");
  arg2 = (int)lua_tonumber(L, 2);
  (*arg1)->setPaddingBottom(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_setPaddingLeft(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_setPaddingLeft");
  arg2 = (int)lua_tonumber(L, 2);
  (*arg1)->setPaddingLeft(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_getPaddingTop(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_getPaddingTop");
  result = (int)(*arg1)->getPaddingTop();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_getPaddingRight(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_getPaddingRight");
  result = (int)(*arg1)->getPaddingRight();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_getPaddingBottom(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_getPaddingBottom");
  result = (int)(*arg1)->getPaddingBottom();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMenu_getPaddingLeft(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::AbstractMenu > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0,1,"SmartMenu_getPaddingLeft");
  result = (int)(*arg1)->getPaddingLeft();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SmartMenu(void *obj) {
boost::shared_ptr<love::AbstractMenu > *arg1 = (boost::shared_ptr<love::AbstractMenu > *) obj;
delete arg1;
}
static swig_lua_method swig_boost_shared_ptr_Sl_love_AbstractMenu_Sg__methods[] = {
    {"__deref__", _wrap_SmartMenu___deref__}, 
    {"show", _wrap_SmartMenu_show}, 
    {"hide", _wrap_SmartMenu_hide}, 
    {"setFont", _wrap_SmartMenu_setFont}, 
    {"setColor", _wrap_SmartMenu_setColor}, 
    {"setBackgroundColor", _wrap_SmartMenu_setBackgroundColor}, 
    {"setBackground", _wrap_SmartMenu_setBackground}, 
    {"setSpacing", _wrap_SmartMenu_setSpacing}, 
    {"stretchContent", _wrap_SmartMenu_stretchContent}, 
    {"align", _wrap_SmartMenu_align}, 
    {"valign", _wrap_SmartMenu_valign}, 
    {"getFont", _wrap_SmartMenu_getFont}, 
    {"getBackgroundColor", _wrap_SmartMenu_getBackgroundColor}, 
    {"getSpacing", _wrap_SmartMenu_getSpacing}, 
    {"getMenuType", _wrap_SmartMenu_getMenuType}, 
    {"setSize", _wrap_SmartMenu_setSize}, 
    {"setWidth", _wrap_SmartMenu_setWidth}, 
    {"setHeight", _wrap_SmartMenu_setHeight}, 
    {"setBorderSize", _wrap_SmartMenu_setBorderSize}, 
    {"setPosition", _wrap_SmartMenu_setPosition}, 
    {"setX", _wrap_SmartMenu_setX}, 
    {"setY", _wrap_SmartMenu_setY}, 
    {"getWidth", _wrap_SmartMenu_getWidth}, 
    {"getHeight", _wrap_SmartMenu_getHeight}, 
    {"getX", _wrap_SmartMenu_getX}, 
    {"getY", _wrap_SmartMenu_getY}, 
    {"getBorderSize", _wrap_SmartMenu_getBorderSize}, 
    {"adjustSize", _wrap_SmartMenu_adjustSize}, 
    {"adjustWidth", _wrap_SmartMenu_adjustWidth}, 
    {"adjustHeight", _wrap_SmartMenu_adjustHeight}, 
    {"adjustContent", _wrap_SmartMenu_adjustContent}, 
    {"draw", _wrap_SmartMenu_draw}, 
    {"drawBorder", _wrap_SmartMenu_drawBorder}, 
    {"drawChildren", _wrap_SmartMenu_drawChildren}, 
    {"add", _wrap_SmartMenu_add}, 
    {"setCaption", _wrap_SmartMenu_setCaption}, 
    {"setTitleBarHeight", _wrap_SmartMenu_setTitleBarHeight}, 
    {"getCaption", _wrap_SmartMenu_getCaption}, 
    {"getTitleBarHeight", _wrap_SmartMenu_getTitleBarHeight}, 
    {"addMenu", _wrap_SmartMenu_addMenu}, 
    {"addScrollMenu", _wrap_SmartMenu_addScrollMenu}, 
    {"addWindowMenu", _wrap_SmartMenu_addWindowMenu}, 
    {"addLabel", _wrap_SmartMenu_addLabel}, 
    {"addMultilineLabel", _wrap_SmartMenu_addMultilineLabel}, 
    {"addImage", _wrap_SmartMenu_addImage}, 
    {"addButton", _wrap_SmartMenu_addButton}, 
    {"addTextField", _wrap_SmartMenu_addTextField}, 
    {"addDropDown", _wrap_SmartMenu_addDropDown}, 
    {"addRadioButton", _wrap_SmartMenu_addRadioButton}, 
    {"addCheckBox", _wrap_SmartMenu_addCheckBox}, 
    {"addSlider", _wrap_SmartMenu_addSlider}, 
    {"addListBox", _wrap_SmartMenu_addListBox}, 
    {"addTextBox", _wrap_SmartMenu_addTextBox}, 
    {"setBorderColor", _wrap_SmartMenu_setBorderColor}, 
    {"getColor", _wrap_SmartMenu_getColor}, 
    {"getBorderColor", _wrap_SmartMenu_getBorderColor}, 
    {"setPadding", _wrap_SmartMenu_setPadding}, 
    {"setPaddingTop", _wrap_SmartMenu_setPaddingTop}, 
    {"setPaddingRight", _wrap_SmartMenu_setPaddingRight}, 
    {"setPaddingBottom", _wrap_SmartMenu_setPaddingBottom}, 
    {"setPaddingLeft", _wrap_SmartMenu_setPaddingLeft}, 
    {"getPaddingTop", _wrap_SmartMenu_getPaddingTop}, 
    {"getPaddingRight", _wrap_SmartMenu_getPaddingRight}, 
    {"getPaddingBottom", _wrap_SmartMenu_getPaddingBottom}, 
    {"getPaddingLeft", _wrap_SmartMenu_getPaddingLeft}, 
    {0,0}
};
static swig_lua_attribute swig_boost_shared_ptr_Sl_love_AbstractMenu_Sg__attributes[] = {
    { "LOVE_MENU_VERTICAL",_wrap_SmartMenu_LOVE_MENU_VERTICAL_get, 0 },
    { "LOVE_MENU_HORIZONTAL",_wrap_SmartMenu_LOVE_MENU_HORIZONTAL_get, 0 },
    { "LOVE_MENU_DEFAULT",_wrap_SmartMenu_LOVE_MENU_DEFAULT_get, 0 },
    { "LOVE_MENU_WINDOW",_wrap_SmartMenu_LOVE_MENU_WINDOW_get, 0 },
    { "LOVE_MENU_SCROLL",_wrap_SmartMenu_LOVE_MENU_SCROLL_get, 0 },
    {0,0,0}
};
static swig_lua_class *swig_boost_shared_ptr_Sl_love_AbstractMenu_Sg__bases[] = {0};
swig_lua_class _wrap_class_boost_shared_ptr_Sl_love_AbstractMenu_Sg_ = { "SmartMenu", &SWIGTYPE_p_boost__shared_ptrTlove__AbstractMenu_t,0, swig_delete_SmartMenu, swig_boost_shared_ptr_Sl_love_AbstractMenu_Sg__methods, swig_boost_shared_ptr_Sl_love_AbstractMenu_Sg__attributes, swig_boost_shared_ptr_Sl_love_AbstractMenu_Sg__bases };

static int _wrap_SmartLabel___deref__(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Label > *arg1 = (boost::shared_ptr<love::Label > *) 0 ;
  love::Label *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Label > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Label_t,0,1,"SmartLabel___deref__");
  result = (love::Label *)((boost::shared_ptr<love::Label > const *)arg1)->operator ->();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__Label,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_SmartLabel(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Label > *arg1 = (boost::shared_ptr<love::Label > *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Label > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Label_t,0,1,"delete_SmartLabel");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartLabel_setSize(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Label > *arg1 = (boost::shared_ptr<love::Label > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(boost::shared_ptr<love::Label > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Label_t,0,1,"SmartLabel_setSize");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (*arg1)->setSize(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartLabel_setWidth(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Label > *arg1 = (boost::shared_ptr<love::Label > *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Label > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Label_t,0,1,"SmartLabel_setWidth");
  arg2 = (int)lua_tonumber(L, 2);
  (*arg1)->setWidth(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartLabel_setHeight(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Label > *arg1 = (boost::shared_ptr<love::Label > *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Label > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Label_t,0,1,"SmartLabel_setHeight");
  arg2 = (int)lua_tonumber(L, 2);
  (*arg1)->setHeight(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartLabel_setBorderSize(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Label > *arg1 = (boost::shared_ptr<love::Label > *) 0 ;
  unsigned int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Label > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Label_t,0,1,"SmartLabel_setBorderSize");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (*arg1)->setBorderSize(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartLabel_setCaption(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Label > *arg1 = (boost::shared_ptr<love::Label > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Label > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Label_t,0,1,"SmartLabel_setCaption");
  arg2 = (char*)lua_tostring(L, 2);
  (*arg1)->setCaption((char const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartLabel_setBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Label > *arg1 = (boost::shared_ptr<love::Label > *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Label > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Label_t,0,1,"SmartLabel_setBackgroundColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"SmartLabel_setBackgroundColor");
  (*arg1)->setBackgroundColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartLabel_align(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Label > *arg1 = (boost::shared_ptr<love::Label > *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Label > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Label_t,0,1,"SmartLabel_align");
  arg2 = (int)lua_tonumber(L, 2);
  (*arg1)->align(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartLabel_valign(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Label > *arg1 = (boost::shared_ptr<love::Label > *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Label > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Label_t,0,1,"SmartLabel_valign");
  arg2 = (int)lua_tonumber(L, 2);
  (*arg1)->valign(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartLabel_setBackground(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Label > *arg1 = (boost::shared_ptr<love::Label > *) 0 ;
  pAbstractImage *arg2 = (pAbstractImage *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Label > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Label_t,0,1,"SmartLabel_setBackground");
  arg2=(pAbstractImage *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_pAbstractImage,0,2,"SmartLabel_setBackground");
  (*arg1)->setBackground((pAbstractImage const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartLabel_getWidth(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Label > *arg1 = (boost::shared_ptr<love::Label > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Label > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Label_t,0,1,"SmartLabel_getWidth");
  result = (int)(*arg1)->getWidth();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartLabel_getHeight(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Label > *arg1 = (boost::shared_ptr<love::Label > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Label > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Label_t,0,1,"SmartLabel_getHeight");
  result = (int)(*arg1)->getHeight();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartLabel_getBorderSize(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Label > *arg1 = (boost::shared_ptr<love::Label > *) 0 ;
  unsigned int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Label > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Label_t,0,1,"SmartLabel_getBorderSize");
  result = (unsigned int)(*arg1)->getBorderSize();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartLabel_getCaption(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Label > *arg1 = (boost::shared_ptr<love::Label > *) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Label > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Label_t,0,1,"SmartLabel_getCaption");
  result = (char *)(*arg1)->getCaption();
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartLabel_getBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Label > *arg1 = (boost::shared_ptr<love::Label > *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Label > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Label_t,0,1,"SmartLabel_getBackgroundColor");
  result = (*arg1)->getBackgroundColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartLabel_adjustSize(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Label > *arg1 = (boost::shared_ptr<love::Label > *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Label > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Label_t,0,1,"SmartLabel_adjustSize");
  (*arg1)->adjustSize();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartLabel_draw(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Label > *arg1 = (boost::shared_ptr<love::Label > *) 0 ;
  gcn::Graphics *arg2 = (gcn::Graphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Label > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Label_t,0,1,"SmartLabel_draw");
  arg2=(gcn::Graphics *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Graphics,0,2,"SmartLabel_draw");
  (*arg1)->draw(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartLabel_drawBorder(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Label > *arg1 = (boost::shared_ptr<love::Label > *) 0 ;
  gcn::Graphics *arg2 = (gcn::Graphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Label > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Label_t,0,1,"SmartLabel_drawBorder");
  arg2=(gcn::Graphics *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Graphics,0,2,"SmartLabel_drawBorder");
  (*arg1)->drawBorder(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartLabel_setColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Label > *arg1 = (boost::shared_ptr<love::Label > *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Label > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Label_t,0,1,"SmartLabel_setColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"SmartLabel_setColor");
  (*arg1)->setColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartLabel_setBorderColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Label > *arg1 = (boost::shared_ptr<love::Label > *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Label > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Label_t,0,1,"SmartLabel_setBorderColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"SmartLabel_setBorderColor");
  (*arg1)->setBorderColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartLabel_getColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Label > *arg1 = (boost::shared_ptr<love::Label > *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Label > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Label_t,0,1,"SmartLabel_getColor");
  result = (*arg1)->getColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartLabel_getBorderColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Label > *arg1 = (boost::shared_ptr<love::Label > *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Label > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Label_t,0,1,"SmartLabel_getBorderColor");
  result = (*arg1)->getBorderColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SmartLabel(void *obj) {
boost::shared_ptr<love::Label > *arg1 = (boost::shared_ptr<love::Label > *) obj;
delete arg1;
}
static swig_lua_method swig_boost_shared_ptr_Sl_love_Label_Sg__methods[] = {
    {"__deref__", _wrap_SmartLabel___deref__}, 
    {"setSize", _wrap_SmartLabel_setSize}, 
    {"setWidth", _wrap_SmartLabel_setWidth}, 
    {"setHeight", _wrap_SmartLabel_setHeight}, 
    {"setBorderSize", _wrap_SmartLabel_setBorderSize}, 
    {"setCaption", _wrap_SmartLabel_setCaption}, 
    {"setBackgroundColor", _wrap_SmartLabel_setBackgroundColor}, 
    {"align", _wrap_SmartLabel_align}, 
    {"valign", _wrap_SmartLabel_valign}, 
    {"setBackground", _wrap_SmartLabel_setBackground}, 
    {"getWidth", _wrap_SmartLabel_getWidth}, 
    {"getHeight", _wrap_SmartLabel_getHeight}, 
    {"getBorderSize", _wrap_SmartLabel_getBorderSize}, 
    {"getCaption", _wrap_SmartLabel_getCaption}, 
    {"getBackgroundColor", _wrap_SmartLabel_getBackgroundColor}, 
    {"adjustSize", _wrap_SmartLabel_adjustSize}, 
    {"draw", _wrap_SmartLabel_draw}, 
    {"drawBorder", _wrap_SmartLabel_drawBorder}, 
    {"setColor", _wrap_SmartLabel_setColor}, 
    {"setBorderColor", _wrap_SmartLabel_setBorderColor}, 
    {"getColor", _wrap_SmartLabel_getColor}, 
    {"getBorderColor", _wrap_SmartLabel_getBorderColor}, 
    {0,0}
};
static swig_lua_attribute swig_boost_shared_ptr_Sl_love_Label_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_boost_shared_ptr_Sl_love_Label_Sg__bases[] = {0};
swig_lua_class _wrap_class_boost_shared_ptr_Sl_love_Label_Sg_ = { "SmartLabel", &SWIGTYPE_p_boost__shared_ptrTlove__Label_t,0, swig_delete_SmartLabel, swig_boost_shared_ptr_Sl_love_Label_Sg__methods, swig_boost_shared_ptr_Sl_love_Label_Sg__attributes, swig_boost_shared_ptr_Sl_love_Label_Sg__bases };

static int _wrap_SmartMultilineLabel___deref__(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::MultilineLabel > *arg1 = (boost::shared_ptr<love::MultilineLabel > *) 0 ;
  love::MultilineLabel *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::MultilineLabel > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__MultilineLabel_t,0,1,"SmartMultilineLabel___deref__");
  result = (love::MultilineLabel *)((boost::shared_ptr<love::MultilineLabel > const *)arg1)->operator ->();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__MultilineLabel,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_SmartMultilineLabel(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::MultilineLabel > *arg1 = (boost::shared_ptr<love::MultilineLabel > *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::MultilineLabel > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__MultilineLabel_t,0,1,"delete_SmartMultilineLabel");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMultilineLabel_setCaption__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::MultilineLabel > *arg1 = (boost::shared_ptr<love::MultilineLabel > *) 0 ;
  string *arg2 = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::MultilineLabel > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__MultilineLabel_t,0,1,"SmartMultilineLabel_setCaption");
  arg2=(string *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_string,0,2,"SmartMultilineLabel_setCaption");
  (*arg1)->setCaption((string const &)*arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMultilineLabel_setCaption__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::MultilineLabel > *arg1 = (boost::shared_ptr<love::MultilineLabel > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::MultilineLabel > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__MultilineLabel_t,0,1,"SmartMultilineLabel_setCaption");
  arg2 = (char*)lua_tostring(L, 2);
  (*arg1)->setCaption((char const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMultilineLabel_setCaption(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__MultilineLabel_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_string, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SmartMultilineLabel_setCaption__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__MultilineLabel_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_SmartMultilineLabel_setCaption__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'SmartMultilineLabel_setCaption'");
  lua_error(L);return 0;
}


static int _wrap_SmartMultilineLabel_adjustContent(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::MultilineLabel > *arg1 = (boost::shared_ptr<love::MultilineLabel > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::MultilineLabel > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__MultilineLabel_t,0,1,"SmartMultilineLabel_adjustContent");
  result = (int)(*arg1)->adjustContent();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMultilineLabel_adjustSize(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::MultilineLabel > *arg1 = (boost::shared_ptr<love::MultilineLabel > *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::MultilineLabel > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__MultilineLabel_t,0,1,"SmartMultilineLabel_adjustSize");
  (*arg1)->adjustSize();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMultilineLabel_draw(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::MultilineLabel > *arg1 = (boost::shared_ptr<love::MultilineLabel > *) 0 ;
  gcn::Graphics *arg2 = (gcn::Graphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::MultilineLabel > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__MultilineLabel_t,0,1,"SmartMultilineLabel_draw");
  arg2=(gcn::Graphics *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Graphics,0,2,"SmartMultilineLabel_draw");
  (*arg1)->draw(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMultilineLabel_setSize(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::MultilineLabel > *arg1 = (boost::shared_ptr<love::MultilineLabel > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(boost::shared_ptr<love::MultilineLabel > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__MultilineLabel_t,0,1,"SmartMultilineLabel_setSize");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (*arg1)->setSize(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMultilineLabel_setWidth(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::MultilineLabel > *arg1 = (boost::shared_ptr<love::MultilineLabel > *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::MultilineLabel > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__MultilineLabel_t,0,1,"SmartMultilineLabel_setWidth");
  arg2 = (int)lua_tonumber(L, 2);
  (*arg1)->setWidth(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMultilineLabel_setHeight(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::MultilineLabel > *arg1 = (boost::shared_ptr<love::MultilineLabel > *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::MultilineLabel > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__MultilineLabel_t,0,1,"SmartMultilineLabel_setHeight");
  arg2 = (int)lua_tonumber(L, 2);
  (*arg1)->setHeight(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMultilineLabel_setBorderSize(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::MultilineLabel > *arg1 = (boost::shared_ptr<love::MultilineLabel > *) 0 ;
  unsigned int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::MultilineLabel > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__MultilineLabel_t,0,1,"SmartMultilineLabel_setBorderSize");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (*arg1)->setBorderSize(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMultilineLabel_setBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::MultilineLabel > *arg1 = (boost::shared_ptr<love::MultilineLabel > *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::MultilineLabel > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__MultilineLabel_t,0,1,"SmartMultilineLabel_setBackgroundColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"SmartMultilineLabel_setBackgroundColor");
  (*arg1)->setBackgroundColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMultilineLabel_align(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::MultilineLabel > *arg1 = (boost::shared_ptr<love::MultilineLabel > *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::MultilineLabel > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__MultilineLabel_t,0,1,"SmartMultilineLabel_align");
  arg2 = (int)lua_tonumber(L, 2);
  (*arg1)->align(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMultilineLabel_valign(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::MultilineLabel > *arg1 = (boost::shared_ptr<love::MultilineLabel > *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::MultilineLabel > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__MultilineLabel_t,0,1,"SmartMultilineLabel_valign");
  arg2 = (int)lua_tonumber(L, 2);
  (*arg1)->valign(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMultilineLabel_setBackground(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::MultilineLabel > *arg1 = (boost::shared_ptr<love::MultilineLabel > *) 0 ;
  pAbstractImage *arg2 = (pAbstractImage *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::MultilineLabel > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__MultilineLabel_t,0,1,"SmartMultilineLabel_setBackground");
  arg2=(pAbstractImage *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_pAbstractImage,0,2,"SmartMultilineLabel_setBackground");
  (*arg1)->setBackground((pAbstractImage const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMultilineLabel_getWidth(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::MultilineLabel > *arg1 = (boost::shared_ptr<love::MultilineLabel > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::MultilineLabel > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__MultilineLabel_t,0,1,"SmartMultilineLabel_getWidth");
  result = (int)(*arg1)->getWidth();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMultilineLabel_getHeight(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::MultilineLabel > *arg1 = (boost::shared_ptr<love::MultilineLabel > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::MultilineLabel > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__MultilineLabel_t,0,1,"SmartMultilineLabel_getHeight");
  result = (int)(*arg1)->getHeight();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMultilineLabel_getBorderSize(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::MultilineLabel > *arg1 = (boost::shared_ptr<love::MultilineLabel > *) 0 ;
  unsigned int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::MultilineLabel > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__MultilineLabel_t,0,1,"SmartMultilineLabel_getBorderSize");
  result = (unsigned int)(*arg1)->getBorderSize();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMultilineLabel_getCaption(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::MultilineLabel > *arg1 = (boost::shared_ptr<love::MultilineLabel > *) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::MultilineLabel > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__MultilineLabel_t,0,1,"SmartMultilineLabel_getCaption");
  result = (char *)(*arg1)->getCaption();
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMultilineLabel_getBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::MultilineLabel > *arg1 = (boost::shared_ptr<love::MultilineLabel > *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::MultilineLabel > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__MultilineLabel_t,0,1,"SmartMultilineLabel_getBackgroundColor");
  result = (*arg1)->getBackgroundColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMultilineLabel_drawBorder(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::MultilineLabel > *arg1 = (boost::shared_ptr<love::MultilineLabel > *) 0 ;
  gcn::Graphics *arg2 = (gcn::Graphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::MultilineLabel > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__MultilineLabel_t,0,1,"SmartMultilineLabel_drawBorder");
  arg2=(gcn::Graphics *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Graphics,0,2,"SmartMultilineLabel_drawBorder");
  (*arg1)->drawBorder(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMultilineLabel_setColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::MultilineLabel > *arg1 = (boost::shared_ptr<love::MultilineLabel > *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::MultilineLabel > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__MultilineLabel_t,0,1,"SmartMultilineLabel_setColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"SmartMultilineLabel_setColor");
  (*arg1)->setColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMultilineLabel_setBorderColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::MultilineLabel > *arg1 = (boost::shared_ptr<love::MultilineLabel > *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::MultilineLabel > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__MultilineLabel_t,0,1,"SmartMultilineLabel_setBorderColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"SmartMultilineLabel_setBorderColor");
  (*arg1)->setBorderColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMultilineLabel_getColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::MultilineLabel > *arg1 = (boost::shared_ptr<love::MultilineLabel > *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::MultilineLabel > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__MultilineLabel_t,0,1,"SmartMultilineLabel_getColor");
  result = (*arg1)->getColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartMultilineLabel_getBorderColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::MultilineLabel > *arg1 = (boost::shared_ptr<love::MultilineLabel > *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::MultilineLabel > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__MultilineLabel_t,0,1,"SmartMultilineLabel_getBorderColor");
  result = (*arg1)->getBorderColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SmartMultilineLabel(void *obj) {
boost::shared_ptr<love::MultilineLabel > *arg1 = (boost::shared_ptr<love::MultilineLabel > *) obj;
delete arg1;
}
static swig_lua_method swig_boost_shared_ptr_Sl_love_MultilineLabel_Sg__methods[] = {
    {"__deref__", _wrap_SmartMultilineLabel___deref__}, 
    {"setCaption", _wrap_SmartMultilineLabel_setCaption}, 
    {"adjustContent", _wrap_SmartMultilineLabel_adjustContent}, 
    {"adjustSize", _wrap_SmartMultilineLabel_adjustSize}, 
    {"draw", _wrap_SmartMultilineLabel_draw}, 
    {"setSize", _wrap_SmartMultilineLabel_setSize}, 
    {"setWidth", _wrap_SmartMultilineLabel_setWidth}, 
    {"setHeight", _wrap_SmartMultilineLabel_setHeight}, 
    {"setBorderSize", _wrap_SmartMultilineLabel_setBorderSize}, 
    {"setBackgroundColor", _wrap_SmartMultilineLabel_setBackgroundColor}, 
    {"align", _wrap_SmartMultilineLabel_align}, 
    {"valign", _wrap_SmartMultilineLabel_valign}, 
    {"setBackground", _wrap_SmartMultilineLabel_setBackground}, 
    {"getWidth", _wrap_SmartMultilineLabel_getWidth}, 
    {"getHeight", _wrap_SmartMultilineLabel_getHeight}, 
    {"getBorderSize", _wrap_SmartMultilineLabel_getBorderSize}, 
    {"getCaption", _wrap_SmartMultilineLabel_getCaption}, 
    {"getBackgroundColor", _wrap_SmartMultilineLabel_getBackgroundColor}, 
    {"drawBorder", _wrap_SmartMultilineLabel_drawBorder}, 
    {"setColor", _wrap_SmartMultilineLabel_setColor}, 
    {"setBorderColor", _wrap_SmartMultilineLabel_setBorderColor}, 
    {"getColor", _wrap_SmartMultilineLabel_getColor}, 
    {"getBorderColor", _wrap_SmartMultilineLabel_getBorderColor}, 
    {0,0}
};
static swig_lua_attribute swig_boost_shared_ptr_Sl_love_MultilineLabel_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_boost_shared_ptr_Sl_love_MultilineLabel_Sg__bases[] = {0};
swig_lua_class _wrap_class_boost_shared_ptr_Sl_love_MultilineLabel_Sg_ = { "SmartMultilineLabel", &SWIGTYPE_p_boost__shared_ptrTlove__MultilineLabel_t,0, swig_delete_SmartMultilineLabel, swig_boost_shared_ptr_Sl_love_MultilineLabel_Sg__methods, swig_boost_shared_ptr_Sl_love_MultilineLabel_Sg__attributes, swig_boost_shared_ptr_Sl_love_MultilineLabel_Sg__bases };

static int _wrap_SmartButton___deref__(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Button > *arg1 = (boost::shared_ptr<love::Button > *) 0 ;
  love::Button *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Button > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Button_t,0,1,"SmartButton___deref__");
  result = (love::Button *)((boost::shared_ptr<love::Button > const *)arg1)->operator ->();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__Button,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_SmartButton(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Button > *arg1 = (boost::shared_ptr<love::Button > *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Button > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Button_t,0,1,"delete_SmartButton");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartButton_setSize(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Button > *arg1 = (boost::shared_ptr<love::Button > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(boost::shared_ptr<love::Button > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Button_t,0,1,"SmartButton_setSize");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (*arg1)->setSize(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartButton_setWidth(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Button > *arg1 = (boost::shared_ptr<love::Button > *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Button > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Button_t,0,1,"SmartButton_setWidth");
  arg2 = (int)lua_tonumber(L, 2);
  (*arg1)->setWidth(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartButton_setHeight(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Button > *arg1 = (boost::shared_ptr<love::Button > *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Button > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Button_t,0,1,"SmartButton_setHeight");
  arg2 = (int)lua_tonumber(L, 2);
  (*arg1)->setHeight(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartButton_setBorderSize(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Button > *arg1 = (boost::shared_ptr<love::Button > *) 0 ;
  unsigned int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Button > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Button_t,0,1,"SmartButton_setBorderSize");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (*arg1)->setBorderSize(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartButton_setCaption(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Button > *arg1 = (boost::shared_ptr<love::Button > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Button > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Button_t,0,1,"SmartButton_setCaption");
  arg2 = (char*)lua_tostring(L, 2);
  (*arg1)->setCaption((char const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartButton_setName(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Button > *arg1 = (boost::shared_ptr<love::Button > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Button > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Button_t,0,1,"SmartButton_setName");
  arg2 = (char*)lua_tostring(L, 2);
  (*arg1)->setName((char const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartButton_align(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Button > *arg1 = (boost::shared_ptr<love::Button > *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Button > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Button_t,0,1,"SmartButton_align");
  arg2 = (int)lua_tonumber(L, 2);
  (*arg1)->align(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartButton_valign(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Button > *arg1 = (boost::shared_ptr<love::Button > *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Button > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Button_t,0,1,"SmartButton_valign");
  arg2 = (int)lua_tonumber(L, 2);
  (*arg1)->valign(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartButton_setBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Button > *arg1 = (boost::shared_ptr<love::Button > *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Button > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Button_t,0,1,"SmartButton_setBackgroundColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"SmartButton_setBackgroundColor");
  (*arg1)->setBackgroundColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartButton_setHoverColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Button > *arg1 = (boost::shared_ptr<love::Button > *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Button > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Button_t,0,1,"SmartButton_setHoverColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"SmartButton_setHoverColor");
  (*arg1)->setHoverColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartButton_setPressedColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Button > *arg1 = (boost::shared_ptr<love::Button > *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Button > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Button_t,0,1,"SmartButton_setPressedColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"SmartButton_setPressedColor");
  (*arg1)->setPressedColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartButton_setAllColors(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Button > *arg1 = (boost::shared_ptr<love::Button > *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Button > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Button_t,0,1,"SmartButton_setAllColors");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"SmartButton_setAllColors");
  (*arg1)->setAllColors((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartButton_setHoverBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Button > *arg1 = (boost::shared_ptr<love::Button > *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Button > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Button_t,0,1,"SmartButton_setHoverBackgroundColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"SmartButton_setHoverBackgroundColor");
  (*arg1)->setHoverBackgroundColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartButton_setPressedBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Button > *arg1 = (boost::shared_ptr<love::Button > *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Button > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Button_t,0,1,"SmartButton_setPressedBackgroundColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"SmartButton_setPressedBackgroundColor");
  (*arg1)->setPressedBackgroundColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartButton_setAllBackgroundColors(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Button > *arg1 = (boost::shared_ptr<love::Button > *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Button > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Button_t,0,1,"SmartButton_setAllBackgroundColors");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"SmartButton_setAllBackgroundColors");
  (*arg1)->setAllBackgroundColors((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartButton_setDefaultImage(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Button > *arg1 = (boost::shared_ptr<love::Button > *) 0 ;
  pAbstractImage *arg2 = (pAbstractImage *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Button > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Button_t,0,1,"SmartButton_setDefaultImage");
  arg2=(pAbstractImage *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_pAbstractImage,0,2,"SmartButton_setDefaultImage");
  (*arg1)->setDefaultImage((pAbstractImage const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartButton_setHoverImage(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Button > *arg1 = (boost::shared_ptr<love::Button > *) 0 ;
  pAbstractImage *arg2 = (pAbstractImage *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Button > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Button_t,0,1,"SmartButton_setHoverImage");
  arg2=(pAbstractImage *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_pAbstractImage,0,2,"SmartButton_setHoverImage");
  (*arg1)->setHoverImage((pAbstractImage const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartButton_setPressedImage(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Button > *arg1 = (boost::shared_ptr<love::Button > *) 0 ;
  pAbstractImage *arg2 = (pAbstractImage *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Button > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Button_t,0,1,"SmartButton_setPressedImage");
  arg2=(pAbstractImage *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_pAbstractImage,0,2,"SmartButton_setPressedImage");
  (*arg1)->setPressedImage((pAbstractImage const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartButton_getWidth(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Button > *arg1 = (boost::shared_ptr<love::Button > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Button > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Button_t,0,1,"SmartButton_getWidth");
  result = (int)(*arg1)->getWidth();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartButton_getHeight(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Button > *arg1 = (boost::shared_ptr<love::Button > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Button > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Button_t,0,1,"SmartButton_getHeight");
  result = (int)(*arg1)->getHeight();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartButton_getBorderSize(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Button > *arg1 = (boost::shared_ptr<love::Button > *) 0 ;
  unsigned int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Button > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Button_t,0,1,"SmartButton_getBorderSize");
  result = (unsigned int)(*arg1)->getBorderSize();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartButton_getCaption(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Button > *arg1 = (boost::shared_ptr<love::Button > *) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Button > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Button_t,0,1,"SmartButton_getCaption");
  result = (char *)(*arg1)->getCaption();
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartButton_getName(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Button > *arg1 = (boost::shared_ptr<love::Button > *) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Button > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Button_t,0,1,"SmartButton_getName");
  result = (char *)(*arg1)->getName();
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartButton_getBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Button > *arg1 = (boost::shared_ptr<love::Button > *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Button > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Button_t,0,1,"SmartButton_getBackgroundColor");
  result = (*arg1)->getBackgroundColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartButton_getHoverColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Button > *arg1 = (boost::shared_ptr<love::Button > *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Button > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Button_t,0,1,"SmartButton_getHoverColor");
  result = (*arg1)->getHoverColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartButton_getPressedColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Button > *arg1 = (boost::shared_ptr<love::Button > *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Button > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Button_t,0,1,"SmartButton_getPressedColor");
  result = (*arg1)->getPressedColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartButton_getHoverBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Button > *arg1 = (boost::shared_ptr<love::Button > *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Button > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Button_t,0,1,"SmartButton_getHoverBackgroundColor");
  result = (*arg1)->getHoverBackgroundColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartButton_getPressedBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Button > *arg1 = (boost::shared_ptr<love::Button > *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Button > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Button_t,0,1,"SmartButton_getPressedBackgroundColor");
  result = (*arg1)->getPressedBackgroundColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartButton_adjustSize(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Button > *arg1 = (boost::shared_ptr<love::Button > *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Button > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Button_t,0,1,"SmartButton_adjustSize");
  (*arg1)->adjustSize();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartButton_isFocused(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Button > *arg1 = (boost::shared_ptr<love::Button > *) 0 ;
  bool result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Button > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Button_t,0,1,"SmartButton_isFocused");
  result = (bool)(*arg1)->isFocused();
  SWIG_arg=0;
  lua_pushboolean(L,(int)result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartButton_draw(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Button > *arg1 = (boost::shared_ptr<love::Button > *) 0 ;
  gcn::Graphics *arg2 = (gcn::Graphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Button > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Button_t,0,1,"SmartButton_draw");
  arg2=(gcn::Graphics *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Graphics,0,2,"SmartButton_draw");
  (*arg1)->draw(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartButton_drawBorder(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Button > *arg1 = (boost::shared_ptr<love::Button > *) 0 ;
  gcn::Graphics *arg2 = (gcn::Graphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Button > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Button_t,0,1,"SmartButton_drawBorder");
  arg2=(gcn::Graphics *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Graphics,0,2,"SmartButton_drawBorder");
  (*arg1)->drawBorder(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartButton_setColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Button > *arg1 = (boost::shared_ptr<love::Button > *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Button > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Button_t,0,1,"SmartButton_setColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"SmartButton_setColor");
  (*arg1)->setColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartButton_setBorderColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Button > *arg1 = (boost::shared_ptr<love::Button > *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Button > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Button_t,0,1,"SmartButton_setBorderColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"SmartButton_setBorderColor");
  (*arg1)->setBorderColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartButton_getColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Button > *arg1 = (boost::shared_ptr<love::Button > *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Button > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Button_t,0,1,"SmartButton_getColor");
  result = (*arg1)->getColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartButton_getBorderColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Button > *arg1 = (boost::shared_ptr<love::Button > *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Button > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Button_t,0,1,"SmartButton_getBorderColor");
  result = (*arg1)->getBorderColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SmartButton(void *obj) {
boost::shared_ptr<love::Button > *arg1 = (boost::shared_ptr<love::Button > *) obj;
delete arg1;
}
static swig_lua_method swig_boost_shared_ptr_Sl_love_Button_Sg__methods[] = {
    {"__deref__", _wrap_SmartButton___deref__}, 
    {"setSize", _wrap_SmartButton_setSize}, 
    {"setWidth", _wrap_SmartButton_setWidth}, 
    {"setHeight", _wrap_SmartButton_setHeight}, 
    {"setBorderSize", _wrap_SmartButton_setBorderSize}, 
    {"setCaption", _wrap_SmartButton_setCaption}, 
    {"setName", _wrap_SmartButton_setName}, 
    {"align", _wrap_SmartButton_align}, 
    {"valign", _wrap_SmartButton_valign}, 
    {"setBackgroundColor", _wrap_SmartButton_setBackgroundColor}, 
    {"setHoverColor", _wrap_SmartButton_setHoverColor}, 
    {"setPressedColor", _wrap_SmartButton_setPressedColor}, 
    {"setAllColors", _wrap_SmartButton_setAllColors}, 
    {"setHoverBackgroundColor", _wrap_SmartButton_setHoverBackgroundColor}, 
    {"setPressedBackgroundColor", _wrap_SmartButton_setPressedBackgroundColor}, 
    {"setAllBackgroundColors", _wrap_SmartButton_setAllBackgroundColors}, 
    {"setDefaultImage", _wrap_SmartButton_setDefaultImage}, 
    {"setHoverImage", _wrap_SmartButton_setHoverImage}, 
    {"setPressedImage", _wrap_SmartButton_setPressedImage}, 
    {"getWidth", _wrap_SmartButton_getWidth}, 
    {"getHeight", _wrap_SmartButton_getHeight}, 
    {"getBorderSize", _wrap_SmartButton_getBorderSize}, 
    {"getCaption", _wrap_SmartButton_getCaption}, 
    {"getName", _wrap_SmartButton_getName}, 
    {"getBackgroundColor", _wrap_SmartButton_getBackgroundColor}, 
    {"getHoverColor", _wrap_SmartButton_getHoverColor}, 
    {"getPressedColor", _wrap_SmartButton_getPressedColor}, 
    {"getHoverBackgroundColor", _wrap_SmartButton_getHoverBackgroundColor}, 
    {"getPressedBackgroundColor", _wrap_SmartButton_getPressedBackgroundColor}, 
    {"adjustSize", _wrap_SmartButton_adjustSize}, 
    {"isFocused", _wrap_SmartButton_isFocused}, 
    {"draw", _wrap_SmartButton_draw}, 
    {"drawBorder", _wrap_SmartButton_drawBorder}, 
    {"setColor", _wrap_SmartButton_setColor}, 
    {"setBorderColor", _wrap_SmartButton_setBorderColor}, 
    {"getColor", _wrap_SmartButton_getColor}, 
    {"getBorderColor", _wrap_SmartButton_getBorderColor}, 
    {0,0}
};
static swig_lua_attribute swig_boost_shared_ptr_Sl_love_Button_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_boost_shared_ptr_Sl_love_Button_Sg__bases[] = {0};
swig_lua_class _wrap_class_boost_shared_ptr_Sl_love_Button_Sg_ = { "SmartButton", &SWIGTYPE_p_boost__shared_ptrTlove__Button_t,0, swig_delete_SmartButton, swig_boost_shared_ptr_Sl_love_Button_Sg__methods, swig_boost_shared_ptr_Sl_love_Button_Sg__attributes, swig_boost_shared_ptr_Sl_love_Button_Sg__bases };

static int _wrap_SmartTextField___deref__(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextField > *arg1 = (boost::shared_ptr<love::TextField > *) 0 ;
  love::TextField *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::TextField > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextField_t,0,1,"SmartTextField___deref__");
  result = (love::TextField *)((boost::shared_ptr<love::TextField > const *)arg1)->operator ->();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__TextField,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_SmartTextField(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextField > *arg1 = (boost::shared_ptr<love::TextField > *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::TextField > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextField_t,0,1,"delete_SmartTextField");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextField_setSize(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextField > *arg1 = (boost::shared_ptr<love::TextField > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(boost::shared_ptr<love::TextField > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextField_t,0,1,"SmartTextField_setSize");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (*arg1)->setSize(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextField_setWidth(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextField > *arg1 = (boost::shared_ptr<love::TextField > *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::TextField > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextField_t,0,1,"SmartTextField_setWidth");
  arg2 = (int)lua_tonumber(L, 2);
  (*arg1)->setWidth(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextField_setHeight(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextField > *arg1 = (boost::shared_ptr<love::TextField > *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::TextField > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextField_t,0,1,"SmartTextField_setHeight");
  arg2 = (int)lua_tonumber(L, 2);
  (*arg1)->setHeight(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextField_setBorderSize(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextField > *arg1 = (boost::shared_ptr<love::TextField > *) 0 ;
  unsigned int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::TextField > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextField_t,0,1,"SmartTextField_setBorderSize");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (*arg1)->setBorderSize(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextField_setText(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextField > *arg1 = (boost::shared_ptr<love::TextField > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::TextField > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextField_t,0,1,"SmartTextField_setText");
  arg2 = (char*)lua_tostring(L, 2);
  (*arg1)->setText((char const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextField_setName(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextField > *arg1 = (boost::shared_ptr<love::TextField > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::TextField > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextField_t,0,1,"SmartTextField_setName");
  arg2 = (char*)lua_tostring(L, 2);
  (*arg1)->setName((char const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextField_setCaretPosition(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextField > *arg1 = (boost::shared_ptr<love::TextField > *) 0 ;
  unsigned int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::TextField > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextField_t,0,1,"SmartTextField_setCaretPosition");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (*arg1)->setCaretPosition(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextField_setBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextField > *arg1 = (boost::shared_ptr<love::TextField > *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::TextField > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextField_t,0,1,"SmartTextField_setBackgroundColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"SmartTextField_setBackgroundColor");
  (*arg1)->setBackgroundColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextField_setActiveColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextField > *arg1 = (boost::shared_ptr<love::TextField > *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::TextField > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextField_t,0,1,"SmartTextField_setActiveColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"SmartTextField_setActiveColor");
  (*arg1)->setActiveColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextField_setActiveBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextField > *arg1 = (boost::shared_ptr<love::TextField > *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::TextField > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextField_t,0,1,"SmartTextField_setActiveBackgroundColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"SmartTextField_setActiveBackgroundColor");
  (*arg1)->setActiveBackgroundColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextField_getWidth(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextField > *arg1 = (boost::shared_ptr<love::TextField > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::TextField > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextField_t,0,1,"SmartTextField_getWidth");
  result = (int)(*arg1)->getWidth();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextField_getHeight(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextField > *arg1 = (boost::shared_ptr<love::TextField > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::TextField > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextField_t,0,1,"SmartTextField_getHeight");
  result = (int)(*arg1)->getHeight();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextField_getBorderSize(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextField > *arg1 = (boost::shared_ptr<love::TextField > *) 0 ;
  unsigned int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::TextField > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextField_t,0,1,"SmartTextField_getBorderSize");
  result = (unsigned int)(*arg1)->getBorderSize();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextField_getText(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextField > *arg1 = (boost::shared_ptr<love::TextField > *) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::TextField > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextField_t,0,1,"SmartTextField_getText");
  result = (char *)(*arg1)->getText();
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextField_getName(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextField > *arg1 = (boost::shared_ptr<love::TextField > *) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::TextField > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextField_t,0,1,"SmartTextField_getName");
  result = (char *)(*arg1)->getName();
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextField_getCaretPosition(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextField > *arg1 = (boost::shared_ptr<love::TextField > *) 0 ;
  unsigned int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::TextField > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextField_t,0,1,"SmartTextField_getCaretPosition");
  result = (unsigned int)(*arg1)->getCaretPosition();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextField_getBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextField > *arg1 = (boost::shared_ptr<love::TextField > *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::TextField > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextField_t,0,1,"SmartTextField_getBackgroundColor");
  result = (*arg1)->getBackgroundColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextField_getActiveColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextField > *arg1 = (boost::shared_ptr<love::TextField > *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::TextField > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextField_t,0,1,"SmartTextField_getActiveColor");
  result = (*arg1)->getActiveColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextField_getActiveBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextField > *arg1 = (boost::shared_ptr<love::TextField > *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::TextField > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextField_t,0,1,"SmartTextField_getActiveBackgroundColor");
  result = (*arg1)->getActiveBackgroundColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextField_adjustSize(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextField > *arg1 = (boost::shared_ptr<love::TextField > *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::TextField > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextField_t,0,1,"SmartTextField_adjustSize");
  (*arg1)->adjustSize();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextField_draw(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextField > *arg1 = (boost::shared_ptr<love::TextField > *) 0 ;
  gcn::Graphics *arg2 = (gcn::Graphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::TextField > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextField_t,0,1,"SmartTextField_draw");
  arg2=(gcn::Graphics *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Graphics,0,2,"SmartTextField_draw");
  (*arg1)->draw(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextField_drawBorder(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextField > *arg1 = (boost::shared_ptr<love::TextField > *) 0 ;
  gcn::Graphics *arg2 = (gcn::Graphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::TextField > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextField_t,0,1,"SmartTextField_drawBorder");
  arg2=(gcn::Graphics *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Graphics,0,2,"SmartTextField_drawBorder");
  (*arg1)->drawBorder(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextField_setColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextField > *arg1 = (boost::shared_ptr<love::TextField > *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::TextField > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextField_t,0,1,"SmartTextField_setColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"SmartTextField_setColor");
  (*arg1)->setColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextField_setBorderColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextField > *arg1 = (boost::shared_ptr<love::TextField > *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::TextField > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextField_t,0,1,"SmartTextField_setBorderColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"SmartTextField_setBorderColor");
  (*arg1)->setBorderColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextField_getColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextField > *arg1 = (boost::shared_ptr<love::TextField > *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::TextField > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextField_t,0,1,"SmartTextField_getColor");
  result = (*arg1)->getColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextField_getBorderColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextField > *arg1 = (boost::shared_ptr<love::TextField > *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::TextField > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextField_t,0,1,"SmartTextField_getBorderColor");
  result = (*arg1)->getBorderColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SmartTextField(void *obj) {
boost::shared_ptr<love::TextField > *arg1 = (boost::shared_ptr<love::TextField > *) obj;
delete arg1;
}
static swig_lua_method swig_boost_shared_ptr_Sl_love_TextField_Sg__methods[] = {
    {"__deref__", _wrap_SmartTextField___deref__}, 
    {"setSize", _wrap_SmartTextField_setSize}, 
    {"setWidth", _wrap_SmartTextField_setWidth}, 
    {"setHeight", _wrap_SmartTextField_setHeight}, 
    {"setBorderSize", _wrap_SmartTextField_setBorderSize}, 
    {"setText", _wrap_SmartTextField_setText}, 
    {"setName", _wrap_SmartTextField_setName}, 
    {"setCaretPosition", _wrap_SmartTextField_setCaretPosition}, 
    {"setBackgroundColor", _wrap_SmartTextField_setBackgroundColor}, 
    {"setActiveColor", _wrap_SmartTextField_setActiveColor}, 
    {"setActiveBackgroundColor", _wrap_SmartTextField_setActiveBackgroundColor}, 
    {"getWidth", _wrap_SmartTextField_getWidth}, 
    {"getHeight", _wrap_SmartTextField_getHeight}, 
    {"getBorderSize", _wrap_SmartTextField_getBorderSize}, 
    {"getText", _wrap_SmartTextField_getText}, 
    {"getName", _wrap_SmartTextField_getName}, 
    {"getCaretPosition", _wrap_SmartTextField_getCaretPosition}, 
    {"getBackgroundColor", _wrap_SmartTextField_getBackgroundColor}, 
    {"getActiveColor", _wrap_SmartTextField_getActiveColor}, 
    {"getActiveBackgroundColor", _wrap_SmartTextField_getActiveBackgroundColor}, 
    {"adjustSize", _wrap_SmartTextField_adjustSize}, 
    {"draw", _wrap_SmartTextField_draw}, 
    {"drawBorder", _wrap_SmartTextField_drawBorder}, 
    {"setColor", _wrap_SmartTextField_setColor}, 
    {"setBorderColor", _wrap_SmartTextField_setBorderColor}, 
    {"getColor", _wrap_SmartTextField_getColor}, 
    {"getBorderColor", _wrap_SmartTextField_getBorderColor}, 
    {0,0}
};
static swig_lua_attribute swig_boost_shared_ptr_Sl_love_TextField_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_boost_shared_ptr_Sl_love_TextField_Sg__bases[] = {0};
swig_lua_class _wrap_class_boost_shared_ptr_Sl_love_TextField_Sg_ = { "SmartTextField", &SWIGTYPE_p_boost__shared_ptrTlove__TextField_t,0, swig_delete_SmartTextField, swig_boost_shared_ptr_Sl_love_TextField_Sg__methods, swig_boost_shared_ptr_Sl_love_TextField_Sg__attributes, swig_boost_shared_ptr_Sl_love_TextField_Sg__bases };

static int _wrap_SmartDropDown___deref__(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::DropDown > *arg1 = (boost::shared_ptr<love::DropDown > *) 0 ;
  love::DropDown *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::DropDown > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__DropDown_t,0,1,"SmartDropDown___deref__");
  result = (love::DropDown *)((boost::shared_ptr<love::DropDown > const *)arg1)->operator ->();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__DropDown,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_SmartDropDown(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::DropDown > *arg1 = (boost::shared_ptr<love::DropDown > *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::DropDown > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__DropDown_t,0,1,"delete_SmartDropDown");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartDropDown_setSize(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::DropDown > *arg1 = (boost::shared_ptr<love::DropDown > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(boost::shared_ptr<love::DropDown > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__DropDown_t,0,1,"SmartDropDown_setSize");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (*arg1)->setSize(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartDropDown_setWidth(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::DropDown > *arg1 = (boost::shared_ptr<love::DropDown > *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::DropDown > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__DropDown_t,0,1,"SmartDropDown_setWidth");
  arg2 = (int)lua_tonumber(L, 2);
  (*arg1)->setWidth(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartDropDown_setHeight(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::DropDown > *arg1 = (boost::shared_ptr<love::DropDown > *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::DropDown > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__DropDown_t,0,1,"SmartDropDown_setHeight");
  arg2 = (int)lua_tonumber(L, 2);
  (*arg1)->setHeight(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartDropDown_setBorderSize(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::DropDown > *arg1 = (boost::shared_ptr<love::DropDown > *) 0 ;
  unsigned int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::DropDown > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__DropDown_t,0,1,"SmartDropDown_setBorderSize");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (*arg1)->setBorderSize(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartDropDown_setName(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::DropDown > *arg1 = (boost::shared_ptr<love::DropDown > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::DropDown > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__DropDown_t,0,1,"SmartDropDown_setName");
  arg2 = (char*)lua_tostring(L, 2);
  (*arg1)->setName((char const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartDropDown_setBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::DropDown > *arg1 = (boost::shared_ptr<love::DropDown > *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::DropDown > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__DropDown_t,0,1,"SmartDropDown_setBackgroundColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"SmartDropDown_setBackgroundColor");
  (*arg1)->setBackgroundColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartDropDown_setActiveColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::DropDown > *arg1 = (boost::shared_ptr<love::DropDown > *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::DropDown > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__DropDown_t,0,1,"SmartDropDown_setActiveColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"SmartDropDown_setActiveColor");
  (*arg1)->setActiveColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartDropDown_setActiveBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::DropDown > *arg1 = (boost::shared_ptr<love::DropDown > *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::DropDown > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__DropDown_t,0,1,"SmartDropDown_setActiveBackgroundColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"SmartDropDown_setActiveBackgroundColor");
  (*arg1)->setActiveBackgroundColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartDropDown_setSelectionColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::DropDown > *arg1 = (boost::shared_ptr<love::DropDown > *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::DropDown > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__DropDown_t,0,1,"SmartDropDown_setSelectionColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"SmartDropDown_setSelectionColor");
  (*arg1)->setSelectionColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartDropDown_setSelectionBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::DropDown > *arg1 = (boost::shared_ptr<love::DropDown > *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::DropDown > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__DropDown_t,0,1,"SmartDropDown_setSelectionBackgroundColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"SmartDropDown_setSelectionBackgroundColor");
  (*arg1)->setSelectionBackgroundColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartDropDown_setButtonColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::DropDown > *arg1 = (boost::shared_ptr<love::DropDown > *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::DropDown > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__DropDown_t,0,1,"SmartDropDown_setButtonColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"SmartDropDown_setButtonColor");
  (*arg1)->setButtonColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartDropDown_setButtonBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::DropDown > *arg1 = (boost::shared_ptr<love::DropDown > *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::DropDown > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__DropDown_t,0,1,"SmartDropDown_setButtonBackgroundColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"SmartDropDown_setButtonBackgroundColor");
  (*arg1)->setButtonBackgroundColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartDropDown_setButton(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::DropDown > *arg1 = (boost::shared_ptr<love::DropDown > *) 0 ;
  pAbstractImage *arg2 = (pAbstractImage *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::DropDown > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__DropDown_t,0,1,"SmartDropDown_setButton");
  arg2=(pAbstractImage *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_pAbstractImage,0,2,"SmartDropDown_setButton");
  (*arg1)->setButton((pAbstractImage const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartDropDown_setButtonPressed(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::DropDown > *arg1 = (boost::shared_ptr<love::DropDown > *) 0 ;
  pAbstractImage *arg2 = (pAbstractImage *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::DropDown > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__DropDown_t,0,1,"SmartDropDown_setButtonPressed");
  arg2=(pAbstractImage *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_pAbstractImage,0,2,"SmartDropDown_setButtonPressed");
  (*arg1)->setButtonPressed((pAbstractImage const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartDropDown_getWidth(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::DropDown > *arg1 = (boost::shared_ptr<love::DropDown > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::DropDown > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__DropDown_t,0,1,"SmartDropDown_getWidth");
  result = (int)(*arg1)->getWidth();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartDropDown_getHeight(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::DropDown > *arg1 = (boost::shared_ptr<love::DropDown > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::DropDown > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__DropDown_t,0,1,"SmartDropDown_getHeight");
  result = (int)(*arg1)->getHeight();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartDropDown_getBorderSize(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::DropDown > *arg1 = (boost::shared_ptr<love::DropDown > *) 0 ;
  unsigned int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::DropDown > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__DropDown_t,0,1,"SmartDropDown_getBorderSize");
  result = (unsigned int)(*arg1)->getBorderSize();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartDropDown_getName(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::DropDown > *arg1 = (boost::shared_ptr<love::DropDown > *) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::DropDown > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__DropDown_t,0,1,"SmartDropDown_getName");
  result = (char *)(*arg1)->getName();
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartDropDown_adjustSize(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::DropDown > *arg1 = (boost::shared_ptr<love::DropDown > *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::DropDown > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__DropDown_t,0,1,"SmartDropDown_adjustSize");
  (*arg1)->adjustSize();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartDropDown_getBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::DropDown > *arg1 = (boost::shared_ptr<love::DropDown > *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::DropDown > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__DropDown_t,0,1,"SmartDropDown_getBackgroundColor");
  result = (*arg1)->getBackgroundColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartDropDown_getActiveColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::DropDown > *arg1 = (boost::shared_ptr<love::DropDown > *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::DropDown > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__DropDown_t,0,1,"SmartDropDown_getActiveColor");
  result = (*arg1)->getActiveColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartDropDown_getActiveBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::DropDown > *arg1 = (boost::shared_ptr<love::DropDown > *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::DropDown > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__DropDown_t,0,1,"SmartDropDown_getActiveBackgroundColor");
  result = (*arg1)->getActiveBackgroundColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartDropDown_getSelectionColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::DropDown > *arg1 = (boost::shared_ptr<love::DropDown > *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::DropDown > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__DropDown_t,0,1,"SmartDropDown_getSelectionColor");
  result = (*arg1)->getSelectionColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartDropDown_getSelectionBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::DropDown > *arg1 = (boost::shared_ptr<love::DropDown > *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::DropDown > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__DropDown_t,0,1,"SmartDropDown_getSelectionBackgroundColor");
  result = (*arg1)->getSelectionBackgroundColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartDropDown_getButtonColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::DropDown > *arg1 = (boost::shared_ptr<love::DropDown > *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::DropDown > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__DropDown_t,0,1,"SmartDropDown_getButtonColor");
  result = (*arg1)->getButtonColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartDropDown_getButtonBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::DropDown > *arg1 = (boost::shared_ptr<love::DropDown > *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::DropDown > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__DropDown_t,0,1,"SmartDropDown_getButtonBackgroundColor");
  result = (*arg1)->getButtonBackgroundColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartDropDown_add(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::DropDown > *arg1 = (boost::shared_ptr<love::DropDown > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::DropDown > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__DropDown_t,0,1,"SmartDropDown_add");
  arg2 = (char*)lua_tostring(L, 2);
  (*arg1)->add((char const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartDropDown_remove(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::DropDown > *arg1 = (boost::shared_ptr<love::DropDown > *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::DropDown > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__DropDown_t,0,1,"SmartDropDown_remove");
  arg2 = (int)lua_tonumber(L, 2);
  (*arg1)->remove(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartDropDown_clear(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::DropDown > *arg1 = (boost::shared_ptr<love::DropDown > *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::DropDown > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__DropDown_t,0,1,"SmartDropDown_clear");
  (*arg1)->clear();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartDropDown_getElementAt(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::DropDown > *arg1 = (boost::shared_ptr<love::DropDown > *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::DropDown > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__DropDown_t,0,1,"SmartDropDown_getElementAt");
  arg2 = (int)lua_tonumber(L, 2);
  result = (char *)(*arg1)->getElementAt(arg2);
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartDropDown_getSelected(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::DropDown > *arg1 = (boost::shared_ptr<love::DropDown > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::DropDown > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__DropDown_t,0,1,"SmartDropDown_getSelected");
  result = (int)(*arg1)->getSelected();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartDropDown_getSelectedElement(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::DropDown > *arg1 = (boost::shared_ptr<love::DropDown > *) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::DropDown > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__DropDown_t,0,1,"SmartDropDown_getSelectedElement");
  result = (char *)(*arg1)->getSelectedElement();
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartDropDown_getNumberOfElements(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::DropDown > *arg1 = (boost::shared_ptr<love::DropDown > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::DropDown > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__DropDown_t,0,1,"SmartDropDown_getNumberOfElements");
  result = (int)(*arg1)->getNumberOfElements();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartDropDown_draw(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::DropDown > *arg1 = (boost::shared_ptr<love::DropDown > *) 0 ;
  gcn::Graphics *arg2 = (gcn::Graphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::DropDown > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__DropDown_t,0,1,"SmartDropDown_draw");
  arg2=(gcn::Graphics *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Graphics,0,2,"SmartDropDown_draw");
  (*arg1)->draw(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartDropDown_drawBorder(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::DropDown > *arg1 = (boost::shared_ptr<love::DropDown > *) 0 ;
  gcn::Graphics *arg2 = (gcn::Graphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::DropDown > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__DropDown_t,0,1,"SmartDropDown_drawBorder");
  arg2=(gcn::Graphics *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Graphics,0,2,"SmartDropDown_drawBorder");
  (*arg1)->drawBorder(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartDropDown_drawButton(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::DropDown > *arg1 = (boost::shared_ptr<love::DropDown > *) 0 ;
  gcn::Graphics *arg2 = (gcn::Graphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::DropDown > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__DropDown_t,0,1,"SmartDropDown_drawButton");
  arg2=(gcn::Graphics *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Graphics,0,2,"SmartDropDown_drawButton");
  (*arg1)->drawButton(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartDropDown_setColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::DropDown > *arg1 = (boost::shared_ptr<love::DropDown > *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::DropDown > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__DropDown_t,0,1,"SmartDropDown_setColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"SmartDropDown_setColor");
  (*arg1)->setColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartDropDown_setBorderColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::DropDown > *arg1 = (boost::shared_ptr<love::DropDown > *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::DropDown > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__DropDown_t,0,1,"SmartDropDown_setBorderColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"SmartDropDown_setBorderColor");
  (*arg1)->setBorderColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartDropDown_getColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::DropDown > *arg1 = (boost::shared_ptr<love::DropDown > *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::DropDown > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__DropDown_t,0,1,"SmartDropDown_getColor");
  result = (*arg1)->getColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartDropDown_getBorderColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::DropDown > *arg1 = (boost::shared_ptr<love::DropDown > *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::DropDown > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__DropDown_t,0,1,"SmartDropDown_getBorderColor");
  result = (*arg1)->getBorderColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SmartDropDown(void *obj) {
boost::shared_ptr<love::DropDown > *arg1 = (boost::shared_ptr<love::DropDown > *) obj;
delete arg1;
}
static swig_lua_method swig_boost_shared_ptr_Sl_love_DropDown_Sg__methods[] = {
    {"__deref__", _wrap_SmartDropDown___deref__}, 
    {"setSize", _wrap_SmartDropDown_setSize}, 
    {"setWidth", _wrap_SmartDropDown_setWidth}, 
    {"setHeight", _wrap_SmartDropDown_setHeight}, 
    {"setBorderSize", _wrap_SmartDropDown_setBorderSize}, 
    {"setName", _wrap_SmartDropDown_setName}, 
    {"setBackgroundColor", _wrap_SmartDropDown_setBackgroundColor}, 
    {"setActiveColor", _wrap_SmartDropDown_setActiveColor}, 
    {"setActiveBackgroundColor", _wrap_SmartDropDown_setActiveBackgroundColor}, 
    {"setSelectionColor", _wrap_SmartDropDown_setSelectionColor}, 
    {"setSelectionBackgroundColor", _wrap_SmartDropDown_setSelectionBackgroundColor}, 
    {"setButtonColor", _wrap_SmartDropDown_setButtonColor}, 
    {"setButtonBackgroundColor", _wrap_SmartDropDown_setButtonBackgroundColor}, 
    {"setButton", _wrap_SmartDropDown_setButton}, 
    {"setButtonPressed", _wrap_SmartDropDown_setButtonPressed}, 
    {"getWidth", _wrap_SmartDropDown_getWidth}, 
    {"getHeight", _wrap_SmartDropDown_getHeight}, 
    {"getBorderSize", _wrap_SmartDropDown_getBorderSize}, 
    {"getName", _wrap_SmartDropDown_getName}, 
    {"adjustSize", _wrap_SmartDropDown_adjustSize}, 
    {"getBackgroundColor", _wrap_SmartDropDown_getBackgroundColor}, 
    {"getActiveColor", _wrap_SmartDropDown_getActiveColor}, 
    {"getActiveBackgroundColor", _wrap_SmartDropDown_getActiveBackgroundColor}, 
    {"getSelectionColor", _wrap_SmartDropDown_getSelectionColor}, 
    {"getSelectionBackgroundColor", _wrap_SmartDropDown_getSelectionBackgroundColor}, 
    {"getButtonColor", _wrap_SmartDropDown_getButtonColor}, 
    {"getButtonBackgroundColor", _wrap_SmartDropDown_getButtonBackgroundColor}, 
    {"add", _wrap_SmartDropDown_add}, 
    {"remove", _wrap_SmartDropDown_remove}, 
    {"clear", _wrap_SmartDropDown_clear}, 
    {"getElementAt", _wrap_SmartDropDown_getElementAt}, 
    {"getSelected", _wrap_SmartDropDown_getSelected}, 
    {"getSelectedElement", _wrap_SmartDropDown_getSelectedElement}, 
    {"getNumberOfElements", _wrap_SmartDropDown_getNumberOfElements}, 
    {"draw", _wrap_SmartDropDown_draw}, 
    {"drawBorder", _wrap_SmartDropDown_drawBorder}, 
    {"drawButton", _wrap_SmartDropDown_drawButton}, 
    {"setColor", _wrap_SmartDropDown_setColor}, 
    {"setBorderColor", _wrap_SmartDropDown_setBorderColor}, 
    {"getColor", _wrap_SmartDropDown_getColor}, 
    {"getBorderColor", _wrap_SmartDropDown_getBorderColor}, 
    {0,0}
};
static swig_lua_attribute swig_boost_shared_ptr_Sl_love_DropDown_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_boost_shared_ptr_Sl_love_DropDown_Sg__bases[] = {0};
swig_lua_class _wrap_class_boost_shared_ptr_Sl_love_DropDown_Sg_ = { "SmartDropDown", &SWIGTYPE_p_boost__shared_ptrTlove__DropDown_t,0, swig_delete_SmartDropDown, swig_boost_shared_ptr_Sl_love_DropDown_Sg__methods, swig_boost_shared_ptr_Sl_love_DropDown_Sg__attributes, swig_boost_shared_ptr_Sl_love_DropDown_Sg__bases };

static int _wrap_SmartRadioButton___deref__(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::RadioButton > *arg1 = (boost::shared_ptr<love::RadioButton > *) 0 ;
  love::RadioButton *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::RadioButton > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__RadioButton_t,0,1,"SmartRadioButton___deref__");
  result = (love::RadioButton *)((boost::shared_ptr<love::RadioButton > const *)arg1)->operator ->();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__RadioButton,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_SmartRadioButton(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::RadioButton > *arg1 = (boost::shared_ptr<love::RadioButton > *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::RadioButton > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__RadioButton_t,0,1,"delete_SmartRadioButton");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartRadioButton_setSize(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::RadioButton > *arg1 = (boost::shared_ptr<love::RadioButton > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(boost::shared_ptr<love::RadioButton > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__RadioButton_t,0,1,"SmartRadioButton_setSize");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (*arg1)->setSize(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartRadioButton_setWidth(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::RadioButton > *arg1 = (boost::shared_ptr<love::RadioButton > *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::RadioButton > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__RadioButton_t,0,1,"SmartRadioButton_setWidth");
  arg2 = (int)lua_tonumber(L, 2);
  (*arg1)->setWidth(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartRadioButton_setHeight(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::RadioButton > *arg1 = (boost::shared_ptr<love::RadioButton > *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::RadioButton > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__RadioButton_t,0,1,"SmartRadioButton_setHeight");
  arg2 = (int)lua_tonumber(L, 2);
  (*arg1)->setHeight(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartRadioButton_setBorderSize(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::RadioButton > *arg1 = (boost::shared_ptr<love::RadioButton > *) 0 ;
  unsigned int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::RadioButton > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__RadioButton_t,0,1,"SmartRadioButton_setBorderSize");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (*arg1)->setBorderSize(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartRadioButton_setCaption(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::RadioButton > *arg1 = (boost::shared_ptr<love::RadioButton > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::RadioButton > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__RadioButton_t,0,1,"SmartRadioButton_setCaption");
  arg2 = (char*)lua_tostring(L, 2);
  (*arg1)->setCaption((char const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartRadioButton_setName(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::RadioButton > *arg1 = (boost::shared_ptr<love::RadioButton > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::RadioButton > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__RadioButton_t,0,1,"SmartRadioButton_setName");
  arg2 = (char*)lua_tostring(L, 2);
  (*arg1)->setName((char const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartRadioButton_setMarked(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::RadioButton > *arg1 = (boost::shared_ptr<love::RadioButton > *) 0 ;
  bool arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isboolean(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::RadioButton > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__RadioButton_t,0,1,"SmartRadioButton_setMarked");
  arg2 = (bool)lua_toboolean(L, 2);
  (*arg1)->setMarked(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartRadioButton_align(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::RadioButton > *arg1 = (boost::shared_ptr<love::RadioButton > *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::RadioButton > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__RadioButton_t,0,1,"SmartRadioButton_align");
  arg2 = (int)lua_tonumber(L, 2);
  (*arg1)->align(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartRadioButton_valign(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::RadioButton > *arg1 = (boost::shared_ptr<love::RadioButton > *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::RadioButton > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__RadioButton_t,0,1,"SmartRadioButton_valign");
  arg2 = (int)lua_tonumber(L, 2);
  (*arg1)->valign(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartRadioButton_setBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::RadioButton > *arg1 = (boost::shared_ptr<love::RadioButton > *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::RadioButton > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__RadioButton_t,0,1,"SmartRadioButton_setBackgroundColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"SmartRadioButton_setBackgroundColor");
  (*arg1)->setBackgroundColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartRadioButton_setDefaultImage(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::RadioButton > *arg1 = (boost::shared_ptr<love::RadioButton > *) 0 ;
  pAbstractImage *arg2 = (pAbstractImage *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::RadioButton > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__RadioButton_t,0,1,"SmartRadioButton_setDefaultImage");
  arg2=(pAbstractImage *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_pAbstractImage,0,2,"SmartRadioButton_setDefaultImage");
  (*arg1)->setDefaultImage((pAbstractImage const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartRadioButton_setMarkedImage(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::RadioButton > *arg1 = (boost::shared_ptr<love::RadioButton > *) 0 ;
  pAbstractImage *arg2 = (pAbstractImage *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::RadioButton > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__RadioButton_t,0,1,"SmartRadioButton_setMarkedImage");
  arg2=(pAbstractImage *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_pAbstractImage,0,2,"SmartRadioButton_setMarkedImage");
  (*arg1)->setMarkedImage((pAbstractImage const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartRadioButton_getWidth(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::RadioButton > *arg1 = (boost::shared_ptr<love::RadioButton > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::RadioButton > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__RadioButton_t,0,1,"SmartRadioButton_getWidth");
  result = (int)(*arg1)->getWidth();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartRadioButton_getHeight(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::RadioButton > *arg1 = (boost::shared_ptr<love::RadioButton > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::RadioButton > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__RadioButton_t,0,1,"SmartRadioButton_getHeight");
  result = (int)(*arg1)->getHeight();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartRadioButton_getBorderSize(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::RadioButton > *arg1 = (boost::shared_ptr<love::RadioButton > *) 0 ;
  unsigned int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::RadioButton > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__RadioButton_t,0,1,"SmartRadioButton_getBorderSize");
  result = (unsigned int)(*arg1)->getBorderSize();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartRadioButton_getCaption(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::RadioButton > *arg1 = (boost::shared_ptr<love::RadioButton > *) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::RadioButton > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__RadioButton_t,0,1,"SmartRadioButton_getCaption");
  result = (char *)(*arg1)->getCaption();
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartRadioButton_getName(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::RadioButton > *arg1 = (boost::shared_ptr<love::RadioButton > *) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::RadioButton > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__RadioButton_t,0,1,"SmartRadioButton_getName");
  result = (char *)(*arg1)->getName();
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartRadioButton_isMarked(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::RadioButton > *arg1 = (boost::shared_ptr<love::RadioButton > *) 0 ;
  bool result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::RadioButton > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__RadioButton_t,0,1,"SmartRadioButton_isMarked");
  result = (bool)(*arg1)->isMarked();
  SWIG_arg=0;
  lua_pushboolean(L,(int)result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartRadioButton_getBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::RadioButton > *arg1 = (boost::shared_ptr<love::RadioButton > *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::RadioButton > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__RadioButton_t,0,1,"SmartRadioButton_getBackgroundColor");
  result = (*arg1)->getBackgroundColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartRadioButton_getDefaultImage(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::RadioButton > *arg1 = (boost::shared_ptr<love::RadioButton > *) 0 ;
  pAbstractImage result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::RadioButton > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__RadioButton_t,0,1,"SmartRadioButton_getDefaultImage");
  result = (*arg1)->getDefaultImage();
  SWIG_arg=0;
  {
    pAbstractImage * resultptr;
    resultptr = new pAbstractImage((pAbstractImage &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pAbstractImage,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartRadioButton_getMarkedImage(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::RadioButton > *arg1 = (boost::shared_ptr<love::RadioButton > *) 0 ;
  pAbstractImage result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::RadioButton > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__RadioButton_t,0,1,"SmartRadioButton_getMarkedImage");
  result = (*arg1)->getMarkedImage();
  SWIG_arg=0;
  {
    pAbstractImage * resultptr;
    resultptr = new pAbstractImage((pAbstractImage &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pAbstractImage,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartRadioButton_adjustSize(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::RadioButton > *arg1 = (boost::shared_ptr<love::RadioButton > *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::RadioButton > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__RadioButton_t,0,1,"SmartRadioButton_adjustSize");
  (*arg1)->adjustSize();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartRadioButton_draw(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::RadioButton > *arg1 = (boost::shared_ptr<love::RadioButton > *) 0 ;
  gcn::Graphics *arg2 = (gcn::Graphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::RadioButton > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__RadioButton_t,0,1,"SmartRadioButton_draw");
  arg2=(gcn::Graphics *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Graphics,0,2,"SmartRadioButton_draw");
  (*arg1)->draw(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartRadioButton_drawBorder(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::RadioButton > *arg1 = (boost::shared_ptr<love::RadioButton > *) 0 ;
  gcn::Graphics *arg2 = (gcn::Graphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::RadioButton > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__RadioButton_t,0,1,"SmartRadioButton_drawBorder");
  arg2=(gcn::Graphics *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Graphics,0,2,"SmartRadioButton_drawBorder");
  (*arg1)->drawBorder(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartRadioButton_drawBox(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::RadioButton > *arg1 = (boost::shared_ptr<love::RadioButton > *) 0 ;
  gcn::Graphics *arg2 = (gcn::Graphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::RadioButton > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__RadioButton_t,0,1,"SmartRadioButton_drawBox");
  arg2=(gcn::Graphics *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Graphics,0,2,"SmartRadioButton_drawBox");
  (*arg1)->drawBox(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartRadioButton_setColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::RadioButton > *arg1 = (boost::shared_ptr<love::RadioButton > *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::RadioButton > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__RadioButton_t,0,1,"SmartRadioButton_setColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"SmartRadioButton_setColor");
  (*arg1)->setColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartRadioButton_setBorderColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::RadioButton > *arg1 = (boost::shared_ptr<love::RadioButton > *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::RadioButton > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__RadioButton_t,0,1,"SmartRadioButton_setBorderColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"SmartRadioButton_setBorderColor");
  (*arg1)->setBorderColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartRadioButton_getColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::RadioButton > *arg1 = (boost::shared_ptr<love::RadioButton > *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::RadioButton > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__RadioButton_t,0,1,"SmartRadioButton_getColor");
  result = (*arg1)->getColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartRadioButton_getBorderColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::RadioButton > *arg1 = (boost::shared_ptr<love::RadioButton > *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::RadioButton > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__RadioButton_t,0,1,"SmartRadioButton_getBorderColor");
  result = (*arg1)->getBorderColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SmartRadioButton(void *obj) {
boost::shared_ptr<love::RadioButton > *arg1 = (boost::shared_ptr<love::RadioButton > *) obj;
delete arg1;
}
static swig_lua_method swig_boost_shared_ptr_Sl_love_RadioButton_Sg__methods[] = {
    {"__deref__", _wrap_SmartRadioButton___deref__}, 
    {"setSize", _wrap_SmartRadioButton_setSize}, 
    {"setWidth", _wrap_SmartRadioButton_setWidth}, 
    {"setHeight", _wrap_SmartRadioButton_setHeight}, 
    {"setBorderSize", _wrap_SmartRadioButton_setBorderSize}, 
    {"setCaption", _wrap_SmartRadioButton_setCaption}, 
    {"setName", _wrap_SmartRadioButton_setName}, 
    {"setMarked", _wrap_SmartRadioButton_setMarked}, 
    {"align", _wrap_SmartRadioButton_align}, 
    {"valign", _wrap_SmartRadioButton_valign}, 
    {"setBackgroundColor", _wrap_SmartRadioButton_setBackgroundColor}, 
    {"setDefaultImage", _wrap_SmartRadioButton_setDefaultImage}, 
    {"setMarkedImage", _wrap_SmartRadioButton_setMarkedImage}, 
    {"getWidth", _wrap_SmartRadioButton_getWidth}, 
    {"getHeight", _wrap_SmartRadioButton_getHeight}, 
    {"getBorderSize", _wrap_SmartRadioButton_getBorderSize}, 
    {"getCaption", _wrap_SmartRadioButton_getCaption}, 
    {"getName", _wrap_SmartRadioButton_getName}, 
    {"isMarked", _wrap_SmartRadioButton_isMarked}, 
    {"getBackgroundColor", _wrap_SmartRadioButton_getBackgroundColor}, 
    {"getDefaultImage", _wrap_SmartRadioButton_getDefaultImage}, 
    {"getMarkedImage", _wrap_SmartRadioButton_getMarkedImage}, 
    {"adjustSize", _wrap_SmartRadioButton_adjustSize}, 
    {"draw", _wrap_SmartRadioButton_draw}, 
    {"drawBorder", _wrap_SmartRadioButton_drawBorder}, 
    {"drawBox", _wrap_SmartRadioButton_drawBox}, 
    {"setColor", _wrap_SmartRadioButton_setColor}, 
    {"setBorderColor", _wrap_SmartRadioButton_setBorderColor}, 
    {"getColor", _wrap_SmartRadioButton_getColor}, 
    {"getBorderColor", _wrap_SmartRadioButton_getBorderColor}, 
    {0,0}
};
static swig_lua_attribute swig_boost_shared_ptr_Sl_love_RadioButton_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_boost_shared_ptr_Sl_love_RadioButton_Sg__bases[] = {0};
swig_lua_class _wrap_class_boost_shared_ptr_Sl_love_RadioButton_Sg_ = { "SmartRadioButton", &SWIGTYPE_p_boost__shared_ptrTlove__RadioButton_t,0, swig_delete_SmartRadioButton, swig_boost_shared_ptr_Sl_love_RadioButton_Sg__methods, swig_boost_shared_ptr_Sl_love_RadioButton_Sg__attributes, swig_boost_shared_ptr_Sl_love_RadioButton_Sg__bases };

static int _wrap_SmartCheckBox___deref__(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::CheckBox > *arg1 = (boost::shared_ptr<love::CheckBox > *) 0 ;
  love::CheckBox *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::CheckBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__CheckBox_t,0,1,"SmartCheckBox___deref__");
  result = (love::CheckBox *)((boost::shared_ptr<love::CheckBox > const *)arg1)->operator ->();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__CheckBox,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_SmartCheckBox(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::CheckBox > *arg1 = (boost::shared_ptr<love::CheckBox > *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::CheckBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__CheckBox_t,0,1,"delete_SmartCheckBox");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartCheckBox_setSize(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::CheckBox > *arg1 = (boost::shared_ptr<love::CheckBox > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(boost::shared_ptr<love::CheckBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__CheckBox_t,0,1,"SmartCheckBox_setSize");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (*arg1)->setSize(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartCheckBox_setWidth(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::CheckBox > *arg1 = (boost::shared_ptr<love::CheckBox > *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::CheckBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__CheckBox_t,0,1,"SmartCheckBox_setWidth");
  arg2 = (int)lua_tonumber(L, 2);
  (*arg1)->setWidth(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartCheckBox_setHeight(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::CheckBox > *arg1 = (boost::shared_ptr<love::CheckBox > *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::CheckBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__CheckBox_t,0,1,"SmartCheckBox_setHeight");
  arg2 = (int)lua_tonumber(L, 2);
  (*arg1)->setHeight(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartCheckBox_setBorderSize(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::CheckBox > *arg1 = (boost::shared_ptr<love::CheckBox > *) 0 ;
  unsigned int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::CheckBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__CheckBox_t,0,1,"SmartCheckBox_setBorderSize");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (*arg1)->setBorderSize(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartCheckBox_setCaption(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::CheckBox > *arg1 = (boost::shared_ptr<love::CheckBox > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::CheckBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__CheckBox_t,0,1,"SmartCheckBox_setCaption");
  arg2 = (char*)lua_tostring(L, 2);
  (*arg1)->setCaption((char const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartCheckBox_setName(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::CheckBox > *arg1 = (boost::shared_ptr<love::CheckBox > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::CheckBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__CheckBox_t,0,1,"SmartCheckBox_setName");
  arg2 = (char*)lua_tostring(L, 2);
  (*arg1)->setName((char const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartCheckBox_setMarked(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::CheckBox > *arg1 = (boost::shared_ptr<love::CheckBox > *) 0 ;
  bool arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isboolean(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::CheckBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__CheckBox_t,0,1,"SmartCheckBox_setMarked");
  arg2 = (bool)lua_toboolean(L, 2);
  (*arg1)->setMarked(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartCheckBox_align(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::CheckBox > *arg1 = (boost::shared_ptr<love::CheckBox > *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::CheckBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__CheckBox_t,0,1,"SmartCheckBox_align");
  arg2 = (int)lua_tonumber(L, 2);
  (*arg1)->align(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartCheckBox_valign(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::CheckBox > *arg1 = (boost::shared_ptr<love::CheckBox > *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::CheckBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__CheckBox_t,0,1,"SmartCheckBox_valign");
  arg2 = (int)lua_tonumber(L, 2);
  (*arg1)->valign(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartCheckBox_setBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::CheckBox > *arg1 = (boost::shared_ptr<love::CheckBox > *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::CheckBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__CheckBox_t,0,1,"SmartCheckBox_setBackgroundColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"SmartCheckBox_setBackgroundColor");
  (*arg1)->setBackgroundColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartCheckBox_setDefaultImage(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::CheckBox > *arg1 = (boost::shared_ptr<love::CheckBox > *) 0 ;
  pAbstractImage *arg2 = (pAbstractImage *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::CheckBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__CheckBox_t,0,1,"SmartCheckBox_setDefaultImage");
  arg2=(pAbstractImage *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_pAbstractImage,0,2,"SmartCheckBox_setDefaultImage");
  (*arg1)->setDefaultImage((pAbstractImage const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartCheckBox_setMarkedImage(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::CheckBox > *arg1 = (boost::shared_ptr<love::CheckBox > *) 0 ;
  pAbstractImage *arg2 = (pAbstractImage *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::CheckBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__CheckBox_t,0,1,"SmartCheckBox_setMarkedImage");
  arg2=(pAbstractImage *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_pAbstractImage,0,2,"SmartCheckBox_setMarkedImage");
  (*arg1)->setMarkedImage((pAbstractImage const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartCheckBox_getWidth(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::CheckBox > *arg1 = (boost::shared_ptr<love::CheckBox > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::CheckBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__CheckBox_t,0,1,"SmartCheckBox_getWidth");
  result = (int)(*arg1)->getWidth();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartCheckBox_getHeight(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::CheckBox > *arg1 = (boost::shared_ptr<love::CheckBox > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::CheckBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__CheckBox_t,0,1,"SmartCheckBox_getHeight");
  result = (int)(*arg1)->getHeight();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartCheckBox_getBorderSize(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::CheckBox > *arg1 = (boost::shared_ptr<love::CheckBox > *) 0 ;
  unsigned int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::CheckBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__CheckBox_t,0,1,"SmartCheckBox_getBorderSize");
  result = (unsigned int)(*arg1)->getBorderSize();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartCheckBox_getCaption(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::CheckBox > *arg1 = (boost::shared_ptr<love::CheckBox > *) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::CheckBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__CheckBox_t,0,1,"SmartCheckBox_getCaption");
  result = (char *)(*arg1)->getCaption();
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartCheckBox_getName(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::CheckBox > *arg1 = (boost::shared_ptr<love::CheckBox > *) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::CheckBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__CheckBox_t,0,1,"SmartCheckBox_getName");
  result = (char *)(*arg1)->getName();
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartCheckBox_isMarked(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::CheckBox > *arg1 = (boost::shared_ptr<love::CheckBox > *) 0 ;
  bool result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::CheckBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__CheckBox_t,0,1,"SmartCheckBox_isMarked");
  result = (bool)(*arg1)->isMarked();
  SWIG_arg=0;
  lua_pushboolean(L,(int)result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartCheckBox_getBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::CheckBox > *arg1 = (boost::shared_ptr<love::CheckBox > *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::CheckBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__CheckBox_t,0,1,"SmartCheckBox_getBackgroundColor");
  result = (*arg1)->getBackgroundColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartCheckBox_getDefaultImage(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::CheckBox > *arg1 = (boost::shared_ptr<love::CheckBox > *) 0 ;
  pAbstractImage result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::CheckBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__CheckBox_t,0,1,"SmartCheckBox_getDefaultImage");
  result = (*arg1)->getDefaultImage();
  SWIG_arg=0;
  {
    pAbstractImage * resultptr;
    resultptr = new pAbstractImage((pAbstractImage &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pAbstractImage,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartCheckBox_getMarkedImage(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::CheckBox > *arg1 = (boost::shared_ptr<love::CheckBox > *) 0 ;
  pAbstractImage result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::CheckBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__CheckBox_t,0,1,"SmartCheckBox_getMarkedImage");
  result = (*arg1)->getMarkedImage();
  SWIG_arg=0;
  {
    pAbstractImage * resultptr;
    resultptr = new pAbstractImage((pAbstractImage &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pAbstractImage,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartCheckBox_adjustSize(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::CheckBox > *arg1 = (boost::shared_ptr<love::CheckBox > *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::CheckBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__CheckBox_t,0,1,"SmartCheckBox_adjustSize");
  (*arg1)->adjustSize();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartCheckBox_draw(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::CheckBox > *arg1 = (boost::shared_ptr<love::CheckBox > *) 0 ;
  gcn::Graphics *arg2 = (gcn::Graphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::CheckBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__CheckBox_t,0,1,"SmartCheckBox_draw");
  arg2=(gcn::Graphics *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Graphics,0,2,"SmartCheckBox_draw");
  (*arg1)->draw(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartCheckBox_drawBorder(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::CheckBox > *arg1 = (boost::shared_ptr<love::CheckBox > *) 0 ;
  gcn::Graphics *arg2 = (gcn::Graphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::CheckBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__CheckBox_t,0,1,"SmartCheckBox_drawBorder");
  arg2=(gcn::Graphics *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Graphics,0,2,"SmartCheckBox_drawBorder");
  (*arg1)->drawBorder(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartCheckBox_drawBox(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::CheckBox > *arg1 = (boost::shared_ptr<love::CheckBox > *) 0 ;
  gcn::Graphics *arg2 = (gcn::Graphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::CheckBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__CheckBox_t,0,1,"SmartCheckBox_drawBox");
  arg2=(gcn::Graphics *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Graphics,0,2,"SmartCheckBox_drawBox");
  (*arg1)->drawBox(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartCheckBox_setColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::CheckBox > *arg1 = (boost::shared_ptr<love::CheckBox > *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::CheckBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__CheckBox_t,0,1,"SmartCheckBox_setColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"SmartCheckBox_setColor");
  (*arg1)->setColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartCheckBox_setBorderColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::CheckBox > *arg1 = (boost::shared_ptr<love::CheckBox > *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::CheckBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__CheckBox_t,0,1,"SmartCheckBox_setBorderColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"SmartCheckBox_setBorderColor");
  (*arg1)->setBorderColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartCheckBox_getColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::CheckBox > *arg1 = (boost::shared_ptr<love::CheckBox > *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::CheckBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__CheckBox_t,0,1,"SmartCheckBox_getColor");
  result = (*arg1)->getColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartCheckBox_getBorderColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::CheckBox > *arg1 = (boost::shared_ptr<love::CheckBox > *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::CheckBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__CheckBox_t,0,1,"SmartCheckBox_getBorderColor");
  result = (*arg1)->getBorderColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SmartCheckBox(void *obj) {
boost::shared_ptr<love::CheckBox > *arg1 = (boost::shared_ptr<love::CheckBox > *) obj;
delete arg1;
}
static swig_lua_method swig_boost_shared_ptr_Sl_love_CheckBox_Sg__methods[] = {
    {"__deref__", _wrap_SmartCheckBox___deref__}, 
    {"setSize", _wrap_SmartCheckBox_setSize}, 
    {"setWidth", _wrap_SmartCheckBox_setWidth}, 
    {"setHeight", _wrap_SmartCheckBox_setHeight}, 
    {"setBorderSize", _wrap_SmartCheckBox_setBorderSize}, 
    {"setCaption", _wrap_SmartCheckBox_setCaption}, 
    {"setName", _wrap_SmartCheckBox_setName}, 
    {"setMarked", _wrap_SmartCheckBox_setMarked}, 
    {"align", _wrap_SmartCheckBox_align}, 
    {"valign", _wrap_SmartCheckBox_valign}, 
    {"setBackgroundColor", _wrap_SmartCheckBox_setBackgroundColor}, 
    {"setDefaultImage", _wrap_SmartCheckBox_setDefaultImage}, 
    {"setMarkedImage", _wrap_SmartCheckBox_setMarkedImage}, 
    {"getWidth", _wrap_SmartCheckBox_getWidth}, 
    {"getHeight", _wrap_SmartCheckBox_getHeight}, 
    {"getBorderSize", _wrap_SmartCheckBox_getBorderSize}, 
    {"getCaption", _wrap_SmartCheckBox_getCaption}, 
    {"getName", _wrap_SmartCheckBox_getName}, 
    {"isMarked", _wrap_SmartCheckBox_isMarked}, 
    {"getBackgroundColor", _wrap_SmartCheckBox_getBackgroundColor}, 
    {"getDefaultImage", _wrap_SmartCheckBox_getDefaultImage}, 
    {"getMarkedImage", _wrap_SmartCheckBox_getMarkedImage}, 
    {"adjustSize", _wrap_SmartCheckBox_adjustSize}, 
    {"draw", _wrap_SmartCheckBox_draw}, 
    {"drawBorder", _wrap_SmartCheckBox_drawBorder}, 
    {"drawBox", _wrap_SmartCheckBox_drawBox}, 
    {"setColor", _wrap_SmartCheckBox_setColor}, 
    {"setBorderColor", _wrap_SmartCheckBox_setBorderColor}, 
    {"getColor", _wrap_SmartCheckBox_getColor}, 
    {"getBorderColor", _wrap_SmartCheckBox_getBorderColor}, 
    {0,0}
};
static swig_lua_attribute swig_boost_shared_ptr_Sl_love_CheckBox_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_boost_shared_ptr_Sl_love_CheckBox_Sg__bases[] = {0};
swig_lua_class _wrap_class_boost_shared_ptr_Sl_love_CheckBox_Sg_ = { "SmartCheckBox", &SWIGTYPE_p_boost__shared_ptrTlove__CheckBox_t,0, swig_delete_SmartCheckBox, swig_boost_shared_ptr_Sl_love_CheckBox_Sg__methods, swig_boost_shared_ptr_Sl_love_CheckBox_Sg__attributes, swig_boost_shared_ptr_Sl_love_CheckBox_Sg__bases };

static int _wrap_SmartSlider___deref__(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Slider > *arg1 = (boost::shared_ptr<love::Slider > *) 0 ;
  love::Slider *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Slider > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Slider_t,0,1,"SmartSlider___deref__");
  result = (love::Slider *)((boost::shared_ptr<love::Slider > const *)arg1)->operator ->();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__Slider,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_SmartSlider(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Slider > *arg1 = (boost::shared_ptr<love::Slider > *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Slider > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Slider_t,0,1,"delete_SmartSlider");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartSlider_LOVE_SLIDER_HORIZONTAL_get(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Slider > *arg1 = (boost::shared_ptr<love::Slider > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Slider > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Slider_t,0,1,"SmartSlider_LOVE_SLIDER_HORIZONTAL_get");
  result = (int)(int) (love::Slider::LOVE_SLIDER_HORIZONTAL);
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartSlider_LOVE_SLIDER_VERTICAL_get(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Slider > *arg1 = (boost::shared_ptr<love::Slider > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Slider > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Slider_t,0,1,"SmartSlider_LOVE_SLIDER_VERTICAL_get");
  result = (int)(int) (love::Slider::LOVE_SLIDER_VERTICAL);
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartSlider_setSize(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Slider > *arg1 = (boost::shared_ptr<love::Slider > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(boost::shared_ptr<love::Slider > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Slider_t,0,1,"SmartSlider_setSize");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (*arg1)->setSize(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartSlider_setWidth(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Slider > *arg1 = (boost::shared_ptr<love::Slider > *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Slider > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Slider_t,0,1,"SmartSlider_setWidth");
  arg2 = (int)lua_tonumber(L, 2);
  (*arg1)->setWidth(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartSlider_setHeight(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Slider > *arg1 = (boost::shared_ptr<love::Slider > *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Slider > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Slider_t,0,1,"SmartSlider_setHeight");
  arg2 = (int)lua_tonumber(L, 2);
  (*arg1)->setHeight(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartSlider_setBorderSize(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Slider > *arg1 = (boost::shared_ptr<love::Slider > *) 0 ;
  unsigned int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Slider > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Slider_t,0,1,"SmartSlider_setBorderSize");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (*arg1)->setBorderSize(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartSlider_setScale(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Slider > *arg1 = (boost::shared_ptr<love::Slider > *) 0 ;
  double arg2 ;
  double arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(boost::shared_ptr<love::Slider > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Slider_t,0,1,"SmartSlider_setScale");
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (*arg1)->setScale(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartSlider_setScaleStart(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Slider > *arg1 = (boost::shared_ptr<love::Slider > *) 0 ;
  double arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Slider > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Slider_t,0,1,"SmartSlider_setScaleStart");
  arg2 = (double)lua_tonumber(L, 2);
  (*arg1)->setScaleStart(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartSlider_setScaleEnd(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Slider > *arg1 = (boost::shared_ptr<love::Slider > *) 0 ;
  double arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Slider > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Slider_t,0,1,"SmartSlider_setScaleEnd");
  arg2 = (double)lua_tonumber(L, 2);
  (*arg1)->setScaleEnd(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartSlider_setStepLength(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Slider > *arg1 = (boost::shared_ptr<love::Slider > *) 0 ;
  double arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Slider > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Slider_t,0,1,"SmartSlider_setStepLength");
  arg2 = (double)lua_tonumber(L, 2);
  (*arg1)->setStepLength(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartSlider_setMarkerLength(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Slider > *arg1 = (boost::shared_ptr<love::Slider > *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Slider > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Slider_t,0,1,"SmartSlider_setMarkerLength");
  arg2 = (int)lua_tonumber(L, 2);
  (*arg1)->setMarkerLength(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartSlider_setOrientation(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Slider > *arg1 = (boost::shared_ptr<love::Slider > *) 0 ;
  unsigned int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Slider > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Slider_t,0,1,"SmartSlider_setOrientation");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (*arg1)->setOrientation(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartSlider_setValue(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Slider > *arg1 = (boost::shared_ptr<love::Slider > *) 0 ;
  double arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Slider > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Slider_t,0,1,"SmartSlider_setValue");
  arg2 = (double)lua_tonumber(L, 2);
  (*arg1)->setValue(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartSlider_setName(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Slider > *arg1 = (boost::shared_ptr<love::Slider > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Slider > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Slider_t,0,1,"SmartSlider_setName");
  arg2 = (char*)lua_tostring(L, 2);
  (*arg1)->setName((char const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartSlider_setBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Slider > *arg1 = (boost::shared_ptr<love::Slider > *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Slider > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Slider_t,0,1,"SmartSlider_setBackgroundColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"SmartSlider_setBackgroundColor");
  (*arg1)->setBackgroundColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartSlider_setMarkerImage(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Slider > *arg1 = (boost::shared_ptr<love::Slider > *) 0 ;
  pAbstractImage *arg2 = (pAbstractImage *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Slider > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Slider_t,0,1,"SmartSlider_setMarkerImage");
  arg2=(pAbstractImage *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_pAbstractImage,0,2,"SmartSlider_setMarkerImage");
  (*arg1)->setMarkerImage((pAbstractImage const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartSlider_setBackgroundImage(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Slider > *arg1 = (boost::shared_ptr<love::Slider > *) 0 ;
  pAbstractImage *arg2 = (pAbstractImage *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Slider > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Slider_t,0,1,"SmartSlider_setBackgroundImage");
  arg2=(pAbstractImage *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_pAbstractImage,0,2,"SmartSlider_setBackgroundImage");
  (*arg1)->setBackgroundImage((pAbstractImage const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartSlider_getWidth(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Slider > *arg1 = (boost::shared_ptr<love::Slider > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Slider > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Slider_t,0,1,"SmartSlider_getWidth");
  result = (int)(*arg1)->getWidth();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartSlider_getHeight(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Slider > *arg1 = (boost::shared_ptr<love::Slider > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Slider > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Slider_t,0,1,"SmartSlider_getHeight");
  result = (int)(*arg1)->getHeight();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartSlider_getBorderSize(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Slider > *arg1 = (boost::shared_ptr<love::Slider > *) 0 ;
  unsigned int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Slider > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Slider_t,0,1,"SmartSlider_getBorderSize");
  result = (unsigned int)(*arg1)->getBorderSize();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartSlider_getScaleStart(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Slider > *arg1 = (boost::shared_ptr<love::Slider > *) 0 ;
  double result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Slider > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Slider_t,0,1,"SmartSlider_getScaleStart");
  result = (double)(*arg1)->getScaleStart();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartSlider_getScaleEnd(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Slider > *arg1 = (boost::shared_ptr<love::Slider > *) 0 ;
  double result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Slider > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Slider_t,0,1,"SmartSlider_getScaleEnd");
  result = (double)(*arg1)->getScaleEnd();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartSlider_getStepLength(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Slider > *arg1 = (boost::shared_ptr<love::Slider > *) 0 ;
  double result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Slider > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Slider_t,0,1,"SmartSlider_getStepLength");
  result = (double)(*arg1)->getStepLength();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartSlider_getMarkerLength(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Slider > *arg1 = (boost::shared_ptr<love::Slider > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Slider > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Slider_t,0,1,"SmartSlider_getMarkerLength");
  result = (int)(*arg1)->getMarkerLength();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartSlider_getOrientation(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Slider > *arg1 = (boost::shared_ptr<love::Slider > *) 0 ;
  unsigned int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Slider > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Slider_t,0,1,"SmartSlider_getOrientation");
  result = (unsigned int)(*arg1)->getOrientation();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartSlider_getValue(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Slider > *arg1 = (boost::shared_ptr<love::Slider > *) 0 ;
  double result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Slider > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Slider_t,0,1,"SmartSlider_getValue");
  result = (double)(*arg1)->getValue();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartSlider_getName(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Slider > *arg1 = (boost::shared_ptr<love::Slider > *) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Slider > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Slider_t,0,1,"SmartSlider_getName");
  result = (char *)(*arg1)->getName();
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartSlider_getBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Slider > *arg1 = (boost::shared_ptr<love::Slider > *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Slider > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Slider_t,0,1,"SmartSlider_getBackgroundColor");
  result = (*arg1)->getBackgroundColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartSlider_getMarkerImage(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Slider > *arg1 = (boost::shared_ptr<love::Slider > *) 0 ;
  pAbstractImage result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Slider > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Slider_t,0,1,"SmartSlider_getMarkerImage");
  result = (*arg1)->getMarkerImage();
  SWIG_arg=0;
  {
    pAbstractImage * resultptr;
    resultptr = new pAbstractImage((pAbstractImage &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pAbstractImage,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartSlider_getBackgroundImage(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Slider > *arg1 = (boost::shared_ptr<love::Slider > *) 0 ;
  pAbstractImage result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Slider > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Slider_t,0,1,"SmartSlider_getBackgroundImage");
  result = (*arg1)->getBackgroundImage();
  SWIG_arg=0;
  {
    pAbstractImage * resultptr;
    resultptr = new pAbstractImage((pAbstractImage &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pAbstractImage,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartSlider_adjustSize(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Slider > *arg1 = (boost::shared_ptr<love::Slider > *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Slider > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Slider_t,0,1,"SmartSlider_adjustSize");
  (*arg1)->adjustSize();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartSlider_draw(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Slider > *arg1 = (boost::shared_ptr<love::Slider > *) 0 ;
  gcn::Graphics *arg2 = (gcn::Graphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Slider > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Slider_t,0,1,"SmartSlider_draw");
  arg2=(gcn::Graphics *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Graphics,0,2,"SmartSlider_draw");
  (*arg1)->draw(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartSlider_drawBorder(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Slider > *arg1 = (boost::shared_ptr<love::Slider > *) 0 ;
  gcn::Graphics *arg2 = (gcn::Graphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Slider > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Slider_t,0,1,"SmartSlider_drawBorder");
  arg2=(gcn::Graphics *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Graphics,0,2,"SmartSlider_drawBorder");
  (*arg1)->drawBorder(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartSlider_drawMarker(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Slider > *arg1 = (boost::shared_ptr<love::Slider > *) 0 ;
  gcn::Graphics *arg2 = (gcn::Graphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Slider > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Slider_t,0,1,"SmartSlider_drawMarker");
  arg2=(gcn::Graphics *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Graphics,0,2,"SmartSlider_drawMarker");
  (*arg1)->drawMarker(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartSlider_setColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Slider > *arg1 = (boost::shared_ptr<love::Slider > *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Slider > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Slider_t,0,1,"SmartSlider_setColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"SmartSlider_setColor");
  (*arg1)->setColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartSlider_setBorderColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Slider > *arg1 = (boost::shared_ptr<love::Slider > *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Slider > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Slider_t,0,1,"SmartSlider_setBorderColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"SmartSlider_setBorderColor");
  (*arg1)->setBorderColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartSlider_getColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Slider > *arg1 = (boost::shared_ptr<love::Slider > *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Slider > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Slider_t,0,1,"SmartSlider_getColor");
  result = (*arg1)->getColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartSlider_getBorderColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Slider > *arg1 = (boost::shared_ptr<love::Slider > *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Slider > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Slider_t,0,1,"SmartSlider_getBorderColor");
  result = (*arg1)->getBorderColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SmartSlider(void *obj) {
boost::shared_ptr<love::Slider > *arg1 = (boost::shared_ptr<love::Slider > *) obj;
delete arg1;
}
static swig_lua_method swig_boost_shared_ptr_Sl_love_Slider_Sg__methods[] = {
    {"__deref__", _wrap_SmartSlider___deref__}, 
    {"setSize", _wrap_SmartSlider_setSize}, 
    {"setWidth", _wrap_SmartSlider_setWidth}, 
    {"setHeight", _wrap_SmartSlider_setHeight}, 
    {"setBorderSize", _wrap_SmartSlider_setBorderSize}, 
    {"setScale", _wrap_SmartSlider_setScale}, 
    {"setScaleStart", _wrap_SmartSlider_setScaleStart}, 
    {"setScaleEnd", _wrap_SmartSlider_setScaleEnd}, 
    {"setStepLength", _wrap_SmartSlider_setStepLength}, 
    {"setMarkerLength", _wrap_SmartSlider_setMarkerLength}, 
    {"setOrientation", _wrap_SmartSlider_setOrientation}, 
    {"setValue", _wrap_SmartSlider_setValue}, 
    {"setName", _wrap_SmartSlider_setName}, 
    {"setBackgroundColor", _wrap_SmartSlider_setBackgroundColor}, 
    {"setMarkerImage", _wrap_SmartSlider_setMarkerImage}, 
    {"setBackgroundImage", _wrap_SmartSlider_setBackgroundImage}, 
    {"getWidth", _wrap_SmartSlider_getWidth}, 
    {"getHeight", _wrap_SmartSlider_getHeight}, 
    {"getBorderSize", _wrap_SmartSlider_getBorderSize}, 
    {"getScaleStart", _wrap_SmartSlider_getScaleStart}, 
    {"getScaleEnd", _wrap_SmartSlider_getScaleEnd}, 
    {"getStepLength", _wrap_SmartSlider_getStepLength}, 
    {"getMarkerLength", _wrap_SmartSlider_getMarkerLength}, 
    {"getOrientation", _wrap_SmartSlider_getOrientation}, 
    {"getValue", _wrap_SmartSlider_getValue}, 
    {"getName", _wrap_SmartSlider_getName}, 
    {"getBackgroundColor", _wrap_SmartSlider_getBackgroundColor}, 
    {"getMarkerImage", _wrap_SmartSlider_getMarkerImage}, 
    {"getBackgroundImage", _wrap_SmartSlider_getBackgroundImage}, 
    {"adjustSize", _wrap_SmartSlider_adjustSize}, 
    {"draw", _wrap_SmartSlider_draw}, 
    {"drawBorder", _wrap_SmartSlider_drawBorder}, 
    {"drawMarker", _wrap_SmartSlider_drawMarker}, 
    {"setColor", _wrap_SmartSlider_setColor}, 
    {"setBorderColor", _wrap_SmartSlider_setBorderColor}, 
    {"getColor", _wrap_SmartSlider_getColor}, 
    {"getBorderColor", _wrap_SmartSlider_getBorderColor}, 
    {0,0}
};
static swig_lua_attribute swig_boost_shared_ptr_Sl_love_Slider_Sg__attributes[] = {
    { "LOVE_SLIDER_HORIZONTAL",_wrap_SmartSlider_LOVE_SLIDER_HORIZONTAL_get, 0 },
    { "LOVE_SLIDER_VERTICAL",_wrap_SmartSlider_LOVE_SLIDER_VERTICAL_get, 0 },
    {0,0,0}
};
static swig_lua_class *swig_boost_shared_ptr_Sl_love_Slider_Sg__bases[] = {0};
swig_lua_class _wrap_class_boost_shared_ptr_Sl_love_Slider_Sg_ = { "SmartSlider", &SWIGTYPE_p_boost__shared_ptrTlove__Slider_t,0, swig_delete_SmartSlider, swig_boost_shared_ptr_Sl_love_Slider_Sg__methods, swig_boost_shared_ptr_Sl_love_Slider_Sg__attributes, swig_boost_shared_ptr_Sl_love_Slider_Sg__bases };

static int _wrap_SmartListBox___deref__(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ListBox > *arg1 = (boost::shared_ptr<love::ListBox > *) 0 ;
  love::ListBox *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::ListBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ListBox_t,0,1,"SmartListBox___deref__");
  result = (love::ListBox *)((boost::shared_ptr<love::ListBox > const *)arg1)->operator ->();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__ListBox,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_SmartListBox(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ListBox > *arg1 = (boost::shared_ptr<love::ListBox > *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::ListBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ListBox_t,0,1,"delete_SmartListBox");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartListBox_setSize(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ListBox > *arg1 = (boost::shared_ptr<love::ListBox > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(boost::shared_ptr<love::ListBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ListBox_t,0,1,"SmartListBox_setSize");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (*arg1)->setSize(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartListBox_setWidth(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ListBox > *arg1 = (boost::shared_ptr<love::ListBox > *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::ListBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ListBox_t,0,1,"SmartListBox_setWidth");
  arg2 = (int)lua_tonumber(L, 2);
  (*arg1)->setWidth(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartListBox_setHeight(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ListBox > *arg1 = (boost::shared_ptr<love::ListBox > *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::ListBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ListBox_t,0,1,"SmartListBox_setHeight");
  arg2 = (int)lua_tonumber(L, 2);
  (*arg1)->setHeight(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartListBox_setBorderSize(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ListBox > *arg1 = (boost::shared_ptr<love::ListBox > *) 0 ;
  unsigned int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::ListBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ListBox_t,0,1,"SmartListBox_setBorderSize");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (*arg1)->setBorderSize(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartListBox_setName(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ListBox > *arg1 = (boost::shared_ptr<love::ListBox > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::ListBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ListBox_t,0,1,"SmartListBox_setName");
  arg2 = (char*)lua_tostring(L, 2);
  (*arg1)->setName((char const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartListBox_setBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ListBox > *arg1 = (boost::shared_ptr<love::ListBox > *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::ListBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ListBox_t,0,1,"SmartListBox_setBackgroundColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"SmartListBox_setBackgroundColor");
  (*arg1)->setBackgroundColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartListBox_setSelectionColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ListBox > *arg1 = (boost::shared_ptr<love::ListBox > *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::ListBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ListBox_t,0,1,"SmartListBox_setSelectionColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"SmartListBox_setSelectionColor");
  (*arg1)->setSelectionColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartListBox_setSelectionBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ListBox > *arg1 = (boost::shared_ptr<love::ListBox > *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::ListBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ListBox_t,0,1,"SmartListBox_setSelectionBackgroundColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"SmartListBox_setSelectionBackgroundColor");
  (*arg1)->setSelectionBackgroundColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartListBox_getWidth(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ListBox > *arg1 = (boost::shared_ptr<love::ListBox > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::ListBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ListBox_t,0,1,"SmartListBox_getWidth");
  result = (int)(*arg1)->getWidth();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartListBox_getHeight(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ListBox > *arg1 = (boost::shared_ptr<love::ListBox > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::ListBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ListBox_t,0,1,"SmartListBox_getHeight");
  result = (int)(*arg1)->getHeight();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartListBox_getBorderSize(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ListBox > *arg1 = (boost::shared_ptr<love::ListBox > *) 0 ;
  unsigned int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::ListBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ListBox_t,0,1,"SmartListBox_getBorderSize");
  result = (unsigned int)(*arg1)->getBorderSize();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartListBox_getName(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ListBox > *arg1 = (boost::shared_ptr<love::ListBox > *) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::ListBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ListBox_t,0,1,"SmartListBox_getName");
  result = (char *)(*arg1)->getName();
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartListBox_getBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ListBox > *arg1 = (boost::shared_ptr<love::ListBox > *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::ListBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ListBox_t,0,1,"SmartListBox_getBackgroundColor");
  result = (*arg1)->getBackgroundColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartListBox_getSeclectionColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ListBox > *arg1 = (boost::shared_ptr<love::ListBox > *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::ListBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ListBox_t,0,1,"SmartListBox_getSeclectionColor");
  result = (*arg1)->getSeclectionColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartListBox_getSeclectionBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ListBox > *arg1 = (boost::shared_ptr<love::ListBox > *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::ListBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ListBox_t,0,1,"SmartListBox_getSeclectionBackgroundColor");
  result = (*arg1)->getSeclectionBackgroundColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartListBox_adjustSize(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ListBox > *arg1 = (boost::shared_ptr<love::ListBox > *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::ListBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ListBox_t,0,1,"SmartListBox_adjustSize");
  (*arg1)->adjustSize();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartListBox_add(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ListBox > *arg1 = (boost::shared_ptr<love::ListBox > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::ListBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ListBox_t,0,1,"SmartListBox_add");
  arg2 = (char*)lua_tostring(L, 2);
  (*arg1)->add((char const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartListBox_remove(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ListBox > *arg1 = (boost::shared_ptr<love::ListBox > *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::ListBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ListBox_t,0,1,"SmartListBox_remove");
  arg2 = (int)lua_tonumber(L, 2);
  (*arg1)->remove(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartListBox_clear(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ListBox > *arg1 = (boost::shared_ptr<love::ListBox > *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::ListBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ListBox_t,0,1,"SmartListBox_clear");
  (*arg1)->clear();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartListBox_getElementAt(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ListBox > *arg1 = (boost::shared_ptr<love::ListBox > *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::ListBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ListBox_t,0,1,"SmartListBox_getElementAt");
  arg2 = (int)lua_tonumber(L, 2);
  result = (char *)(*arg1)->getElementAt(arg2);
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartListBox_getSelected(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ListBox > *arg1 = (boost::shared_ptr<love::ListBox > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::ListBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ListBox_t,0,1,"SmartListBox_getSelected");
  result = (int)(*arg1)->getSelected();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartListBox_getSelectedElement(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ListBox > *arg1 = (boost::shared_ptr<love::ListBox > *) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::ListBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ListBox_t,0,1,"SmartListBox_getSelectedElement");
  result = (char *)(*arg1)->getSelectedElement();
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartListBox_getNumberOfElements(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ListBox > *arg1 = (boost::shared_ptr<love::ListBox > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::ListBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ListBox_t,0,1,"SmartListBox_getNumberOfElements");
  result = (int)(*arg1)->getNumberOfElements();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartListBox_draw(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ListBox > *arg1 = (boost::shared_ptr<love::ListBox > *) 0 ;
  gcn::Graphics *arg2 = (gcn::Graphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::ListBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ListBox_t,0,1,"SmartListBox_draw");
  arg2=(gcn::Graphics *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Graphics,0,2,"SmartListBox_draw");
  (*arg1)->draw(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartListBox_drawBorder(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ListBox > *arg1 = (boost::shared_ptr<love::ListBox > *) 0 ;
  gcn::Graphics *arg2 = (gcn::Graphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::ListBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ListBox_t,0,1,"SmartListBox_drawBorder");
  arg2=(gcn::Graphics *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Graphics,0,2,"SmartListBox_drawBorder");
  (*arg1)->drawBorder(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartListBox_setColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ListBox > *arg1 = (boost::shared_ptr<love::ListBox > *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::ListBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ListBox_t,0,1,"SmartListBox_setColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"SmartListBox_setColor");
  (*arg1)->setColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartListBox_setBorderColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ListBox > *arg1 = (boost::shared_ptr<love::ListBox > *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::ListBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ListBox_t,0,1,"SmartListBox_setBorderColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"SmartListBox_setBorderColor");
  (*arg1)->setBorderColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartListBox_getColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ListBox > *arg1 = (boost::shared_ptr<love::ListBox > *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::ListBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ListBox_t,0,1,"SmartListBox_getColor");
  result = (*arg1)->getColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartListBox_getBorderColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::ListBox > *arg1 = (boost::shared_ptr<love::ListBox > *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::ListBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__ListBox_t,0,1,"SmartListBox_getBorderColor");
  result = (*arg1)->getBorderColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SmartListBox(void *obj) {
boost::shared_ptr<love::ListBox > *arg1 = (boost::shared_ptr<love::ListBox > *) obj;
delete arg1;
}
static swig_lua_method swig_boost_shared_ptr_Sl_love_ListBox_Sg__methods[] = {
    {"__deref__", _wrap_SmartListBox___deref__}, 
    {"setSize", _wrap_SmartListBox_setSize}, 
    {"setWidth", _wrap_SmartListBox_setWidth}, 
    {"setHeight", _wrap_SmartListBox_setHeight}, 
    {"setBorderSize", _wrap_SmartListBox_setBorderSize}, 
    {"setName", _wrap_SmartListBox_setName}, 
    {"setBackgroundColor", _wrap_SmartListBox_setBackgroundColor}, 
    {"setSelectionColor", _wrap_SmartListBox_setSelectionColor}, 
    {"setSelectionBackgroundColor", _wrap_SmartListBox_setSelectionBackgroundColor}, 
    {"getWidth", _wrap_SmartListBox_getWidth}, 
    {"getHeight", _wrap_SmartListBox_getHeight}, 
    {"getBorderSize", _wrap_SmartListBox_getBorderSize}, 
    {"getName", _wrap_SmartListBox_getName}, 
    {"getBackgroundColor", _wrap_SmartListBox_getBackgroundColor}, 
    {"getSeclectionColor", _wrap_SmartListBox_getSeclectionColor}, 
    {"getSeclectionBackgroundColor", _wrap_SmartListBox_getSeclectionBackgroundColor}, 
    {"adjustSize", _wrap_SmartListBox_adjustSize}, 
    {"add", _wrap_SmartListBox_add}, 
    {"remove", _wrap_SmartListBox_remove}, 
    {"clear", _wrap_SmartListBox_clear}, 
    {"getElementAt", _wrap_SmartListBox_getElementAt}, 
    {"getSelected", _wrap_SmartListBox_getSelected}, 
    {"getSelectedElement", _wrap_SmartListBox_getSelectedElement}, 
    {"getNumberOfElements", _wrap_SmartListBox_getNumberOfElements}, 
    {"draw", _wrap_SmartListBox_draw}, 
    {"drawBorder", _wrap_SmartListBox_drawBorder}, 
    {"setColor", _wrap_SmartListBox_setColor}, 
    {"setBorderColor", _wrap_SmartListBox_setBorderColor}, 
    {"getColor", _wrap_SmartListBox_getColor}, 
    {"getBorderColor", _wrap_SmartListBox_getBorderColor}, 
    {0,0}
};
static swig_lua_attribute swig_boost_shared_ptr_Sl_love_ListBox_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_boost_shared_ptr_Sl_love_ListBox_Sg__bases[] = {0};
swig_lua_class _wrap_class_boost_shared_ptr_Sl_love_ListBox_Sg_ = { "SmartListBox", &SWIGTYPE_p_boost__shared_ptrTlove__ListBox_t,0, swig_delete_SmartListBox, swig_boost_shared_ptr_Sl_love_ListBox_Sg__methods, swig_boost_shared_ptr_Sl_love_ListBox_Sg__attributes, swig_boost_shared_ptr_Sl_love_ListBox_Sg__bases };

static int _wrap_SmartTextBox___deref__(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextBox > *arg1 = (boost::shared_ptr<love::TextBox > *) 0 ;
  love::TextBox *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::TextBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextBox_t,0,1,"SmartTextBox___deref__");
  result = (love::TextBox *)((boost::shared_ptr<love::TextBox > const *)arg1)->operator ->();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__TextBox,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_SmartTextBox(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextBox > *arg1 = (boost::shared_ptr<love::TextBox > *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::TextBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextBox_t,0,1,"delete_SmartTextBox");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextBox_setSize(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextBox > *arg1 = (boost::shared_ptr<love::TextBox > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(boost::shared_ptr<love::TextBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextBox_t,0,1,"SmartTextBox_setSize");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (*arg1)->setSize(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextBox_setWidth(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextBox > *arg1 = (boost::shared_ptr<love::TextBox > *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::TextBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextBox_t,0,1,"SmartTextBox_setWidth");
  arg2 = (int)lua_tonumber(L, 2);
  (*arg1)->setWidth(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextBox_setHeight(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextBox > *arg1 = (boost::shared_ptr<love::TextBox > *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::TextBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextBox_t,0,1,"SmartTextBox_setHeight");
  arg2 = (int)lua_tonumber(L, 2);
  (*arg1)->setHeight(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextBox_setBorderSize(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextBox > *arg1 = (boost::shared_ptr<love::TextBox > *) 0 ;
  unsigned int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::TextBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextBox_t,0,1,"SmartTextBox_setBorderSize");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (*arg1)->setBorderSize(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextBox_setText(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextBox > *arg1 = (boost::shared_ptr<love::TextBox > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::TextBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextBox_t,0,1,"SmartTextBox_setText");
  arg2 = (char*)lua_tostring(L, 2);
  (*arg1)->setText((char const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextBox_setName(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextBox > *arg1 = (boost::shared_ptr<love::TextBox > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::TextBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextBox_t,0,1,"SmartTextBox_setName");
  arg2 = (char*)lua_tostring(L, 2);
  (*arg1)->setName((char const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextBox_setCaretColumn(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextBox > *arg1 = (boost::shared_ptr<love::TextBox > *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::TextBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextBox_t,0,1,"SmartTextBox_setCaretColumn");
  arg2 = (int)lua_tonumber(L, 2);
  (*arg1)->setCaretColumn(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextBox_setCaretPosition(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextBox > *arg1 = (boost::shared_ptr<love::TextBox > *) 0 ;
  unsigned int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::TextBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextBox_t,0,1,"SmartTextBox_setCaretPosition");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (*arg1)->setCaretPosition(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextBox_setCaretRow(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextBox > *arg1 = (boost::shared_ptr<love::TextBox > *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::TextBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextBox_t,0,1,"SmartTextBox_setCaretRow");
  arg2 = (int)lua_tonumber(L, 2);
  (*arg1)->setCaretRow(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextBox_setCaretRowColumn(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextBox > *arg1 = (boost::shared_ptr<love::TextBox > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(boost::shared_ptr<love::TextBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextBox_t,0,1,"SmartTextBox_setCaretRowColumn");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (*arg1)->setCaretRowColumn(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextBox_setEditable(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextBox > *arg1 = (boost::shared_ptr<love::TextBox > *) 0 ;
  bool arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isboolean(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::TextBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextBox_t,0,1,"SmartTextBox_setEditable");
  arg2 = (bool)lua_toboolean(L, 2);
  (*arg1)->setEditable(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextBox_setTextRow(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextBox > *arg1 = (boost::shared_ptr<love::TextBox > *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isstring(L,3)) SWIG_fail_arg(3);
  arg1=(boost::shared_ptr<love::TextBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextBox_t,0,1,"SmartTextBox_setTextRow");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char*)lua_tostring(L, 3);
  (*arg1)->setTextRow(arg2,(char const *)arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextBox_setBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextBox > *arg1 = (boost::shared_ptr<love::TextBox > *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::TextBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextBox_t,0,1,"SmartTextBox_setBackgroundColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"SmartTextBox_setBackgroundColor");
  (*arg1)->setBackgroundColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextBox_setActiveColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextBox > *arg1 = (boost::shared_ptr<love::TextBox > *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::TextBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextBox_t,0,1,"SmartTextBox_setActiveColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"SmartTextBox_setActiveColor");
  (*arg1)->setActiveColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextBox_setActiveBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextBox > *arg1 = (boost::shared_ptr<love::TextBox > *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::TextBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextBox_t,0,1,"SmartTextBox_setActiveBackgroundColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"SmartTextBox_setActiveBackgroundColor");
  (*arg1)->setActiveBackgroundColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextBox_getWidth(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextBox > *arg1 = (boost::shared_ptr<love::TextBox > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::TextBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextBox_t,0,1,"SmartTextBox_getWidth");
  result = (int)(*arg1)->getWidth();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextBox_getHeight(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextBox > *arg1 = (boost::shared_ptr<love::TextBox > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::TextBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextBox_t,0,1,"SmartTextBox_getHeight");
  result = (int)(*arg1)->getHeight();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextBox_getBorderSize(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextBox > *arg1 = (boost::shared_ptr<love::TextBox > *) 0 ;
  unsigned int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::TextBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextBox_t,0,1,"SmartTextBox_getBorderSize");
  result = (unsigned int)(*arg1)->getBorderSize();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextBox_getText(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextBox > *arg1 = (boost::shared_ptr<love::TextBox > *) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::TextBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextBox_t,0,1,"SmartTextBox_getText");
  result = (char *)(*arg1)->getText();
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextBox_getName(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextBox > *arg1 = (boost::shared_ptr<love::TextBox > *) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::TextBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextBox_t,0,1,"SmartTextBox_getName");
  result = (char *)(*arg1)->getName();
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextBox_getCaretColumn(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextBox > *arg1 = (boost::shared_ptr<love::TextBox > *) 0 ;
  unsigned int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::TextBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextBox_t,0,1,"SmartTextBox_getCaretColumn");
  result = (unsigned int)(*arg1)->getCaretColumn();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextBox_getCaretPosition(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextBox > *arg1 = (boost::shared_ptr<love::TextBox > *) 0 ;
  unsigned int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::TextBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextBox_t,0,1,"SmartTextBox_getCaretPosition");
  result = (unsigned int)(*arg1)->getCaretPosition();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextBox_getCaretRow(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextBox > *arg1 = (boost::shared_ptr<love::TextBox > *) 0 ;
  unsigned int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::TextBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextBox_t,0,1,"SmartTextBox_getCaretRow");
  result = (unsigned int)(*arg1)->getCaretRow();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextBox_getNumberOfRows(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextBox > *arg1 = (boost::shared_ptr<love::TextBox > *) 0 ;
  unsigned int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::TextBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextBox_t,0,1,"SmartTextBox_getNumberOfRows");
  result = (unsigned int)(*arg1)->getNumberOfRows();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextBox_getRow(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextBox > *arg1 = (boost::shared_ptr<love::TextBox > *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::TextBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextBox_t,0,1,"SmartTextBox_getRow");
  arg2 = (int)lua_tonumber(L, 2);
  result = (char *)(*arg1)->getRow(arg2);
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextBox_isEditable(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextBox > *arg1 = (boost::shared_ptr<love::TextBox > *) 0 ;
  bool result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::TextBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextBox_t,0,1,"SmartTextBox_isEditable");
  result = (bool)(*arg1)->isEditable();
  SWIG_arg=0;
  lua_pushboolean(L,(int)result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextBox_getBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextBox > *arg1 = (boost::shared_ptr<love::TextBox > *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::TextBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextBox_t,0,1,"SmartTextBox_getBackgroundColor");
  result = (*arg1)->getBackgroundColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextBox_getActiveColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextBox > *arg1 = (boost::shared_ptr<love::TextBox > *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::TextBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextBox_t,0,1,"SmartTextBox_getActiveColor");
  result = (*arg1)->getActiveColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextBox_getActiveBackgroundColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextBox > *arg1 = (boost::shared_ptr<love::TextBox > *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::TextBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextBox_t,0,1,"SmartTextBox_getActiveBackgroundColor");
  result = (*arg1)->getActiveBackgroundColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextBox_adjustSize(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextBox > *arg1 = (boost::shared_ptr<love::TextBox > *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::TextBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextBox_t,0,1,"SmartTextBox_adjustSize");
  (*arg1)->adjustSize();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextBox_draw(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextBox > *arg1 = (boost::shared_ptr<love::TextBox > *) 0 ;
  gcn::Graphics *arg2 = (gcn::Graphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::TextBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextBox_t,0,1,"SmartTextBox_draw");
  arg2=(gcn::Graphics *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Graphics,0,2,"SmartTextBox_draw");
  (*arg1)->draw(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextBox_drawBorder(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextBox > *arg1 = (boost::shared_ptr<love::TextBox > *) 0 ;
  gcn::Graphics *arg2 = (gcn::Graphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::TextBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextBox_t,0,1,"SmartTextBox_drawBorder");
  arg2=(gcn::Graphics *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_gcn__Graphics,0,2,"SmartTextBox_drawBorder");
  (*arg1)->drawBorder(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextBox_setColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextBox > *arg1 = (boost::shared_ptr<love::TextBox > *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::TextBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextBox_t,0,1,"SmartTextBox_setColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"SmartTextBox_setColor");
  (*arg1)->setColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextBox_setBorderColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextBox > *arg1 = (boost::shared_ptr<love::TextBox > *) 0 ;
  love::pAbstractColor *arg2 = (love::pAbstractColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::TextBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextBox_t,0,1,"SmartTextBox_setBorderColor");
  arg2=(love::pAbstractColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,0,2,"SmartTextBox_setBorderColor");
  (*arg1)->setBorderColor((love::pAbstractColor const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextBox_getColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextBox > *arg1 = (boost::shared_ptr<love::TextBox > *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::TextBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextBox_t,0,1,"SmartTextBox_getColor");
  result = (*arg1)->getColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartTextBox_getBorderColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::TextBox > *arg1 = (boost::shared_ptr<love::TextBox > *) 0 ;
  love::pAbstractColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::TextBox > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__TextBox_t,0,1,"SmartTextBox_getBorderColor");
  result = (*arg1)->getBorderColor();
  SWIG_arg=0;
  {
    love::pAbstractColor * resultptr;
    resultptr = new love::pAbstractColor((love::pAbstractColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__AbstractColor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SmartTextBox(void *obj) {
boost::shared_ptr<love::TextBox > *arg1 = (boost::shared_ptr<love::TextBox > *) obj;
delete arg1;
}
static swig_lua_method swig_boost_shared_ptr_Sl_love_TextBox_Sg__methods[] = {
    {"__deref__", _wrap_SmartTextBox___deref__}, 
    {"setSize", _wrap_SmartTextBox_setSize}, 
    {"setWidth", _wrap_SmartTextBox_setWidth}, 
    {"setHeight", _wrap_SmartTextBox_setHeight}, 
    {"setBorderSize", _wrap_SmartTextBox_setBorderSize}, 
    {"setText", _wrap_SmartTextBox_setText}, 
    {"setName", _wrap_SmartTextBox_setName}, 
    {"setCaretColumn", _wrap_SmartTextBox_setCaretColumn}, 
    {"setCaretPosition", _wrap_SmartTextBox_setCaretPosition}, 
    {"setCaretRow", _wrap_SmartTextBox_setCaretRow}, 
    {"setCaretRowColumn", _wrap_SmartTextBox_setCaretRowColumn}, 
    {"setEditable", _wrap_SmartTextBox_setEditable}, 
    {"setTextRow", _wrap_SmartTextBox_setTextRow}, 
    {"setBackgroundColor", _wrap_SmartTextBox_setBackgroundColor}, 
    {"setActiveColor", _wrap_SmartTextBox_setActiveColor}, 
    {"setActiveBackgroundColor", _wrap_SmartTextBox_setActiveBackgroundColor}, 
    {"getWidth", _wrap_SmartTextBox_getWidth}, 
    {"getHeight", _wrap_SmartTextBox_getHeight}, 
    {"getBorderSize", _wrap_SmartTextBox_getBorderSize}, 
    {"getText", _wrap_SmartTextBox_getText}, 
    {"getName", _wrap_SmartTextBox_getName}, 
    {"getCaretColumn", _wrap_SmartTextBox_getCaretColumn}, 
    {"getCaretPosition", _wrap_SmartTextBox_getCaretPosition}, 
    {"getCaretRow", _wrap_SmartTextBox_getCaretRow}, 
    {"getNumberOfRows", _wrap_SmartTextBox_getNumberOfRows}, 
    {"getRow", _wrap_SmartTextBox_getRow}, 
    {"isEditable", _wrap_SmartTextBox_isEditable}, 
    {"getBackgroundColor", _wrap_SmartTextBox_getBackgroundColor}, 
    {"getActiveColor", _wrap_SmartTextBox_getActiveColor}, 
    {"getActiveBackgroundColor", _wrap_SmartTextBox_getActiveBackgroundColor}, 
    {"adjustSize", _wrap_SmartTextBox_adjustSize}, 
    {"draw", _wrap_SmartTextBox_draw}, 
    {"drawBorder", _wrap_SmartTextBox_drawBorder}, 
    {"setColor", _wrap_SmartTextBox_setColor}, 
    {"setBorderColor", _wrap_SmartTextBox_setBorderColor}, 
    {"getColor", _wrap_SmartTextBox_getColor}, 
    {"getBorderColor", _wrap_SmartTextBox_getBorderColor}, 
    {0,0}
};
static swig_lua_attribute swig_boost_shared_ptr_Sl_love_TextBox_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_boost_shared_ptr_Sl_love_TextBox_Sg__bases[] = {0};
swig_lua_class _wrap_class_boost_shared_ptr_Sl_love_TextBox_Sg_ = { "SmartTextBox", &SWIGTYPE_p_boost__shared_ptrTlove__TextBox_t,0, swig_delete_SmartTextBox, swig_boost_shared_ptr_Sl_love_TextBox_Sg__methods, swig_boost_shared_ptr_Sl_love_TextBox_Sg__attributes, swig_boost_shared_ptr_Sl_love_TextBox_Sg__bases };

#ifdef __cplusplus
}
#endif

static const struct luaL_reg swig_commands[] = {
    { "Updateable_update", _wrap_Updateable_update},
    { "delete_Updateable", _wrap_delete_Updateable},
    { "delete_Object", _wrap_delete_Object},
    { "Keyboard_isDown", _wrap_Keyboard_isDown},
    { "delete_Keyboard", _wrap_delete_Keyboard},
    { "Mouse_getButtons", _wrap_Mouse_getButtons},
    { "Mouse_getX", _wrap_Mouse_getX},
    { "Mouse_getY", _wrap_Mouse_getY},
    { "Mouse_setVisible", _wrap_Mouse_setVisible},
    { "Mouse_isVisible", _wrap_Mouse_isVisible},
    { "Mouse_isDown", _wrap_Mouse_isDown},
    { "delete_Mouse", _wrap_delete_Mouse},
    { "Sprite_getWidth", _wrap_Sprite_getWidth},
    { "Sprite_getHeight", _wrap_Sprite_getHeight},
    { "delete_Sprite", _wrap_delete_Sprite},
    { "delete_AbstractImage", _wrap_delete_AbstractImage},
    { "SmartAbstractImage___deref__", _wrap_SmartAbstractImage___deref__},
    { "delete_SmartAbstractImage", _wrap_delete_SmartAbstractImage},
    { "SmartAbstractImage_getWidth", _wrap_SmartAbstractImage_getWidth},
    { "SmartAbstractImage_getHeight", _wrap_SmartAbstractImage_getHeight},
    { "FrameAnimation_addFrame", _wrap_FrameAnimation_addFrame},
    { "FrameAnimation_addFrames", _wrap_FrameAnimation_addFrames},
    { "FrameAnimation_start", _wrap_FrameAnimation_start},
    { "FrameAnimation_stop", _wrap_FrameAnimation_stop},
    { "FrameAnimation_delay", _wrap_FrameAnimation_delay},
    { "FrameAnimation_update", _wrap_FrameAnimation_update},
    { "delete_FrameAnimation", _wrap_delete_FrameAnimation},
    { "SmartFrameAnimation___deref__", _wrap_SmartFrameAnimation___deref__},
    { "delete_SmartFrameAnimation", _wrap_delete_SmartFrameAnimation},
    { "SmartFrameAnimation_addFrame", _wrap_SmartFrameAnimation_addFrame},
    { "SmartFrameAnimation_addFrames", _wrap_SmartFrameAnimation_addFrames},
    { "SmartFrameAnimation_start", _wrap_SmartFrameAnimation_start},
    { "SmartFrameAnimation_stop", _wrap_SmartFrameAnimation_stop},
    { "SmartFrameAnimation_delay", _wrap_SmartFrameAnimation_delay},
    { "SmartFrameAnimation_update", _wrap_SmartFrameAnimation_update},
    { "SmartFrameAnimation_getWidth", _wrap_SmartFrameAnimation_getWidth},
    { "SmartFrameAnimation_getHeight", _wrap_SmartFrameAnimation_getHeight},
    { "AbstractFont_width_set", _wrap_AbstractFont_width_set},
    { "AbstractFont_width_get", _wrap_AbstractFont_width_get},
    { "delete_AbstractFont", _wrap_delete_AbstractFont},
    { "AbstractFont_print",_wrap_AbstractFont_print},
    { "AbstractFont_getLineHeight", _wrap_AbstractFont_getLineHeight},
    { "AbstractFont_getLineWidth", _wrap_AbstractFont_getLineWidth},
    { "AbstractFont_load", _wrap_AbstractFont_load},
    { "AbstractFont_unload", _wrap_AbstractFont_unload},
    { "delete_AbstractColor", _wrap_delete_AbstractColor},
    { "AbstractColor_getRed", _wrap_AbstractColor_getRed},
    { "AbstractColor_getGreen", _wrap_AbstractColor_getGreen},
    { "AbstractColor_getBlue", _wrap_AbstractColor_getBlue},
    { "AbstractColor_getAlpha", _wrap_AbstractColor_getAlpha},
    { "AbstractColor_getCode", _wrap_AbstractColor_getCode},
    { "AbstractColor_setRed", _wrap_AbstractColor_setRed},
    { "AbstractColor_setGreen", _wrap_AbstractColor_setGreen},
    { "AbstractColor_setBlue", _wrap_AbstractColor_setBlue},
    { "AbstractColor_setAlpha", _wrap_AbstractColor_setAlpha},
    { "AbstractColor_setColor",_wrap_AbstractColor_setColor},
    { "AbstractColor_getColor",_wrap_AbstractColor_getColor},
    { "AbstractColor_getGradient", _wrap_AbstractColor_getGradient},
    { "AbstractColor_addColor",_wrap_AbstractColor_addColor},
    { "AbstractColor_update", _wrap_AbstractColor_update},
    { "AbstractColor_setMode", _wrap_AbstractColor_setMode},
    { "AbstractColor_play", _wrap_AbstractColor_play},
    { "AbstractColor_stop", _wrap_AbstractColor_stop},
    { "AbstractColor_reset", _wrap_AbstractColor_reset},
    { "AbstractColor_testColor", _wrap_AbstractColor_testColor},
    { "new_Padded", _wrap_new_Padded},
    { "delete_Padded", _wrap_delete_Padded},
    { "Padded_setPadding",_wrap_Padded_setPadding},
    { "Padded_setPaddingTop", _wrap_Padded_setPaddingTop},
    { "Padded_setPaddingRight", _wrap_Padded_setPaddingRight},
    { "Padded_setPaddingBottom", _wrap_Padded_setPaddingBottom},
    { "Padded_setPaddingLeft", _wrap_Padded_setPaddingLeft},
    { "Padded_getPaddingTop", _wrap_Padded_getPaddingTop},
    { "Padded_getPaddingRight", _wrap_Padded_getPaddingRight},
    { "Padded_getPaddingBottom", _wrap_Padded_getPaddingBottom},
    { "Padded_getPaddingLeft", _wrap_Padded_getPaddingLeft},
    { "delete_GUIElement", _wrap_delete_GUIElement},
    { "GUIElement_setColor", _wrap_GUIElement_setColor},
    { "GUIElement_setBackgroundColor", _wrap_GUIElement_setBackgroundColor},
    { "GUIElement_setBorderColor", _wrap_GUIElement_setBorderColor},
    { "GUIElement_getColor", _wrap_GUIElement_getColor},
    { "GUIElement_getBackgroundColor", _wrap_GUIElement_getBackgroundColor},
    { "GUIElement_getBorderColor", _wrap_GUIElement_getBorderColor},
    { "GUIElement_setSize", _wrap_GUIElement_setSize},
    { "GUIElement_setWidth", _wrap_GUIElement_setWidth},
    { "GUIElement_setHeight", _wrap_GUIElement_setHeight},
    { "GUIElement_setBorderSize", _wrap_GUIElement_setBorderSize},
    { "GUIElement_getWidth", _wrap_GUIElement_getWidth},
    { "GUIElement_getHeight", _wrap_GUIElement_getHeight},
    { "GUIElement_getBorderSize", _wrap_GUIElement_getBorderSize},
    { "GUIElement_adjustSize", _wrap_GUIElement_adjustSize},
    { "new_Button", _wrap_new_Button},
    { "delete_Button", _wrap_delete_Button},
    { "Button_setSize", _wrap_Button_setSize},
    { "Button_setWidth", _wrap_Button_setWidth},
    { "Button_setHeight", _wrap_Button_setHeight},
    { "Button_setBorderSize", _wrap_Button_setBorderSize},
    { "Button_setCaption", _wrap_Button_setCaption},
    { "Button_setName", _wrap_Button_setName},
    { "Button_align", _wrap_Button_align},
    { "Button_valign", _wrap_Button_valign},
    { "Button_setBackgroundColor", _wrap_Button_setBackgroundColor},
    { "Button_setHoverColor", _wrap_Button_setHoverColor},
    { "Button_setPressedColor", _wrap_Button_setPressedColor},
    { "Button_setAllColors", _wrap_Button_setAllColors},
    { "Button_setHoverBackgroundColor", _wrap_Button_setHoverBackgroundColor},
    { "Button_setPressedBackgroundColor", _wrap_Button_setPressedBackgroundColor},
    { "Button_setAllBackgroundColors", _wrap_Button_setAllBackgroundColors},
    { "Button_setDefaultImage", _wrap_Button_setDefaultImage},
    { "Button_setHoverImage", _wrap_Button_setHoverImage},
    { "Button_setPressedImage", _wrap_Button_setPressedImage},
    { "Button_getWidth", _wrap_Button_getWidth},
    { "Button_getHeight", _wrap_Button_getHeight},
    { "Button_getBorderSize", _wrap_Button_getBorderSize},
    { "Button_getCaption", _wrap_Button_getCaption},
    { "Button_getName", _wrap_Button_getName},
    { "Button_getBackgroundColor", _wrap_Button_getBackgroundColor},
    { "Button_getHoverColor", _wrap_Button_getHoverColor},
    { "Button_getPressedColor", _wrap_Button_getPressedColor},
    { "Button_getHoverBackgroundColor", _wrap_Button_getHoverBackgroundColor},
    { "Button_getPressedBackgroundColor", _wrap_Button_getPressedBackgroundColor},
    { "Button_adjustSize", _wrap_Button_adjustSize},
    { "Button_isFocused", _wrap_Button_isFocused},
    { "Button_draw", _wrap_Button_draw},
    { "Button_drawBorder", _wrap_Button_drawBorder},
    { "new_DropDown", _wrap_new_DropDown},
    { "delete_DropDown", _wrap_delete_DropDown},
    { "DropDown_setSize", _wrap_DropDown_setSize},
    { "DropDown_setWidth", _wrap_DropDown_setWidth},
    { "DropDown_setHeight", _wrap_DropDown_setHeight},
    { "DropDown_setBorderSize", _wrap_DropDown_setBorderSize},
    { "DropDown_setName", _wrap_DropDown_setName},
    { "DropDown_setBackgroundColor", _wrap_DropDown_setBackgroundColor},
    { "DropDown_setActiveColor", _wrap_DropDown_setActiveColor},
    { "DropDown_setActiveBackgroundColor", _wrap_DropDown_setActiveBackgroundColor},
    { "DropDown_setSelectionColor", _wrap_DropDown_setSelectionColor},
    { "DropDown_setSelectionBackgroundColor", _wrap_DropDown_setSelectionBackgroundColor},
    { "DropDown_setButtonColor", _wrap_DropDown_setButtonColor},
    { "DropDown_setButtonBackgroundColor", _wrap_DropDown_setButtonBackgroundColor},
    { "DropDown_setButton", _wrap_DropDown_setButton},
    { "DropDown_setButtonPressed", _wrap_DropDown_setButtonPressed},
    { "DropDown_getWidth", _wrap_DropDown_getWidth},
    { "DropDown_getHeight", _wrap_DropDown_getHeight},
    { "DropDown_getBorderSize", _wrap_DropDown_getBorderSize},
    { "DropDown_getName", _wrap_DropDown_getName},
    { "DropDown_adjustSize", _wrap_DropDown_adjustSize},
    { "DropDown_getBackgroundColor", _wrap_DropDown_getBackgroundColor},
    { "DropDown_getActiveColor", _wrap_DropDown_getActiveColor},
    { "DropDown_getActiveBackgroundColor", _wrap_DropDown_getActiveBackgroundColor},
    { "DropDown_getSelectionColor", _wrap_DropDown_getSelectionColor},
    { "DropDown_getSelectionBackgroundColor", _wrap_DropDown_getSelectionBackgroundColor},
    { "DropDown_getButtonColor", _wrap_DropDown_getButtonColor},
    { "DropDown_getButtonBackgroundColor", _wrap_DropDown_getButtonBackgroundColor},
    { "DropDown_add", _wrap_DropDown_add},
    { "DropDown_remove", _wrap_DropDown_remove},
    { "DropDown_clear", _wrap_DropDown_clear},
    { "DropDown_getElementAt", _wrap_DropDown_getElementAt},
    { "DropDown_getSelected", _wrap_DropDown_getSelected},
    { "DropDown_getSelectedElement", _wrap_DropDown_getSelectedElement},
    { "DropDown_getNumberOfElements", _wrap_DropDown_getNumberOfElements},
    { "DropDown_draw", _wrap_DropDown_draw},
    { "DropDown_drawBorder", _wrap_DropDown_drawBorder},
    { "DropDown_drawButton", _wrap_DropDown_drawButton},
    { "new_Label",_wrap_new_Label},
    { "delete_Label", _wrap_delete_Label},
    { "Label_setSize", _wrap_Label_setSize},
    { "Label_setWidth", _wrap_Label_setWidth},
    { "Label_setHeight", _wrap_Label_setHeight},
    { "Label_setBorderSize", _wrap_Label_setBorderSize},
    { "Label_setCaption", _wrap_Label_setCaption},
    { "Label_setBackgroundColor", _wrap_Label_setBackgroundColor},
    { "Label_align", _wrap_Label_align},
    { "Label_valign", _wrap_Label_valign},
    { "Label_setBackground", _wrap_Label_setBackground},
    { "Label_getWidth", _wrap_Label_getWidth},
    { "Label_getHeight", _wrap_Label_getHeight},
    { "Label_getBorderSize", _wrap_Label_getBorderSize},
    { "Label_getCaption", _wrap_Label_getCaption},
    { "Label_getBackgroundColor", _wrap_Label_getBackgroundColor},
    { "Label_adjustSize", _wrap_Label_adjustSize},
    { "Label_draw", _wrap_Label_draw},
    { "Label_drawBorder", _wrap_Label_drawBorder},
    { "new_MultilineLabel",_wrap_new_MultilineLabel},
    { "delete_MultilineLabel", _wrap_delete_MultilineLabel},
    { "MultilineLabel_setCaption",_wrap_MultilineLabel_setCaption},
    { "MultilineLabel_adjustContent", _wrap_MultilineLabel_adjustContent},
    { "MultilineLabel_adjustSize", _wrap_MultilineLabel_adjustSize},
    { "MultilineLabel_draw", _wrap_MultilineLabel_draw},
    { "new_TextField",_wrap_new_TextField},
    { "delete_TextField", _wrap_delete_TextField},
    { "TextField_setSize", _wrap_TextField_setSize},
    { "TextField_setWidth", _wrap_TextField_setWidth},
    { "TextField_setHeight", _wrap_TextField_setHeight},
    { "TextField_setBorderSize", _wrap_TextField_setBorderSize},
    { "TextField_setText", _wrap_TextField_setText},
    { "TextField_setName", _wrap_TextField_setName},
    { "TextField_setCaretPosition", _wrap_TextField_setCaretPosition},
    { "TextField_setBackgroundColor", _wrap_TextField_setBackgroundColor},
    { "TextField_setActiveColor", _wrap_TextField_setActiveColor},
    { "TextField_setActiveBackgroundColor", _wrap_TextField_setActiveBackgroundColor},
    { "TextField_getWidth", _wrap_TextField_getWidth},
    { "TextField_getHeight", _wrap_TextField_getHeight},
    { "TextField_getBorderSize", _wrap_TextField_getBorderSize},
    { "TextField_getText", _wrap_TextField_getText},
    { "TextField_getName", _wrap_TextField_getName},
    { "TextField_getCaretPosition", _wrap_TextField_getCaretPosition},
    { "TextField_getBackgroundColor", _wrap_TextField_getBackgroundColor},
    { "TextField_getActiveColor", _wrap_TextField_getActiveColor},
    { "TextField_getActiveBackgroundColor", _wrap_TextField_getActiveBackgroundColor},
    { "TextField_adjustSize", _wrap_TextField_adjustSize},
    { "TextField_draw", _wrap_TextField_draw},
    { "TextField_drawBorder", _wrap_TextField_drawBorder},
    { "new_RadioButton",_wrap_new_RadioButton},
    { "delete_RadioButton", _wrap_delete_RadioButton},
    { "RadioButton_setSize", _wrap_RadioButton_setSize},
    { "RadioButton_setWidth", _wrap_RadioButton_setWidth},
    { "RadioButton_setHeight", _wrap_RadioButton_setHeight},
    { "RadioButton_setBorderSize", _wrap_RadioButton_setBorderSize},
    { "RadioButton_setCaption", _wrap_RadioButton_setCaption},
    { "RadioButton_setName", _wrap_RadioButton_setName},
    { "RadioButton_setMarked", _wrap_RadioButton_setMarked},
    { "RadioButton_align", _wrap_RadioButton_align},
    { "RadioButton_valign", _wrap_RadioButton_valign},
    { "RadioButton_setBackgroundColor", _wrap_RadioButton_setBackgroundColor},
    { "RadioButton_setDefaultImage", _wrap_RadioButton_setDefaultImage},
    { "RadioButton_setMarkedImage", _wrap_RadioButton_setMarkedImage},
    { "RadioButton_getWidth", _wrap_RadioButton_getWidth},
    { "RadioButton_getHeight", _wrap_RadioButton_getHeight},
    { "RadioButton_getBorderSize", _wrap_RadioButton_getBorderSize},
    { "RadioButton_getCaption", _wrap_RadioButton_getCaption},
    { "RadioButton_getName", _wrap_RadioButton_getName},
    { "RadioButton_isMarked", _wrap_RadioButton_isMarked},
    { "RadioButton_getBackgroundColor", _wrap_RadioButton_getBackgroundColor},
    { "RadioButton_getDefaultImage", _wrap_RadioButton_getDefaultImage},
    { "RadioButton_getMarkedImage", _wrap_RadioButton_getMarkedImage},
    { "RadioButton_adjustSize", _wrap_RadioButton_adjustSize},
    { "RadioButton_draw", _wrap_RadioButton_draw},
    { "RadioButton_drawBorder", _wrap_RadioButton_drawBorder},
    { "RadioButton_drawBox", _wrap_RadioButton_drawBox},
    { "new_CheckBox",_wrap_new_CheckBox},
    { "delete_CheckBox", _wrap_delete_CheckBox},
    { "CheckBox_setSize", _wrap_CheckBox_setSize},
    { "CheckBox_setWidth", _wrap_CheckBox_setWidth},
    { "CheckBox_setHeight", _wrap_CheckBox_setHeight},
    { "CheckBox_setBorderSize", _wrap_CheckBox_setBorderSize},
    { "CheckBox_setCaption", _wrap_CheckBox_setCaption},
    { "CheckBox_setName", _wrap_CheckBox_setName},
    { "CheckBox_setMarked", _wrap_CheckBox_setMarked},
    { "CheckBox_align", _wrap_CheckBox_align},
    { "CheckBox_valign", _wrap_CheckBox_valign},
    { "CheckBox_setBackgroundColor", _wrap_CheckBox_setBackgroundColor},
    { "CheckBox_setDefaultImage", _wrap_CheckBox_setDefaultImage},
    { "CheckBox_setMarkedImage", _wrap_CheckBox_setMarkedImage},
    { "CheckBox_getWidth", _wrap_CheckBox_getWidth},
    { "CheckBox_getHeight", _wrap_CheckBox_getHeight},
    { "CheckBox_getBorderSize", _wrap_CheckBox_getBorderSize},
    { "CheckBox_getCaption", _wrap_CheckBox_getCaption},
    { "CheckBox_getName", _wrap_CheckBox_getName},
    { "CheckBox_isMarked", _wrap_CheckBox_isMarked},
    { "CheckBox_getBackgroundColor", _wrap_CheckBox_getBackgroundColor},
    { "CheckBox_getDefaultImage", _wrap_CheckBox_getDefaultImage},
    { "CheckBox_getMarkedImage", _wrap_CheckBox_getMarkedImage},
    { "CheckBox_adjustSize", _wrap_CheckBox_adjustSize},
    { "CheckBox_draw", _wrap_CheckBox_draw},
    { "CheckBox_drawBorder", _wrap_CheckBox_drawBorder},
    { "CheckBox_drawBox", _wrap_CheckBox_drawBox},
    { "new_Slider",_wrap_new_Slider},
    { "delete_Slider", _wrap_delete_Slider},
    { "Slider_setSize", _wrap_Slider_setSize},
    { "Slider_setWidth", _wrap_Slider_setWidth},
    { "Slider_setHeight", _wrap_Slider_setHeight},
    { "Slider_setBorderSize", _wrap_Slider_setBorderSize},
    { "Slider_setScale", _wrap_Slider_setScale},
    { "Slider_setScaleStart", _wrap_Slider_setScaleStart},
    { "Slider_setScaleEnd", _wrap_Slider_setScaleEnd},
    { "Slider_setStepLength", _wrap_Slider_setStepLength},
    { "Slider_setMarkerLength", _wrap_Slider_setMarkerLength},
    { "Slider_setOrientation", _wrap_Slider_setOrientation},
    { "Slider_setValue", _wrap_Slider_setValue},
    { "Slider_setName", _wrap_Slider_setName},
    { "Slider_setBackgroundColor", _wrap_Slider_setBackgroundColor},
    { "Slider_setMarkerImage", _wrap_Slider_setMarkerImage},
    { "Slider_setBackgroundImage", _wrap_Slider_setBackgroundImage},
    { "Slider_getWidth", _wrap_Slider_getWidth},
    { "Slider_getHeight", _wrap_Slider_getHeight},
    { "Slider_getBorderSize", _wrap_Slider_getBorderSize},
    { "Slider_getScaleStart", _wrap_Slider_getScaleStart},
    { "Slider_getScaleEnd", _wrap_Slider_getScaleEnd},
    { "Slider_getStepLength", _wrap_Slider_getStepLength},
    { "Slider_getMarkerLength", _wrap_Slider_getMarkerLength},
    { "Slider_getOrientation", _wrap_Slider_getOrientation},
    { "Slider_getValue", _wrap_Slider_getValue},
    { "Slider_getName", _wrap_Slider_getName},
    { "Slider_getBackgroundColor", _wrap_Slider_getBackgroundColor},
    { "Slider_getMarkerImage", _wrap_Slider_getMarkerImage},
    { "Slider_getBackgroundImage", _wrap_Slider_getBackgroundImage},
    { "Slider_adjustSize", _wrap_Slider_adjustSize},
    { "Slider_draw", _wrap_Slider_draw},
    { "Slider_drawBorder", _wrap_Slider_drawBorder},
    { "Slider_drawMarker", _wrap_Slider_drawMarker},
    { "new_ListBox", _wrap_new_ListBox},
    { "delete_ListBox", _wrap_delete_ListBox},
    { "ListBox_setSize", _wrap_ListBox_setSize},
    { "ListBox_setWidth", _wrap_ListBox_setWidth},
    { "ListBox_setHeight", _wrap_ListBox_setHeight},
    { "ListBox_setBorderSize", _wrap_ListBox_setBorderSize},
    { "ListBox_setName", _wrap_ListBox_setName},
    { "ListBox_setBackgroundColor", _wrap_ListBox_setBackgroundColor},
    { "ListBox_setSelectionColor", _wrap_ListBox_setSelectionColor},
    { "ListBox_setSelectionBackgroundColor", _wrap_ListBox_setSelectionBackgroundColor},
    { "ListBox_getWidth", _wrap_ListBox_getWidth},
    { "ListBox_getHeight", _wrap_ListBox_getHeight},
    { "ListBox_getBorderSize", _wrap_ListBox_getBorderSize},
    { "ListBox_getName", _wrap_ListBox_getName},
    { "ListBox_getBackgroundColor", _wrap_ListBox_getBackgroundColor},
    { "ListBox_getSeclectionColor", _wrap_ListBox_getSeclectionColor},
    { "ListBox_getSeclectionBackgroundColor", _wrap_ListBox_getSeclectionBackgroundColor},
    { "ListBox_adjustSize", _wrap_ListBox_adjustSize},
    { "ListBox_add", _wrap_ListBox_add},
    { "ListBox_remove", _wrap_ListBox_remove},
    { "ListBox_clear", _wrap_ListBox_clear},
    { "ListBox_getElementAt", _wrap_ListBox_getElementAt},
    { "ListBox_getSelected", _wrap_ListBox_getSelected},
    { "ListBox_getSelectedElement", _wrap_ListBox_getSelectedElement},
    { "ListBox_getNumberOfElements", _wrap_ListBox_getNumberOfElements},
    { "ListBox_draw", _wrap_ListBox_draw},
    { "ListBox_drawBorder", _wrap_ListBox_drawBorder},
    { "new_TextBox",_wrap_new_TextBox},
    { "delete_TextBox", _wrap_delete_TextBox},
    { "TextBox_setSize", _wrap_TextBox_setSize},
    { "TextBox_setWidth", _wrap_TextBox_setWidth},
    { "TextBox_setHeight", _wrap_TextBox_setHeight},
    { "TextBox_setBorderSize", _wrap_TextBox_setBorderSize},
    { "TextBox_setText", _wrap_TextBox_setText},
    { "TextBox_setName", _wrap_TextBox_setName},
    { "TextBox_setCaretColumn", _wrap_TextBox_setCaretColumn},
    { "TextBox_setCaretPosition", _wrap_TextBox_setCaretPosition},
    { "TextBox_setCaretRow", _wrap_TextBox_setCaretRow},
    { "TextBox_setCaretRowColumn", _wrap_TextBox_setCaretRowColumn},
    { "TextBox_setEditable", _wrap_TextBox_setEditable},
    { "TextBox_setTextRow", _wrap_TextBox_setTextRow},
    { "TextBox_setBackgroundColor", _wrap_TextBox_setBackgroundColor},
    { "TextBox_setActiveColor", _wrap_TextBox_setActiveColor},
    { "TextBox_setActiveBackgroundColor", _wrap_TextBox_setActiveBackgroundColor},
    { "TextBox_getWidth", _wrap_TextBox_getWidth},
    { "TextBox_getHeight", _wrap_TextBox_getHeight},
    { "TextBox_getBorderSize", _wrap_TextBox_getBorderSize},
    { "TextBox_getText", _wrap_TextBox_getText},
    { "TextBox_getName", _wrap_TextBox_getName},
    { "TextBox_getCaretColumn", _wrap_TextBox_getCaretColumn},
    { "TextBox_getCaretPosition", _wrap_TextBox_getCaretPosition},
    { "TextBox_getCaretRow", _wrap_TextBox_getCaretRow},
    { "TextBox_getNumberOfRows", _wrap_TextBox_getNumberOfRows},
    { "TextBox_getRow", _wrap_TextBox_getRow},
    { "TextBox_isEditable", _wrap_TextBox_isEditable},
    { "TextBox_getBackgroundColor", _wrap_TextBox_getBackgroundColor},
    { "TextBox_getActiveColor", _wrap_TextBox_getActiveColor},
    { "TextBox_getActiveBackgroundColor", _wrap_TextBox_getActiveBackgroundColor},
    { "TextBox_adjustSize", _wrap_TextBox_adjustSize},
    { "TextBox_draw", _wrap_TextBox_draw},
    { "TextBox_drawBorder", _wrap_TextBox_drawBorder},
    { "delete_AbstractMenu", _wrap_delete_AbstractMenu},
    { "AbstractMenu_show", _wrap_AbstractMenu_show},
    { "AbstractMenu_hide", _wrap_AbstractMenu_hide},
    { "AbstractMenu_setFont", _wrap_AbstractMenu_setFont},
    { "AbstractMenu_setColor", _wrap_AbstractMenu_setColor},
    { "AbstractMenu_setBackgroundColor", _wrap_AbstractMenu_setBackgroundColor},
    { "AbstractMenu_setBackground", _wrap_AbstractMenu_setBackground},
    { "AbstractMenu_setSpacing", _wrap_AbstractMenu_setSpacing},
    { "AbstractMenu_stretchContent", _wrap_AbstractMenu_stretchContent},
    { "AbstractMenu_align", _wrap_AbstractMenu_align},
    { "AbstractMenu_valign", _wrap_AbstractMenu_valign},
    { "AbstractMenu_getFont", _wrap_AbstractMenu_getFont},
    { "AbstractMenu_getBackgroundColor", _wrap_AbstractMenu_getBackgroundColor},
    { "AbstractMenu_getSpacing", _wrap_AbstractMenu_getSpacing},
    { "AbstractMenu_getMenuType", _wrap_AbstractMenu_getMenuType},
    { "AbstractMenu_setSize", _wrap_AbstractMenu_setSize},
    { "AbstractMenu_setWidth", _wrap_AbstractMenu_setWidth},
    { "AbstractMenu_setHeight", _wrap_AbstractMenu_setHeight},
    { "AbstractMenu_setBorderSize", _wrap_AbstractMenu_setBorderSize},
    { "AbstractMenu_setPosition", _wrap_AbstractMenu_setPosition},
    { "AbstractMenu_setX", _wrap_AbstractMenu_setX},
    { "AbstractMenu_setY", _wrap_AbstractMenu_setY},
    { "AbstractMenu_getWidth", _wrap_AbstractMenu_getWidth},
    { "AbstractMenu_getHeight", _wrap_AbstractMenu_getHeight},
    { "AbstractMenu_getX", _wrap_AbstractMenu_getX},
    { "AbstractMenu_getY", _wrap_AbstractMenu_getY},
    { "AbstractMenu_getBorderSize", _wrap_AbstractMenu_getBorderSize},
    { "AbstractMenu_adjustSize", _wrap_AbstractMenu_adjustSize},
    { "AbstractMenu_adjustWidth", _wrap_AbstractMenu_adjustWidth},
    { "AbstractMenu_adjustHeight", _wrap_AbstractMenu_adjustHeight},
    { "AbstractMenu_adjustContent", _wrap_AbstractMenu_adjustContent},
    { "AbstractMenu_draw", _wrap_AbstractMenu_draw},
    { "AbstractMenu_drawBorder", _wrap_AbstractMenu_drawBorder},
    { "AbstractMenu_drawChildren", _wrap_AbstractMenu_drawChildren},
    { "AbstractMenu_add", _wrap_AbstractMenu_add},
    { "AbstractMenu_setCaption", _wrap_AbstractMenu_setCaption},
    { "AbstractMenu_setTitleBarHeight", _wrap_AbstractMenu_setTitleBarHeight},
    { "AbstractMenu_getCaption", _wrap_AbstractMenu_getCaption},
    { "AbstractMenu_getTitleBarHeight", _wrap_AbstractMenu_getTitleBarHeight},
    { "AbstractMenu_addMenu",_wrap_AbstractMenu_addMenu},
    { "AbstractMenu_addScrollMenu",_wrap_AbstractMenu_addScrollMenu},
    { "AbstractMenu_addWindowMenu",_wrap_AbstractMenu_addWindowMenu},
    { "AbstractMenu_addLabel",_wrap_AbstractMenu_addLabel},
    { "AbstractMenu_addMultilineLabel",_wrap_AbstractMenu_addMultilineLabel},
    { "AbstractMenu_addImage", _wrap_AbstractMenu_addImage},
    { "AbstractMenu_addButton",_wrap_AbstractMenu_addButton},
    { "AbstractMenu_addTextField",_wrap_AbstractMenu_addTextField},
    { "AbstractMenu_addDropDown",_wrap_AbstractMenu_addDropDown},
    { "AbstractMenu_addRadioButton",_wrap_AbstractMenu_addRadioButton},
    { "AbstractMenu_addCheckBox",_wrap_AbstractMenu_addCheckBox},
    { "AbstractMenu_addSlider",_wrap_AbstractMenu_addSlider},
    { "AbstractMenu_addListBox",_wrap_AbstractMenu_addListBox},
    { "AbstractMenu_addTextBox",_wrap_AbstractMenu_addTextBox},
    { "new_Menu",_wrap_new_Menu},
    { "delete_Menu", _wrap_delete_Menu},
    { "Menu_setSize", _wrap_Menu_setSize},
    { "Menu_setWidth", _wrap_Menu_setWidth},
    { "Menu_setHeight", _wrap_Menu_setHeight},
    { "Menu_setBorderSize", _wrap_Menu_setBorderSize},
    { "Menu_setPosition", _wrap_Menu_setPosition},
    { "Menu_setX", _wrap_Menu_setX},
    { "Menu_setY", _wrap_Menu_setY},
    { "Menu_setFont", _wrap_Menu_setFont},
    { "Menu_setBackgroundColor", _wrap_Menu_setBackgroundColor},
    { "Menu_getWidth", _wrap_Menu_getWidth},
    { "Menu_getHeight", _wrap_Menu_getHeight},
    { "Menu_getX", _wrap_Menu_getX},
    { "Menu_getY", _wrap_Menu_getY},
    { "Menu_getBorderSize", _wrap_Menu_getBorderSize},
    { "Menu_getFont", _wrap_Menu_getFont},
    { "Menu_getBackgroundColor", _wrap_Menu_getBackgroundColor},
    { "Menu_adjustSize", _wrap_Menu_adjustSize},
    { "Menu_adjustWidth", _wrap_Menu_adjustWidth},
    { "Menu_adjustHeight", _wrap_Menu_adjustHeight},
    { "Menu_adjustContent", _wrap_Menu_adjustContent},
    { "Menu_draw", _wrap_Menu_draw},
    { "Menu_drawBorder", _wrap_Menu_drawBorder},
    { "Menu_drawChildren", _wrap_Menu_drawChildren},
    { "Menu_add", _wrap_Menu_add},
    { "Menu_setCaption", _wrap_Menu_setCaption},
    { "Menu_setTitleBarHeight", _wrap_Menu_setTitleBarHeight},
    { "Menu_getCaption", _wrap_Menu_getCaption},
    { "Menu_getTitleBarHeight", _wrap_Menu_getTitleBarHeight},
    { "new_GUIContainer", _wrap_new_GUIContainer},
    { "delete_GUIContainer", _wrap_delete_GUIContainer},
    { "GUIContainer_add", _wrap_GUIContainer_add},
    { "GUIContainer_remove", _wrap_GUIContainer_remove},
    { "new_AbstractGUI", _wrap_new_AbstractGUI},
    { "delete_AbstractGUI", _wrap_delete_AbstractGUI},
    { "AbstractGUI_action", _wrap_AbstractGUI_action},
    { "AbstractGUI_add",_wrap_AbstractGUI_add},
    { "AbstractGUI_remove",_wrap_AbstractGUI_remove},
    { "AbstractGUI_clear", _wrap_AbstractGUI_clear},
    { "AbstractGUI_getFont", _wrap_AbstractGUI_getFont},
    { "AbstractGUI_getColor", _wrap_AbstractGUI_getColor},
    { "AbstractGUI_init", _wrap_AbstractGUI_init},
    { "AbstractGUI_render", _wrap_AbstractGUI_render},
    { "AbstractGUI_update", _wrap_AbstractGUI_update},
    { "interval_min_set", _wrap_interval_min_set},
    { "interval_min_get", _wrap_interval_min_get},
    { "interval_max_set", _wrap_interval_max_set},
    { "interval_max_get", _wrap_interval_max_get},
    { "interval_delta_set", _wrap_interval_delta_set},
    { "interval_delta_get", _wrap_interval_delta_get},
    { "interval_var_set", _wrap_interval_var_set},
    { "interval_var_get", _wrap_interval_var_get},
    { "delete_interval", _wrap_delete_interval},
    { "particle_pos_set", _wrap_particle_pos_set},
    { "particle_pos_get", _wrap_particle_pos_get},
    { "particle_speed_set", _wrap_particle_speed_set},
    { "particle_speed_get", _wrap_particle_speed_get},
    { "particle_direction_set", _wrap_particle_direction_set},
    { "particle_direction_get", _wrap_particle_direction_get},
    { "particle_life_set", _wrap_particle_life_set},
    { "particle_life_get", _wrap_particle_life_get},
    { "particle_age_set", _wrap_particle_age_set},
    { "particle_age_get", _wrap_particle_age_get},
    { "particle_gravity_set", _wrap_particle_gravity_set},
    { "particle_gravity_get", _wrap_particle_gravity_get},
    { "particle_radialAcc_set", _wrap_particle_radialAcc_set},
    { "particle_radialAcc_get", _wrap_particle_radialAcc_get},
    { "particle_tangentialAcc_set", _wrap_particle_tangentialAcc_set},
    { "particle_tangentialAcc_get", _wrap_particle_tangentialAcc_get},
    { "particle_spin_set", _wrap_particle_spin_set},
    { "particle_spin_get", _wrap_particle_spin_get},
    { "particle_angle_set", _wrap_particle_angle_set},
    { "particle_angle_get", _wrap_particle_angle_get},
    { "particle_size_set", _wrap_particle_size_set},
    { "particle_size_get", _wrap_particle_size_get},
    { "delete_particle", _wrap_delete_particle},
    { "new_ParticleSystem", _wrap_new_ParticleSystem},
    { "delete_ParticleSystem", _wrap_delete_ParticleSystem},
    { "ParticleSystem_load", _wrap_ParticleSystem_load},
    { "ParticleSystem_unload", _wrap_ParticleSystem_unload},
    { "ParticleSystem_spawn",_wrap_ParticleSystem_spawn},
    { "ParticleSystem_setAutostart", _wrap_ParticleSystem_setAutostart},
    { "ParticleSystem_getNumParticles", _wrap_ParticleSystem_getNumParticles},
    { "ParticleSystem_getParticles", _wrap_ParticleSystem_getParticles},
    { "ParticleSystem_getSprite", _wrap_ParticleSystem_getSprite},
    { "ParticleSystem_getColor", _wrap_ParticleSystem_getColor},
    { "ParticleSystem_isAdditive", _wrap_ParticleSystem_isAdditive},
    { "ParticleSystem_reset", _wrap_ParticleSystem_reset},
    { "ParticleSystem_setPosition", _wrap_ParticleSystem_setPosition},
    { "ParticleSystem_getLifetime", _wrap_ParticleSystem_getLifetime},
    { "ParticleSystem_setLifetime", _wrap_ParticleSystem_setLifetime},
    { "ParticleSystem_getAge", _wrap_ParticleSystem_getAge},
    { "ParticleSystem_setLinger", _wrap_ParticleSystem_setLinger},
    { "ParticleSystem_getLinger", _wrap_ParticleSystem_getLinger},
    { "ParticleSystem_isDead", _wrap_ParticleSystem_isDead},
    { "ParticleSystem_isActive", _wrap_ParticleSystem_isActive},
    { "ParticleSystem_setParticlesPerSecond", _wrap_ParticleSystem_setParticlesPerSecond},
    { "ParticleSystem_addColor",_wrap_ParticleSystem_addColor},
    { "ParticleSystem_setSprite",_wrap_ParticleSystem_setSprite},
    { "ParticleSystem_setAdditiveBlending", _wrap_ParticleSystem_setAdditiveBlending},
    { "ParticleSystem_setDirection",_wrap_ParticleSystem_setDirection},
    { "ParticleSystem_setStartSpeed",_wrap_ParticleSystem_setStartSpeed},
    { "ParticleSystem_setGravity",_wrap_ParticleSystem_setGravity},
    { "ParticleSystem_setRadialAcc",_wrap_ParticleSystem_setRadialAcc},
    { "ParticleSystem_setTangentialAcc",_wrap_ParticleSystem_setTangentialAcc},
    { "ParticleSystem_setParticleLifetime",_wrap_ParticleSystem_setParticleLifetime},
    { "ParticleSystem_setParticleSize",_wrap_ParticleSystem_setParticleSize},
    { "ParticleSystem_setParticleSpin",_wrap_ParticleSystem_setParticleSpin},
    { "ParticleSystem_update", _wrap_ParticleSystem_update},
    { "ParticleSystem_render",_wrap_ParticleSystem_render},
    { "delete_Timer", _wrap_delete_Timer},
    { "Timer_init", _wrap_Timer_init},
    { "Timer_getDelta", _wrap_Timer_getDelta},
    { "Timer_getFrames", _wrap_Timer_getFrames},
    { "Timer_setFrames", _wrap_Timer_setFrames},
    { "Timer_getFpsUpdateFrequency", _wrap_Timer_getFpsUpdateFrequency},
    { "Timer_setFpsUpdateFrequency", _wrap_Timer_setFpsUpdateFrequency},
    { "Timer_getFps", _wrap_Timer_getFps},
    { "Timer_setFps", _wrap_Timer_setFps},
    { "Timer_getLockedFps", _wrap_Timer_getLockedFps},
    { "Timer_setLockedFps", _wrap_Timer_setLockedFps},
    { "Timer_getMaxFps", _wrap_Timer_getMaxFps},
    { "Timer_setMaxFps", _wrap_Timer_setMaxFps},
    { "Timer_getMinFps", _wrap_Timer_getMinFps},
    { "Timer_setMinFps", _wrap_Timer_setMinFps},
    { "Timer_addValue", _wrap_Timer_addValue},
    { "Timer_getAverage", _wrap_Timer_getAverage},
    { "new_DisplayMode",_wrap_new_DisplayMode},
    { "delete_DisplayMode", _wrap_delete_DisplayMode},
    { "DisplayMode_resize", _wrap_DisplayMode_resize},
    { "DisplayMode_getWidth", _wrap_DisplayMode_getWidth},
    { "DisplayMode_getHeight", _wrap_DisplayMode_getHeight},
    { "DisplayMode_getColorDepth", _wrap_DisplayMode_getColorDepth},
    { "DisplayMode_isFullscreen", _wrap_DisplayMode_isFullscreen},
    { "DisplayMode_isVsync", _wrap_DisplayMode_isVsync},
    { "DisplayMode_getFSAA", _wrap_DisplayMode_getFSAA},
    { "DisplayMode_equals", _wrap_DisplayMode_equals},
    { "new_LuaGL", _wrap_new_LuaGL},
    { "delete_LuaGL", _wrap_delete_LuaGL},
    { "LuaGL_translate", _wrap_LuaGL_translate},
    { "LuaGL_rotate",_wrap_LuaGL_rotate},
    { "LuaGL_scale", _wrap_LuaGL_scale},
    { "LuaGL_loadIdentity", _wrap_LuaGL_loadIdentity},
    { "LuaGL_pushMatrix", _wrap_LuaGL_pushMatrix},
    { "LuaGL_popMatrix", _wrap_LuaGL_popMatrix},
    { "LuaGL_begin", _wrap_LuaGL_begin},
    { "LuaGL_finish", _wrap_LuaGL_finish},
    { "LuaGL_vertex", _wrap_LuaGL_vertex},
    { "LuaGL_texCoord", _wrap_LuaGL_texCoord},
    { "LuaGL_color",_wrap_LuaGL_color},
    { "LuaGL_enable", _wrap_LuaGL_enable},
    { "LuaGL_disable", _wrap_LuaGL_disable},
    { "LuaGL_hint", _wrap_LuaGL_hint},
    { "LuaGL_shadeModel", _wrap_LuaGL_shadeModel},
    { "LuaGL_blendFunc", _wrap_LuaGL_blendFunc},
    { "LuaGL_blendFuncNormal", _wrap_LuaGL_blendFuncNormal},
    { "LuaGL_blendFuncAdditive", _wrap_LuaGL_blendFuncAdditive},
    { "LuaGL_alphaFunc", _wrap_LuaGL_alphaFunc},
    { "LuaGL_clear", _wrap_LuaGL_clear},
    { "new_LuaGame", _wrap_new_LuaGame},
    { "delete_LuaGame", _wrap_delete_LuaGame},
    { "LuaGame_init", _wrap_LuaGame_init},
    { "LuaGame_load", _wrap_LuaGame_load},
    { "LuaGame_unload", _wrap_LuaGame_unload},
    { "LuaGame_render", _wrap_LuaGame_render},
    { "LuaGame_update", _wrap_LuaGame_update},
    { "LuaGame_suspend", _wrap_LuaGame_suspend},
    { "LuaGame_resume", _wrap_LuaGame_resume},
    { "LuaGame_reloadGraphics", _wrap_LuaGame_reloadGraphics},
    { "LuaGame_keyPressed", _wrap_LuaGame_keyPressed},
    { "LuaGame_keyReleased", _wrap_LuaGame_keyReleased},
    { "LuaGame_mousePressed", _wrap_LuaGame_mousePressed},
    { "LuaGame_mouseReleased", _wrap_LuaGame_mouseReleased},
    { "LuaGame_eventFired", _wrap_LuaGame_eventFired},
    { "LuaGame_include", _wrap_LuaGame_include},
    { "delete_AbstractDisplay", _wrap_delete_AbstractDisplay},
    { "AbstractDisplay_getCurrentDisplayMode", _wrap_AbstractDisplay_getCurrentDisplayMode},
    { "AbstractDisplay_isSupported", _wrap_AbstractDisplay_isSupported},
    { "AbstractDisplay_tryChange", _wrap_AbstractDisplay_tryChange},
    { "AbstractDisplay_tryResize", _wrap_AbstractDisplay_tryResize},
    { "AbstractDisplay_toggleVSync", _wrap_AbstractDisplay_toggleVSync},
    { "AbstractDisplay_toggleFullscreen", _wrap_AbstractDisplay_toggleFullscreen},
    { "AbstractDisplay_getGraphics", _wrap_AbstractDisplay_getGraphics},
    { "AbstractDisplay_getWidth", _wrap_AbstractDisplay_getWidth},
    { "AbstractDisplay_getHeight", _wrap_AbstractDisplay_getHeight},
    { "delete_AbstractGraphics", _wrap_delete_AbstractGraphics},
    { "AbstractGraphics_getColor", _wrap_AbstractGraphics_getColor},
    { "AbstractGraphics_getBackgroundColor", _wrap_AbstractGraphics_getBackgroundColor},
    { "AbstractGraphics_getFont", _wrap_AbstractGraphics_getFont},
    { "AbstractGraphics_translate", _wrap_AbstractGraphics_translate},
    { "AbstractGraphics_rotate", _wrap_AbstractGraphics_rotate},
    { "AbstractGraphics_scale",_wrap_AbstractGraphics_scale},
    { "AbstractGraphics_drawLine",_wrap_AbstractGraphics_drawLine},
    { "AbstractGraphics_drawTriangle",_wrap_AbstractGraphics_drawTriangle},
    { "AbstractGraphics_fillTriangle",_wrap_AbstractGraphics_fillTriangle},
    { "AbstractGraphics_drawRectangle",_wrap_AbstractGraphics_drawRectangle},
    { "AbstractGraphics_fillRectangle",_wrap_AbstractGraphics_fillRectangle},
    { "AbstractGraphics_drawCircle",_wrap_AbstractGraphics_drawCircle},
    { "AbstractGraphics_fillCircle",_wrap_AbstractGraphics_fillCircle},
    { "AbstractGraphics_identity", _wrap_AbstractGraphics_identity},
    { "AbstractGraphics_push", _wrap_AbstractGraphics_push},
    { "AbstractGraphics_pop", _wrap_AbstractGraphics_pop},
    { "AbstractGraphics_clear", _wrap_AbstractGraphics_clear},
    { "AbstractGraphics_setColor",_wrap_AbstractGraphics_setColor},
    { "AbstractGraphics_setBackgroundColor",_wrap_AbstractGraphics_setBackgroundColor},
    { "AbstractGraphics_setFont", _wrap_AbstractGraphics_setFont},
    { "AbstractGraphics_draw",_wrap_AbstractGraphics_draw},
    { "AbstractSound_setVolume", _wrap_AbstractSound_setVolume},
    { "delete_AbstractSound", _wrap_delete_AbstractSound},
    { "SmartSound___deref__", _wrap_SmartSound___deref__},
    { "delete_SmartSound", _wrap_delete_SmartSound},
    { "SmartSound_setVolume", _wrap_SmartSound_setVolume},
    { "delete_AbstractMusic", _wrap_delete_AbstractMusic},
    { "SmartMusic___deref__", _wrap_SmartMusic___deref__},
    { "delete_SmartMusic", _wrap_delete_SmartMusic},
    { "delete_AbstractSoundDevice", _wrap_delete_AbstractSoundDevice},
    { "AbstractSoundDevice_isPlaying", _wrap_AbstractSoundDevice_isPlaying},
    { "AbstractSoundDevice_isPaused", _wrap_AbstractSoundDevice_isPaused},
    { "AbstractSoundDevice_pause", _wrap_AbstractSoundDevice_pause},
    { "AbstractSoundDevice_stop", _wrap_AbstractSoundDevice_stop},
    { "AbstractSoundDevice_resume", _wrap_AbstractSoundDevice_resume},
    { "AbstractSoundDevice_setVolume", _wrap_AbstractSoundDevice_setVolume},
    { "AbstractSoundDevice_fist", _wrap_AbstractSoundDevice_fist},
    { "AbstractSoundDevice_play",_wrap_AbstractSoundDevice_play},
    { "new_ObjectFactory", _wrap_new_ObjectFactory},
    { "delete_ObjectFactory", _wrap_delete_ObjectFactory},
    { "ObjectFactory_newImage", _wrap_ObjectFactory_newImage},
    { "ObjectFactory_newAnimation",_wrap_ObjectFactory_newAnimation},
    { "ObjectFactory_newMusic", _wrap_ObjectFactory_newMusic},
    { "ObjectFactory_newSound", _wrap_ObjectFactory_newSound},
    { "ObjectFactory_newColor",_wrap_ObjectFactory_newColor},
    { "ObjectFactory_newAnimatedColor",_wrap_ObjectFactory_newAnimatedColor},
    { "ObjectFactory_newFont", _wrap_ObjectFactory_newFont},
    { "ObjectFactory_newDefaultFont", _wrap_ObjectFactory_newDefaultFont},
    { "ObjectFactory_newImageFont", _wrap_ObjectFactory_newImageFont},
    { "ObjectFactory_newParticleSystem", _wrap_ObjectFactory_newParticleSystem},
    { "ObjectFactory_newBezier",_wrap_ObjectFactory_newBezier},
    { "ObjectFactory_newMenu",_wrap_ObjectFactory_newMenu},
    { "ObjectFactory_newScrollMenu",_wrap_ObjectFactory_newScrollMenu},
    { "ObjectFactory_newWindowMenu",_wrap_ObjectFactory_newWindowMenu},
    { "new_Event", _wrap_new_Event},
    { "delete_Event", _wrap_delete_Event},
    { "Event_getType", _wrap_Event_getType},
    { "Event_setType", _wrap_Event_setType},
    { "new_GUIEvent",_wrap_new_GUIEvent},
    { "delete_GUIEvent", _wrap_delete_GUIEvent},
    { "GUIEvent_getSource", _wrap_GUIEvent_getSource},
    { "GUIEvent_getName", _wrap_GUIEvent_getName},
    { "GUIEvent_setSource", _wrap_GUIEvent_setSource},
    { "GUIEvent_setName", _wrap_GUIEvent_setName},
    { "new_MessageEvent",_wrap_new_MessageEvent},
    { "delete_MessageEvent", _wrap_delete_MessageEvent},
    { "MessageEvent_getMessage", _wrap_MessageEvent_getMessage},
    { "keyboard_set", _wrap_keyboard_set},
    { "keyboard_get", _wrap_keyboard_get},
    { "mouse_set", _wrap_mouse_set},
    { "mouse_get", _wrap_mouse_get},
    { "display_set", _wrap_display_set},
    { "display_get", _wrap_display_get},
    { "graphics_set", _wrap_graphics_set},
    { "graphics_get", _wrap_graphics_get},
    { "audio_set", _wrap_audio_set},
    { "audio_get", _wrap_audio_get},
    { "timer_set", _wrap_timer_set},
    { "timer_get", _wrap_timer_get},
    { "objects_set", _wrap_objects_set},
    { "objects_get", _wrap_objects_get},
    { "game_set", _wrap_game_set},
    { "game_get", _wrap_game_get},
    { "gui_set", _wrap_gui_set},
    { "gui_get", _wrap_gui_get},
    { "SmartDisplay___deref__", _wrap_SmartDisplay___deref__},
    { "delete_SmartDisplay", _wrap_delete_SmartDisplay},
    { "SmartDisplay_getCurrentDisplayMode", _wrap_SmartDisplay_getCurrentDisplayMode},
    { "SmartDisplay_isSupported", _wrap_SmartDisplay_isSupported},
    { "SmartDisplay_tryChange", _wrap_SmartDisplay_tryChange},
    { "SmartDisplay_tryResize", _wrap_SmartDisplay_tryResize},
    { "SmartDisplay_toggleVSync", _wrap_SmartDisplay_toggleVSync},
    { "SmartDisplay_toggleFullscreen", _wrap_SmartDisplay_toggleFullscreen},
    { "SmartDisplay_getGraphics", _wrap_SmartDisplay_getGraphics},
    { "SmartDisplay_getWidth", _wrap_SmartDisplay_getWidth},
    { "SmartDisplay_getHeight", _wrap_SmartDisplay_getHeight},
    { "SmartAbstractColor___deref__", _wrap_SmartAbstractColor___deref__},
    { "delete_SmartAbstractColor", _wrap_delete_SmartAbstractColor},
    { "SmartAbstractColor_LOVE_COLOR_BLACK_get", _wrap_SmartAbstractColor_LOVE_COLOR_BLACK_get},
    { "SmartAbstractColor_LOVE_COLOR_WHITE_get", _wrap_SmartAbstractColor_LOVE_COLOR_WHITE_get},
    { "SmartAbstractColor_LOVE_COLOR_RED_get", _wrap_SmartAbstractColor_LOVE_COLOR_RED_get},
    { "SmartAbstractColor_LOVE_COLOR_GREEN_get", _wrap_SmartAbstractColor_LOVE_COLOR_GREEN_get},
    { "SmartAbstractColor_LOVE_COLOR_BLUE_get", _wrap_SmartAbstractColor_LOVE_COLOR_BLUE_get},
    { "SmartAbstractColor_LOVE_COLOR_YELLOW_get", _wrap_SmartAbstractColor_LOVE_COLOR_YELLOW_get},
    { "SmartAbstractColor_LOVE_COLOR_CYAN_get", _wrap_SmartAbstractColor_LOVE_COLOR_CYAN_get},
    { "SmartAbstractColor_LOVE_COLOR_MAGENTA_get", _wrap_SmartAbstractColor_LOVE_COLOR_MAGENTA_get},
    { "SmartAbstractColor_getRed", _wrap_SmartAbstractColor_getRed},
    { "SmartAbstractColor_getGreen", _wrap_SmartAbstractColor_getGreen},
    { "SmartAbstractColor_getBlue", _wrap_SmartAbstractColor_getBlue},
    { "SmartAbstractColor_getAlpha", _wrap_SmartAbstractColor_getAlpha},
    { "SmartAbstractColor_getCode", _wrap_SmartAbstractColor_getCode},
    { "SmartAbstractColor_setRed", _wrap_SmartAbstractColor_setRed},
    { "SmartAbstractColor_setGreen", _wrap_SmartAbstractColor_setGreen},
    { "SmartAbstractColor_setBlue", _wrap_SmartAbstractColor_setBlue},
    { "SmartAbstractColor_setAlpha", _wrap_SmartAbstractColor_setAlpha},
    { "SmartAbstractColor_setColor",_wrap_SmartAbstractColor_setColor},
    { "SmartAbstractColor_getColor",_wrap_SmartAbstractColor_getColor},
    { "SmartAbstractColor_getGradient", _wrap_SmartAbstractColor_getGradient},
    { "SmartAbstractColor_addColor",_wrap_SmartAbstractColor_addColor},
    { "SmartAbstractColor_update", _wrap_SmartAbstractColor_update},
    { "SmartAbstractColor_setMode", _wrap_SmartAbstractColor_setMode},
    { "SmartAbstractColor_play", _wrap_SmartAbstractColor_play},
    { "SmartAbstractColor_stop", _wrap_SmartAbstractColor_stop},
    { "SmartAbstractColor_reset", _wrap_SmartAbstractColor_reset},
    { "SmartAbstractColor_testColor", _wrap_SmartAbstractColor_testColor},
    { "SmartAbstractFont___deref__", _wrap_SmartAbstractFont___deref__},
    { "delete_SmartAbstractFont", _wrap_delete_SmartAbstractFont},
    { "SmartAbstractFont_MAX_CHARS_get", _wrap_SmartAbstractFont_MAX_CHARS_get},
    { "SmartAbstractFont_width_set", _wrap_SmartAbstractFont_width_set},
    { "SmartAbstractFont_width_get", _wrap_SmartAbstractFont_width_get},
    { "SmartAbstractFont_print",_wrap_SmartAbstractFont_print},
    { "SmartAbstractFont_getLineHeight", _wrap_SmartAbstractFont_getLineHeight},
    { "SmartAbstractFont_getLineWidth", _wrap_SmartAbstractFont_getLineWidth},
    { "SmartAbstractFont_load", _wrap_SmartAbstractFont_load},
    { "SmartAbstractFont_unload", _wrap_SmartAbstractFont_unload},
    { "SmartParticleSystem___deref__", _wrap_SmartParticleSystem___deref__},
    { "delete_SmartParticleSystem", _wrap_delete_SmartParticleSystem},
    { "SmartParticleSystem_load", _wrap_SmartParticleSystem_load},
    { "SmartParticleSystem_unload", _wrap_SmartParticleSystem_unload},
    { "SmartParticleSystem_spawn",_wrap_SmartParticleSystem_spawn},
    { "SmartParticleSystem_setAutostart", _wrap_SmartParticleSystem_setAutostart},
    { "SmartParticleSystem_getNumParticles", _wrap_SmartParticleSystem_getNumParticles},
    { "SmartParticleSystem_getParticles", _wrap_SmartParticleSystem_getParticles},
    { "SmartParticleSystem_getSprite", _wrap_SmartParticleSystem_getSprite},
    { "SmartParticleSystem_getColor", _wrap_SmartParticleSystem_getColor},
    { "SmartParticleSystem_isAdditive", _wrap_SmartParticleSystem_isAdditive},
    { "SmartParticleSystem_reset", _wrap_SmartParticleSystem_reset},
    { "SmartParticleSystem_setPosition", _wrap_SmartParticleSystem_setPosition},
    { "SmartParticleSystem_getLifetime", _wrap_SmartParticleSystem_getLifetime},
    { "SmartParticleSystem_setLifetime", _wrap_SmartParticleSystem_setLifetime},
    { "SmartParticleSystem_getAge", _wrap_SmartParticleSystem_getAge},
    { "SmartParticleSystem_setLinger", _wrap_SmartParticleSystem_setLinger},
    { "SmartParticleSystem_getLinger", _wrap_SmartParticleSystem_getLinger},
    { "SmartParticleSystem_isDead", _wrap_SmartParticleSystem_isDead},
    { "SmartParticleSystem_isActive", _wrap_SmartParticleSystem_isActive},
    { "SmartParticleSystem_setParticlesPerSecond", _wrap_SmartParticleSystem_setParticlesPerSecond},
    { "SmartParticleSystem_addColor",_wrap_SmartParticleSystem_addColor},
    { "SmartParticleSystem_setSprite",_wrap_SmartParticleSystem_setSprite},
    { "SmartParticleSystem_setAdditiveBlending", _wrap_SmartParticleSystem_setAdditiveBlending},
    { "SmartParticleSystem_setDirection",_wrap_SmartParticleSystem_setDirection},
    { "SmartParticleSystem_setStartSpeed",_wrap_SmartParticleSystem_setStartSpeed},
    { "SmartParticleSystem_setGravity",_wrap_SmartParticleSystem_setGravity},
    { "SmartParticleSystem_setRadialAcc",_wrap_SmartParticleSystem_setRadialAcc},
    { "SmartParticleSystem_setTangentialAcc",_wrap_SmartParticleSystem_setTangentialAcc},
    { "SmartParticleSystem_setParticleLifetime",_wrap_SmartParticleSystem_setParticleLifetime},
    { "SmartParticleSystem_setParticleSize",_wrap_SmartParticleSystem_setParticleSize},
    { "SmartParticleSystem_setParticleSpin",_wrap_SmartParticleSystem_setParticleSpin},
    { "SmartParticleSystem_update", _wrap_SmartParticleSystem_update},
    { "SmartParticleSystem_render",_wrap_SmartParticleSystem_render},
    { "SmartBezier___deref__", _wrap_SmartBezier___deref__},
    { "delete_SmartBezier", _wrap_delete_SmartBezier},
    { "SmartMenu___deref__", _wrap_SmartMenu___deref__},
    { "delete_SmartMenu", _wrap_delete_SmartMenu},
    { "SmartMenu_LOVE_MENU_VERTICAL_get", _wrap_SmartMenu_LOVE_MENU_VERTICAL_get},
    { "SmartMenu_LOVE_MENU_HORIZONTAL_get", _wrap_SmartMenu_LOVE_MENU_HORIZONTAL_get},
    { "SmartMenu_LOVE_MENU_DEFAULT_get", _wrap_SmartMenu_LOVE_MENU_DEFAULT_get},
    { "SmartMenu_LOVE_MENU_WINDOW_get", _wrap_SmartMenu_LOVE_MENU_WINDOW_get},
    { "SmartMenu_LOVE_MENU_SCROLL_get", _wrap_SmartMenu_LOVE_MENU_SCROLL_get},
    { "SmartMenu_show", _wrap_SmartMenu_show},
    { "SmartMenu_hide", _wrap_SmartMenu_hide},
    { "SmartMenu_setFont", _wrap_SmartMenu_setFont},
    { "SmartMenu_setColor", _wrap_SmartMenu_setColor},
    { "SmartMenu_setBackgroundColor", _wrap_SmartMenu_setBackgroundColor},
    { "SmartMenu_setBackground", _wrap_SmartMenu_setBackground},
    { "SmartMenu_setSpacing", _wrap_SmartMenu_setSpacing},
    { "SmartMenu_stretchContent", _wrap_SmartMenu_stretchContent},
    { "SmartMenu_align", _wrap_SmartMenu_align},
    { "SmartMenu_valign", _wrap_SmartMenu_valign},
    { "SmartMenu_getFont", _wrap_SmartMenu_getFont},
    { "SmartMenu_getBackgroundColor", _wrap_SmartMenu_getBackgroundColor},
    { "SmartMenu_getSpacing", _wrap_SmartMenu_getSpacing},
    { "SmartMenu_getMenuType", _wrap_SmartMenu_getMenuType},
    { "SmartMenu_setSize", _wrap_SmartMenu_setSize},
    { "SmartMenu_setWidth", _wrap_SmartMenu_setWidth},
    { "SmartMenu_setHeight", _wrap_SmartMenu_setHeight},
    { "SmartMenu_setBorderSize", _wrap_SmartMenu_setBorderSize},
    { "SmartMenu_setPosition", _wrap_SmartMenu_setPosition},
    { "SmartMenu_setX", _wrap_SmartMenu_setX},
    { "SmartMenu_setY", _wrap_SmartMenu_setY},
    { "SmartMenu_getWidth", _wrap_SmartMenu_getWidth},
    { "SmartMenu_getHeight", _wrap_SmartMenu_getHeight},
    { "SmartMenu_getX", _wrap_SmartMenu_getX},
    { "SmartMenu_getY", _wrap_SmartMenu_getY},
    { "SmartMenu_getBorderSize", _wrap_SmartMenu_getBorderSize},
    { "SmartMenu_adjustSize", _wrap_SmartMenu_adjustSize},
    { "SmartMenu_adjustWidth", _wrap_SmartMenu_adjustWidth},
    { "SmartMenu_adjustHeight", _wrap_SmartMenu_adjustHeight},
    { "SmartMenu_adjustContent", _wrap_SmartMenu_adjustContent},
    { "SmartMenu_draw", _wrap_SmartMenu_draw},
    { "SmartMenu_drawBorder", _wrap_SmartMenu_drawBorder},
    { "SmartMenu_drawChildren", _wrap_SmartMenu_drawChildren},
    { "SmartMenu_add", _wrap_SmartMenu_add},
    { "SmartMenu_setCaption", _wrap_SmartMenu_setCaption},
    { "SmartMenu_setTitleBarHeight", _wrap_SmartMenu_setTitleBarHeight},
    { "SmartMenu_getCaption", _wrap_SmartMenu_getCaption},
    { "SmartMenu_getTitleBarHeight", _wrap_SmartMenu_getTitleBarHeight},
    { "SmartMenu_addMenu",_wrap_SmartMenu_addMenu},
    { "SmartMenu_addScrollMenu",_wrap_SmartMenu_addScrollMenu},
    { "SmartMenu_addWindowMenu",_wrap_SmartMenu_addWindowMenu},
    { "SmartMenu_addLabel",_wrap_SmartMenu_addLabel},
    { "SmartMenu_addMultilineLabel",_wrap_SmartMenu_addMultilineLabel},
    { "SmartMenu_addImage", _wrap_SmartMenu_addImage},
    { "SmartMenu_addButton",_wrap_SmartMenu_addButton},
    { "SmartMenu_addTextField",_wrap_SmartMenu_addTextField},
    { "SmartMenu_addDropDown",_wrap_SmartMenu_addDropDown},
    { "SmartMenu_addRadioButton",_wrap_SmartMenu_addRadioButton},
    { "SmartMenu_addCheckBox",_wrap_SmartMenu_addCheckBox},
    { "SmartMenu_addSlider",_wrap_SmartMenu_addSlider},
    { "SmartMenu_addListBox",_wrap_SmartMenu_addListBox},
    { "SmartMenu_addTextBox",_wrap_SmartMenu_addTextBox},
    { "SmartMenu_setBorderColor", _wrap_SmartMenu_setBorderColor},
    { "SmartMenu_getColor", _wrap_SmartMenu_getColor},
    { "SmartMenu_getBorderColor", _wrap_SmartMenu_getBorderColor},
    { "SmartMenu_setPadding",_wrap_SmartMenu_setPadding},
    { "SmartMenu_setPaddingTop", _wrap_SmartMenu_setPaddingTop},
    { "SmartMenu_setPaddingRight", _wrap_SmartMenu_setPaddingRight},
    { "SmartMenu_setPaddingBottom", _wrap_SmartMenu_setPaddingBottom},
    { "SmartMenu_setPaddingLeft", _wrap_SmartMenu_setPaddingLeft},
    { "SmartMenu_getPaddingTop", _wrap_SmartMenu_getPaddingTop},
    { "SmartMenu_getPaddingRight", _wrap_SmartMenu_getPaddingRight},
    { "SmartMenu_getPaddingBottom", _wrap_SmartMenu_getPaddingBottom},
    { "SmartMenu_getPaddingLeft", _wrap_SmartMenu_getPaddingLeft},
    { "SmartLabel___deref__", _wrap_SmartLabel___deref__},
    { "delete_SmartLabel", _wrap_delete_SmartLabel},
    { "SmartLabel_setSize", _wrap_SmartLabel_setSize},
    { "SmartLabel_setWidth", _wrap_SmartLabel_setWidth},
    { "SmartLabel_setHeight", _wrap_SmartLabel_setHeight},
    { "SmartLabel_setBorderSize", _wrap_SmartLabel_setBorderSize},
    { "SmartLabel_setCaption", _wrap_SmartLabel_setCaption},
    { "SmartLabel_setBackgroundColor", _wrap_SmartLabel_setBackgroundColor},
    { "SmartLabel_align", _wrap_SmartLabel_align},
    { "SmartLabel_valign", _wrap_SmartLabel_valign},
    { "SmartLabel_setBackground", _wrap_SmartLabel_setBackground},
    { "SmartLabel_getWidth", _wrap_SmartLabel_getWidth},
    { "SmartLabel_getHeight", _wrap_SmartLabel_getHeight},
    { "SmartLabel_getBorderSize", _wrap_SmartLabel_getBorderSize},
    { "SmartLabel_getCaption", _wrap_SmartLabel_getCaption},
    { "SmartLabel_getBackgroundColor", _wrap_SmartLabel_getBackgroundColor},
    { "SmartLabel_adjustSize", _wrap_SmartLabel_adjustSize},
    { "SmartLabel_draw", _wrap_SmartLabel_draw},
    { "SmartLabel_drawBorder", _wrap_SmartLabel_drawBorder},
    { "SmartLabel_setColor", _wrap_SmartLabel_setColor},
    { "SmartLabel_setBorderColor", _wrap_SmartLabel_setBorderColor},
    { "SmartLabel_getColor", _wrap_SmartLabel_getColor},
    { "SmartLabel_getBorderColor", _wrap_SmartLabel_getBorderColor},
    { "SmartMultilineLabel___deref__", _wrap_SmartMultilineLabel___deref__},
    { "delete_SmartMultilineLabel", _wrap_delete_SmartMultilineLabel},
    { "SmartMultilineLabel_setCaption",_wrap_SmartMultilineLabel_setCaption},
    { "SmartMultilineLabel_adjustContent", _wrap_SmartMultilineLabel_adjustContent},
    { "SmartMultilineLabel_adjustSize", _wrap_SmartMultilineLabel_adjustSize},
    { "SmartMultilineLabel_draw", _wrap_SmartMultilineLabel_draw},
    { "SmartMultilineLabel_setSize", _wrap_SmartMultilineLabel_setSize},
    { "SmartMultilineLabel_setWidth", _wrap_SmartMultilineLabel_setWidth},
    { "SmartMultilineLabel_setHeight", _wrap_SmartMultilineLabel_setHeight},
    { "SmartMultilineLabel_setBorderSize", _wrap_SmartMultilineLabel_setBorderSize},
    { "SmartMultilineLabel_setBackgroundColor", _wrap_SmartMultilineLabel_setBackgroundColor},
    { "SmartMultilineLabel_align", _wrap_SmartMultilineLabel_align},
    { "SmartMultilineLabel_valign", _wrap_SmartMultilineLabel_valign},
    { "SmartMultilineLabel_setBackground", _wrap_SmartMultilineLabel_setBackground},
    { "SmartMultilineLabel_getWidth", _wrap_SmartMultilineLabel_getWidth},
    { "SmartMultilineLabel_getHeight", _wrap_SmartMultilineLabel_getHeight},
    { "SmartMultilineLabel_getBorderSize", _wrap_SmartMultilineLabel_getBorderSize},
    { "SmartMultilineLabel_getCaption", _wrap_SmartMultilineLabel_getCaption},
    { "SmartMultilineLabel_getBackgroundColor", _wrap_SmartMultilineLabel_getBackgroundColor},
    { "SmartMultilineLabel_drawBorder", _wrap_SmartMultilineLabel_drawBorder},
    { "SmartMultilineLabel_setColor", _wrap_SmartMultilineLabel_setColor},
    { "SmartMultilineLabel_setBorderColor", _wrap_SmartMultilineLabel_setBorderColor},
    { "SmartMultilineLabel_getColor", _wrap_SmartMultilineLabel_getColor},
    { "SmartMultilineLabel_getBorderColor", _wrap_SmartMultilineLabel_getBorderColor},
    { "SmartButton___deref__", _wrap_SmartButton___deref__},
    { "delete_SmartButton", _wrap_delete_SmartButton},
    { "SmartButton_setSize", _wrap_SmartButton_setSize},
    { "SmartButton_setWidth", _wrap_SmartButton_setWidth},
    { "SmartButton_setHeight", _wrap_SmartButton_setHeight},
    { "SmartButton_setBorderSize", _wrap_SmartButton_setBorderSize},
    { "SmartButton_setCaption", _wrap_SmartButton_setCaption},
    { "SmartButton_setName", _wrap_SmartButton_setName},
    { "SmartButton_align", _wrap_SmartButton_align},
    { "SmartButton_valign", _wrap_SmartButton_valign},
    { "SmartButton_setBackgroundColor", _wrap_SmartButton_setBackgroundColor},
    { "SmartButton_setHoverColor", _wrap_SmartButton_setHoverColor},
    { "SmartButton_setPressedColor", _wrap_SmartButton_setPressedColor},
    { "SmartButton_setAllColors", _wrap_SmartButton_setAllColors},
    { "SmartButton_setHoverBackgroundColor", _wrap_SmartButton_setHoverBackgroundColor},
    { "SmartButton_setPressedBackgroundColor", _wrap_SmartButton_setPressedBackgroundColor},
    { "SmartButton_setAllBackgroundColors", _wrap_SmartButton_setAllBackgroundColors},
    { "SmartButton_setDefaultImage", _wrap_SmartButton_setDefaultImage},
    { "SmartButton_setHoverImage", _wrap_SmartButton_setHoverImage},
    { "SmartButton_setPressedImage", _wrap_SmartButton_setPressedImage},
    { "SmartButton_getWidth", _wrap_SmartButton_getWidth},
    { "SmartButton_getHeight", _wrap_SmartButton_getHeight},
    { "SmartButton_getBorderSize", _wrap_SmartButton_getBorderSize},
    { "SmartButton_getCaption", _wrap_SmartButton_getCaption},
    { "SmartButton_getName", _wrap_SmartButton_getName},
    { "SmartButton_getBackgroundColor", _wrap_SmartButton_getBackgroundColor},
    { "SmartButton_getHoverColor", _wrap_SmartButton_getHoverColor},
    { "SmartButton_getPressedColor", _wrap_SmartButton_getPressedColor},
    { "SmartButton_getHoverBackgroundColor", _wrap_SmartButton_getHoverBackgroundColor},
    { "SmartButton_getPressedBackgroundColor", _wrap_SmartButton_getPressedBackgroundColor},
    { "SmartButton_adjustSize", _wrap_SmartButton_adjustSize},
    { "SmartButton_isFocused", _wrap_SmartButton_isFocused},
    { "SmartButton_draw", _wrap_SmartButton_draw},
    { "SmartButton_drawBorder", _wrap_SmartButton_drawBorder},
    { "SmartButton_setColor", _wrap_SmartButton_setColor},
    { "SmartButton_setBorderColor", _wrap_SmartButton_setBorderColor},
    { "SmartButton_getColor", _wrap_SmartButton_getColor},
    { "SmartButton_getBorderColor", _wrap_SmartButton_getBorderColor},
    { "SmartTextField___deref__", _wrap_SmartTextField___deref__},
    { "delete_SmartTextField", _wrap_delete_SmartTextField},
    { "SmartTextField_setSize", _wrap_SmartTextField_setSize},
    { "SmartTextField_setWidth", _wrap_SmartTextField_setWidth},
    { "SmartTextField_setHeight", _wrap_SmartTextField_setHeight},
    { "SmartTextField_setBorderSize", _wrap_SmartTextField_setBorderSize},
    { "SmartTextField_setText", _wrap_SmartTextField_setText},
    { "SmartTextField_setName", _wrap_SmartTextField_setName},
    { "SmartTextField_setCaretPosition", _wrap_SmartTextField_setCaretPosition},
    { "SmartTextField_setBackgroundColor", _wrap_SmartTextField_setBackgroundColor},
    { "SmartTextField_setActiveColor", _wrap_SmartTextField_setActiveColor},
    { "SmartTextField_setActiveBackgroundColor", _wrap_SmartTextField_setActiveBackgroundColor},
    { "SmartTextField_getWidth", _wrap_SmartTextField_getWidth},
    { "SmartTextField_getHeight", _wrap_SmartTextField_getHeight},
    { "SmartTextField_getBorderSize", _wrap_SmartTextField_getBorderSize},
    { "SmartTextField_getText", _wrap_SmartTextField_getText},
    { "SmartTextField_getName", _wrap_SmartTextField_getName},
    { "SmartTextField_getCaretPosition", _wrap_SmartTextField_getCaretPosition},
    { "SmartTextField_getBackgroundColor", _wrap_SmartTextField_getBackgroundColor},
    { "SmartTextField_getActiveColor", _wrap_SmartTextField_getActiveColor},
    { "SmartTextField_getActiveBackgroundColor", _wrap_SmartTextField_getActiveBackgroundColor},
    { "SmartTextField_adjustSize", _wrap_SmartTextField_adjustSize},
    { "SmartTextField_draw", _wrap_SmartTextField_draw},
    { "SmartTextField_drawBorder", _wrap_SmartTextField_drawBorder},
    { "SmartTextField_setColor", _wrap_SmartTextField_setColor},
    { "SmartTextField_setBorderColor", _wrap_SmartTextField_setBorderColor},
    { "SmartTextField_getColor", _wrap_SmartTextField_getColor},
    { "SmartTextField_getBorderColor", _wrap_SmartTextField_getBorderColor},
    { "SmartDropDown___deref__", _wrap_SmartDropDown___deref__},
    { "delete_SmartDropDown", _wrap_delete_SmartDropDown},
    { "SmartDropDown_setSize", _wrap_SmartDropDown_setSize},
    { "SmartDropDown_setWidth", _wrap_SmartDropDown_setWidth},
    { "SmartDropDown_setHeight", _wrap_SmartDropDown_setHeight},
    { "SmartDropDown_setBorderSize", _wrap_SmartDropDown_setBorderSize},
    { "SmartDropDown_setName", _wrap_SmartDropDown_setName},
    { "SmartDropDown_setBackgroundColor", _wrap_SmartDropDown_setBackgroundColor},
    { "SmartDropDown_setActiveColor", _wrap_SmartDropDown_setActiveColor},
    { "SmartDropDown_setActiveBackgroundColor", _wrap_SmartDropDown_setActiveBackgroundColor},
    { "SmartDropDown_setSelectionColor", _wrap_SmartDropDown_setSelectionColor},
    { "SmartDropDown_setSelectionBackgroundColor", _wrap_SmartDropDown_setSelectionBackgroundColor},
    { "SmartDropDown_setButtonColor", _wrap_SmartDropDown_setButtonColor},
    { "SmartDropDown_setButtonBackgroundColor", _wrap_SmartDropDown_setButtonBackgroundColor},
    { "SmartDropDown_setButton", _wrap_SmartDropDown_setButton},
    { "SmartDropDown_setButtonPressed", _wrap_SmartDropDown_setButtonPressed},
    { "SmartDropDown_getWidth", _wrap_SmartDropDown_getWidth},
    { "SmartDropDown_getHeight", _wrap_SmartDropDown_getHeight},
    { "SmartDropDown_getBorderSize", _wrap_SmartDropDown_getBorderSize},
    { "SmartDropDown_getName", _wrap_SmartDropDown_getName},
    { "SmartDropDown_adjustSize", _wrap_SmartDropDown_adjustSize},
    { "SmartDropDown_getBackgroundColor", _wrap_SmartDropDown_getBackgroundColor},
    { "SmartDropDown_getActiveColor", _wrap_SmartDropDown_getActiveColor},
    { "SmartDropDown_getActiveBackgroundColor", _wrap_SmartDropDown_getActiveBackgroundColor},
    { "SmartDropDown_getSelectionColor", _wrap_SmartDropDown_getSelectionColor},
    { "SmartDropDown_getSelectionBackgroundColor", _wrap_SmartDropDown_getSelectionBackgroundColor},
    { "SmartDropDown_getButtonColor", _wrap_SmartDropDown_getButtonColor},
    { "SmartDropDown_getButtonBackgroundColor", _wrap_SmartDropDown_getButtonBackgroundColor},
    { "SmartDropDown_add", _wrap_SmartDropDown_add},
    { "SmartDropDown_remove", _wrap_SmartDropDown_remove},
    { "SmartDropDown_clear", _wrap_SmartDropDown_clear},
    { "SmartDropDown_getElementAt", _wrap_SmartDropDown_getElementAt},
    { "SmartDropDown_getSelected", _wrap_SmartDropDown_getSelected},
    { "SmartDropDown_getSelectedElement", _wrap_SmartDropDown_getSelectedElement},
    { "SmartDropDown_getNumberOfElements", _wrap_SmartDropDown_getNumberOfElements},
    { "SmartDropDown_draw", _wrap_SmartDropDown_draw},
    { "SmartDropDown_drawBorder", _wrap_SmartDropDown_drawBorder},
    { "SmartDropDown_drawButton", _wrap_SmartDropDown_drawButton},
    { "SmartDropDown_setColor", _wrap_SmartDropDown_setColor},
    { "SmartDropDown_setBorderColor", _wrap_SmartDropDown_setBorderColor},
    { "SmartDropDown_getColor", _wrap_SmartDropDown_getColor},
    { "SmartDropDown_getBorderColor", _wrap_SmartDropDown_getBorderColor},
    { "SmartRadioButton___deref__", _wrap_SmartRadioButton___deref__},
    { "delete_SmartRadioButton", _wrap_delete_SmartRadioButton},
    { "SmartRadioButton_setSize", _wrap_SmartRadioButton_setSize},
    { "SmartRadioButton_setWidth", _wrap_SmartRadioButton_setWidth},
    { "SmartRadioButton_setHeight", _wrap_SmartRadioButton_setHeight},
    { "SmartRadioButton_setBorderSize", _wrap_SmartRadioButton_setBorderSize},
    { "SmartRadioButton_setCaption", _wrap_SmartRadioButton_setCaption},
    { "SmartRadioButton_setName", _wrap_SmartRadioButton_setName},
    { "SmartRadioButton_setMarked", _wrap_SmartRadioButton_setMarked},
    { "SmartRadioButton_align", _wrap_SmartRadioButton_align},
    { "SmartRadioButton_valign", _wrap_SmartRadioButton_valign},
    { "SmartRadioButton_setBackgroundColor", _wrap_SmartRadioButton_setBackgroundColor},
    { "SmartRadioButton_setDefaultImage", _wrap_SmartRadioButton_setDefaultImage},
    { "SmartRadioButton_setMarkedImage", _wrap_SmartRadioButton_setMarkedImage},
    { "SmartRadioButton_getWidth", _wrap_SmartRadioButton_getWidth},
    { "SmartRadioButton_getHeight", _wrap_SmartRadioButton_getHeight},
    { "SmartRadioButton_getBorderSize", _wrap_SmartRadioButton_getBorderSize},
    { "SmartRadioButton_getCaption", _wrap_SmartRadioButton_getCaption},
    { "SmartRadioButton_getName", _wrap_SmartRadioButton_getName},
    { "SmartRadioButton_isMarked", _wrap_SmartRadioButton_isMarked},
    { "SmartRadioButton_getBackgroundColor", _wrap_SmartRadioButton_getBackgroundColor},
    { "SmartRadioButton_getDefaultImage", _wrap_SmartRadioButton_getDefaultImage},
    { "SmartRadioButton_getMarkedImage", _wrap_SmartRadioButton_getMarkedImage},
    { "SmartRadioButton_adjustSize", _wrap_SmartRadioButton_adjustSize},
    { "SmartRadioButton_draw", _wrap_SmartRadioButton_draw},
    { "SmartRadioButton_drawBorder", _wrap_SmartRadioButton_drawBorder},
    { "SmartRadioButton_drawBox", _wrap_SmartRadioButton_drawBox},
    { "SmartRadioButton_setColor", _wrap_SmartRadioButton_setColor},
    { "SmartRadioButton_setBorderColor", _wrap_SmartRadioButton_setBorderColor},
    { "SmartRadioButton_getColor", _wrap_SmartRadioButton_getColor},
    { "SmartRadioButton_getBorderColor", _wrap_SmartRadioButton_getBorderColor},
    { "SmartCheckBox___deref__", _wrap_SmartCheckBox___deref__},
    { "delete_SmartCheckBox", _wrap_delete_SmartCheckBox},
    { "SmartCheckBox_setSize", _wrap_SmartCheckBox_setSize},
    { "SmartCheckBox_setWidth", _wrap_SmartCheckBox_setWidth},
    { "SmartCheckBox_setHeight", _wrap_SmartCheckBox_setHeight},
    { "SmartCheckBox_setBorderSize", _wrap_SmartCheckBox_setBorderSize},
    { "SmartCheckBox_setCaption", _wrap_SmartCheckBox_setCaption},
    { "SmartCheckBox_setName", _wrap_SmartCheckBox_setName},
    { "SmartCheckBox_setMarked", _wrap_SmartCheckBox_setMarked},
    { "SmartCheckBox_align", _wrap_SmartCheckBox_align},
    { "SmartCheckBox_valign", _wrap_SmartCheckBox_valign},
    { "SmartCheckBox_setBackgroundColor", _wrap_SmartCheckBox_setBackgroundColor},
    { "SmartCheckBox_setDefaultImage", _wrap_SmartCheckBox_setDefaultImage},
    { "SmartCheckBox_setMarkedImage", _wrap_SmartCheckBox_setMarkedImage},
    { "SmartCheckBox_getWidth", _wrap_SmartCheckBox_getWidth},
    { "SmartCheckBox_getHeight", _wrap_SmartCheckBox_getHeight},
    { "SmartCheckBox_getBorderSize", _wrap_SmartCheckBox_getBorderSize},
    { "SmartCheckBox_getCaption", _wrap_SmartCheckBox_getCaption},
    { "SmartCheckBox_getName", _wrap_SmartCheckBox_getName},
    { "SmartCheckBox_isMarked", _wrap_SmartCheckBox_isMarked},
    { "SmartCheckBox_getBackgroundColor", _wrap_SmartCheckBox_getBackgroundColor},
    { "SmartCheckBox_getDefaultImage", _wrap_SmartCheckBox_getDefaultImage},
    { "SmartCheckBox_getMarkedImage", _wrap_SmartCheckBox_getMarkedImage},
    { "SmartCheckBox_adjustSize", _wrap_SmartCheckBox_adjustSize},
    { "SmartCheckBox_draw", _wrap_SmartCheckBox_draw},
    { "SmartCheckBox_drawBorder", _wrap_SmartCheckBox_drawBorder},
    { "SmartCheckBox_drawBox", _wrap_SmartCheckBox_drawBox},
    { "SmartCheckBox_setColor", _wrap_SmartCheckBox_setColor},
    { "SmartCheckBox_setBorderColor", _wrap_SmartCheckBox_setBorderColor},
    { "SmartCheckBox_getColor", _wrap_SmartCheckBox_getColor},
    { "SmartCheckBox_getBorderColor", _wrap_SmartCheckBox_getBorderColor},
    { "SmartSlider___deref__", _wrap_SmartSlider___deref__},
    { "delete_SmartSlider", _wrap_delete_SmartSlider},
    { "SmartSlider_LOVE_SLIDER_HORIZONTAL_get", _wrap_SmartSlider_LOVE_SLIDER_HORIZONTAL_get},
    { "SmartSlider_LOVE_SLIDER_VERTICAL_get", _wrap_SmartSlider_LOVE_SLIDER_VERTICAL_get},
    { "SmartSlider_setSize", _wrap_SmartSlider_setSize},
    { "SmartSlider_setWidth", _wrap_SmartSlider_setWidth},
    { "SmartSlider_setHeight", _wrap_SmartSlider_setHeight},
    { "SmartSlider_setBorderSize", _wrap_SmartSlider_setBorderSize},
    { "SmartSlider_setScale", _wrap_SmartSlider_setScale},
    { "SmartSlider_setScaleStart", _wrap_SmartSlider_setScaleStart},
    { "SmartSlider_setScaleEnd", _wrap_SmartSlider_setScaleEnd},
    { "SmartSlider_setStepLength", _wrap_SmartSlider_setStepLength},
    { "SmartSlider_setMarkerLength", _wrap_SmartSlider_setMarkerLength},
    { "SmartSlider_setOrientation", _wrap_SmartSlider_setOrientation},
    { "SmartSlider_setValue", _wrap_SmartSlider_setValue},
    { "SmartSlider_setName", _wrap_SmartSlider_setName},
    { "SmartSlider_setBackgroundColor", _wrap_SmartSlider_setBackgroundColor},
    { "SmartSlider_setMarkerImage", _wrap_SmartSlider_setMarkerImage},
    { "SmartSlider_setBackgroundImage", _wrap_SmartSlider_setBackgroundImage},
    { "SmartSlider_getWidth", _wrap_SmartSlider_getWidth},
    { "SmartSlider_getHeight", _wrap_SmartSlider_getHeight},
    { "SmartSlider_getBorderSize", _wrap_SmartSlider_getBorderSize},
    { "SmartSlider_getScaleStart", _wrap_SmartSlider_getScaleStart},
    { "SmartSlider_getScaleEnd", _wrap_SmartSlider_getScaleEnd},
    { "SmartSlider_getStepLength", _wrap_SmartSlider_getStepLength},
    { "SmartSlider_getMarkerLength", _wrap_SmartSlider_getMarkerLength},
    { "SmartSlider_getOrientation", _wrap_SmartSlider_getOrientation},
    { "SmartSlider_getValue", _wrap_SmartSlider_getValue},
    { "SmartSlider_getName", _wrap_SmartSlider_getName},
    { "SmartSlider_getBackgroundColor", _wrap_SmartSlider_getBackgroundColor},
    { "SmartSlider_getMarkerImage", _wrap_SmartSlider_getMarkerImage},
    { "SmartSlider_getBackgroundImage", _wrap_SmartSlider_getBackgroundImage},
    { "SmartSlider_adjustSize", _wrap_SmartSlider_adjustSize},
    { "SmartSlider_draw", _wrap_SmartSlider_draw},
    { "SmartSlider_drawBorder", _wrap_SmartSlider_drawBorder},
    { "SmartSlider_drawMarker", _wrap_SmartSlider_drawMarker},
    { "SmartSlider_setColor", _wrap_SmartSlider_setColor},
    { "SmartSlider_setBorderColor", _wrap_SmartSlider_setBorderColor},
    { "SmartSlider_getColor", _wrap_SmartSlider_getColor},
    { "SmartSlider_getBorderColor", _wrap_SmartSlider_getBorderColor},
    { "SmartListBox___deref__", _wrap_SmartListBox___deref__},
    { "delete_SmartListBox", _wrap_delete_SmartListBox},
    { "SmartListBox_setSize", _wrap_SmartListBox_setSize},
    { "SmartListBox_setWidth", _wrap_SmartListBox_setWidth},
    { "SmartListBox_setHeight", _wrap_SmartListBox_setHeight},
    { "SmartListBox_setBorderSize", _wrap_SmartListBox_setBorderSize},
    { "SmartListBox_setName", _wrap_SmartListBox_setName},
    { "SmartListBox_setBackgroundColor", _wrap_SmartListBox_setBackgroundColor},
    { "SmartListBox_setSelectionColor", _wrap_SmartListBox_setSelectionColor},
    { "SmartListBox_setSelectionBackgroundColor", _wrap_SmartListBox_setSelectionBackgroundColor},
    { "SmartListBox_getWidth", _wrap_SmartListBox_getWidth},
    { "SmartListBox_getHeight", _wrap_SmartListBox_getHeight},
    { "SmartListBox_getBorderSize", _wrap_SmartListBox_getBorderSize},
    { "SmartListBox_getName", _wrap_SmartListBox_getName},
    { "SmartListBox_getBackgroundColor", _wrap_SmartListBox_getBackgroundColor},
    { "SmartListBox_getSeclectionColor", _wrap_SmartListBox_getSeclectionColor},
    { "SmartListBox_getSeclectionBackgroundColor", _wrap_SmartListBox_getSeclectionBackgroundColor},
    { "SmartListBox_adjustSize", _wrap_SmartListBox_adjustSize},
    { "SmartListBox_add", _wrap_SmartListBox_add},
    { "SmartListBox_remove", _wrap_SmartListBox_remove},
    { "SmartListBox_clear", _wrap_SmartListBox_clear},
    { "SmartListBox_getElementAt", _wrap_SmartListBox_getElementAt},
    { "SmartListBox_getSelected", _wrap_SmartListBox_getSelected},
    { "SmartListBox_getSelectedElement", _wrap_SmartListBox_getSelectedElement},
    { "SmartListBox_getNumberOfElements", _wrap_SmartListBox_getNumberOfElements},
    { "SmartListBox_draw", _wrap_SmartListBox_draw},
    { "SmartListBox_drawBorder", _wrap_SmartListBox_drawBorder},
    { "SmartListBox_setColor", _wrap_SmartListBox_setColor},
    { "SmartListBox_setBorderColor", _wrap_SmartListBox_setBorderColor},
    { "SmartListBox_getColor", _wrap_SmartListBox_getColor},
    { "SmartListBox_getBorderColor", _wrap_SmartListBox_getBorderColor},
    { "SmartTextBox___deref__", _wrap_SmartTextBox___deref__},
    { "delete_SmartTextBox", _wrap_delete_SmartTextBox},
    { "SmartTextBox_setSize", _wrap_SmartTextBox_setSize},
    { "SmartTextBox_setWidth", _wrap_SmartTextBox_setWidth},
    { "SmartTextBox_setHeight", _wrap_SmartTextBox_setHeight},
    { "SmartTextBox_setBorderSize", _wrap_SmartTextBox_setBorderSize},
    { "SmartTextBox_setText", _wrap_SmartTextBox_setText},
    { "SmartTextBox_setName", _wrap_SmartTextBox_setName},
    { "SmartTextBox_setCaretColumn", _wrap_SmartTextBox_setCaretColumn},
    { "SmartTextBox_setCaretPosition", _wrap_SmartTextBox_setCaretPosition},
    { "SmartTextBox_setCaretRow", _wrap_SmartTextBox_setCaretRow},
    { "SmartTextBox_setCaretRowColumn", _wrap_SmartTextBox_setCaretRowColumn},
    { "SmartTextBox_setEditable", _wrap_SmartTextBox_setEditable},
    { "SmartTextBox_setTextRow", _wrap_SmartTextBox_setTextRow},
    { "SmartTextBox_setBackgroundColor", _wrap_SmartTextBox_setBackgroundColor},
    { "SmartTextBox_setActiveColor", _wrap_SmartTextBox_setActiveColor},
    { "SmartTextBox_setActiveBackgroundColor", _wrap_SmartTextBox_setActiveBackgroundColor},
    { "SmartTextBox_getWidth", _wrap_SmartTextBox_getWidth},
    { "SmartTextBox_getHeight", _wrap_SmartTextBox_getHeight},
    { "SmartTextBox_getBorderSize", _wrap_SmartTextBox_getBorderSize},
    { "SmartTextBox_getText", _wrap_SmartTextBox_getText},
    { "SmartTextBox_getName", _wrap_SmartTextBox_getName},
    { "SmartTextBox_getCaretColumn", _wrap_SmartTextBox_getCaretColumn},
    { "SmartTextBox_getCaretPosition", _wrap_SmartTextBox_getCaretPosition},
    { "SmartTextBox_getCaretRow", _wrap_SmartTextBox_getCaretRow},
    { "SmartTextBox_getNumberOfRows", _wrap_SmartTextBox_getNumberOfRows},
    { "SmartTextBox_getRow", _wrap_SmartTextBox_getRow},
    { "SmartTextBox_isEditable", _wrap_SmartTextBox_isEditable},
    { "SmartTextBox_getBackgroundColor", _wrap_SmartTextBox_getBackgroundColor},
    { "SmartTextBox_getActiveColor", _wrap_SmartTextBox_getActiveColor},
    { "SmartTextBox_getActiveBackgroundColor", _wrap_SmartTextBox_getActiveBackgroundColor},
    { "SmartTextBox_adjustSize", _wrap_SmartTextBox_adjustSize},
    { "SmartTextBox_draw", _wrap_SmartTextBox_draw},
    { "SmartTextBox_drawBorder", _wrap_SmartTextBox_drawBorder},
    { "SmartTextBox_setColor", _wrap_SmartTextBox_setColor},
    { "SmartTextBox_setBorderColor", _wrap_SmartTextBox_setBorderColor},
    { "SmartTextBox_getColor", _wrap_SmartTextBox_getColor},
    { "SmartTextBox_getBorderColor", _wrap_SmartTextBox_getBorderColor},
    {0,0}
};

static swig_lua_var_info swig_variables[] = {
    { "keyboard", _wrap_keyboard_get, _wrap_keyboard_set},
    { "mouse", _wrap_mouse_get, _wrap_mouse_set},
    { "display", _wrap_display_get, _wrap_display_set},
    { "graphics", _wrap_graphics_get, _wrap_graphics_set},
    { "audio", _wrap_audio_get, _wrap_audio_set},
    { "timer", _wrap_timer_get, _wrap_timer_set},
    { "objects", _wrap_objects_get, _wrap_objects_set},
    { "game", _wrap_game_get, _wrap_game_set},
    { "gui", _wrap_gui_get, _wrap_gui_set},
    {0,0,0}
};

static swig_lua_const_info swig_constants[] = {
{ SWIG_LUA_INT,     (char *)"key_unknown", (long) 0, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_first", (long) 0, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_backspace", (long) 8, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_tab", (long) 9, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_clear", (long) 12, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_return", (long) 13, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_pause", (long) 19, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_escape", (long) 27, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_space", (long) 32, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_exclaim", (long) 33, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_quotedbl", (long) 34, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_hash", (long) 35, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_dollar", (long) 36, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_ampersand", (long) 38, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_quote", (long) 39, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_leftparen", (long) 40, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_rightparen", (long) 41, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_asterisk", (long) 42, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_plus", (long) 43, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_comma", (long) 44, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_minus", (long) 45, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_period", (long) 46, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_slash", (long) 47, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_0", (long) 48, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_1", (long) 49, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_2", (long) 50, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_3", (long) 51, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_4", (long) 52, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_5", (long) 53, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_6", (long) 54, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_7", (long) 55, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_8", (long) 56, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_9", (long) 57, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_colon", (long) 58, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_semicolon", (long) 59, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_less", (long) 60, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_equals", (long) 61, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_greater", (long) 62, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_question", (long) 63, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_at", (long) 64, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_leftbracket", (long) 91, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_backslash", (long) 92, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_rightbracket", (long) 93, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_caret", (long) 94, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_underscore", (long) 95, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_backquote", (long) 96, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_a", (long) 97, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_b", (long) 98, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_c", (long) 99, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_d", (long) 100, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_e", (long) 101, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_f", (long) 102, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_g", (long) 103, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_h", (long) 104, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_i", (long) 105, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_j", (long) 106, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_k", (long) 107, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_l", (long) 108, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_m", (long) 109, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_n", (long) 110, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_o", (long) 111, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_p", (long) 112, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_q", (long) 113, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_r", (long) 114, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_s", (long) 115, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_t", (long) 116, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_u", (long) 117, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_v", (long) 118, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_w", (long) 119, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_x", (long) 120, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_y", (long) 121, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_z", (long) 122, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_delete", (long) 127, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_kp0", (long) 256, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_kp1", (long) 257, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_kp2", (long) 258, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_kp3", (long) 259, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_kp4", (long) 260, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_kp5", (long) 261, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_kp6", (long) 262, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_kp7", (long) 263, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_kp8", (long) 264, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_kp9", (long) 265, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_kp_period", (long) 266, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_kp_divide", (long) 267, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_kp_multiply", (long) 268, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_kp_minus", (long) 269, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_kp_plus", (long) 270, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_kp_enter", (long) 271, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_kp_equals", (long) 272, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_up", (long) 273, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_down", (long) 274, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_right", (long) 275, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_left", (long) 276, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_insert", (long) 277, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_home", (long) 278, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_end", (long) 279, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_pageup", (long) 280, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_pagedown", (long) 281, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_f1", (long) 282, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_f2", (long) 283, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_f3", (long) 284, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_f4", (long) 285, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_f5", (long) 286, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_f6", (long) 287, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_f7", (long) 288, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_f8", (long) 289, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_f9", (long) 290, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_f10", (long) 291, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_f11", (long) 292, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_f12", (long) 293, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_f13", (long) 294, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_f14", (long) 295, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_f15", (long) 296, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_numlock", (long) 300, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_capslock", (long) 301, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_scrollock", (long) 302, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_rshift", (long) 303, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_lshift", (long) 304, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_rctrl", (long) 305, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_lctrl", (long) 306, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_ralt", (long) 307, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_lalt", (long) 308, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_rmeta", (long) 309, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_lmeta", (long) 310, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_lsuper", (long) 311, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_rsuper", (long) 312, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_mode", (long) 313, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_compose", (long) 314, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_help", (long) 315, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_print", (long) 316, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_sysreq", (long) 317, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_break", (long) 318, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_menu", (long) 319, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_power", (long) 320, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_euro", (long) 321, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_undo", (long) 322, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"mouse_left", (long) LOVE_MOUSE_LEFT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"mouse_middle", (long) LOVE_MOUSE_MIDDLE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"mouse_right", (long) LOVE_MOUSE_RIGHT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"mouse_wheelup", (long) LOVE_MOUSE_WHEELUP, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"mouse_wheeldown", (long) LOVE_MOUSE_WHEELDOWN, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"align_left", (long) 1, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"align_right", (long) 2, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"align_center", (long) 3, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"align_top", (long) 4, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"align_bottom", (long) 5, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"menu_vertical", (long) 1, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"menu_horizontal", (long) 2, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"slider_horizontal", (long) 0, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"slider_vertical", (long) 1, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"mode_loop", (long) 1, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"mode_once", (long) 2, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"mode_bounce", (long) 3, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"event_message", (long) LOVE_TYPE_MESSAGE_EVENT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"event_gui", (long) LOVE_TYPE_GUI_EVENT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"MAX_CHARS", (long) love::AbstractFont::MAX_CHARS, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LOVE_COLOR_BLACK", (long) love::AbstractColor::LOVE_COLOR_BLACK, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LOVE_COLOR_WHITE", (long) love::AbstractColor::LOVE_COLOR_WHITE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LOVE_COLOR_RED", (long) love::AbstractColor::LOVE_COLOR_RED, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LOVE_COLOR_GREEN", (long) love::AbstractColor::LOVE_COLOR_GREEN, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LOVE_COLOR_BLUE", (long) love::AbstractColor::LOVE_COLOR_BLUE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LOVE_COLOR_YELLOW", (long) love::AbstractColor::LOVE_COLOR_YELLOW, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LOVE_COLOR_CYAN", (long) love::AbstractColor::LOVE_COLOR_CYAN, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LOVE_COLOR_MAGENTA", (long) love::AbstractColor::LOVE_COLOR_MAGENTA, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LOVE_SLIDER_HORIZONTAL", (long) love::Slider::LOVE_SLIDER_HORIZONTAL, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LOVE_SLIDER_VERTICAL", (long) love::Slider::LOVE_SLIDER_VERTICAL, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LOVE_MENU_VERTICAL", (long) love::AbstractMenu::LOVE_MENU_VERTICAL, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LOVE_MENU_HORIZONTAL", (long) love::AbstractMenu::LOVE_MENU_HORIZONTAL, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LOVE_MENU_DEFAULT", (long) love::AbstractMenu::LOVE_MENU_DEFAULT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LOVE_MENU_WINDOW", (long) love::AbstractMenu::LOVE_MENU_WINDOW, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LOVE_MENU_SCROLL", (long) love::AbstractMenu::LOVE_MENU_SCROLL, 0, 0, 0},
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_love__MessageEventTo_p_love__Event(void *x) {
    return (void *)((love::Event *)  ((love::MessageEvent *) x));
}
static void *_p_love__GUIEventTo_p_love__Event(void *x) {
    return (void *)((love::Event *)  ((love::GUIEvent *) x));
}
static void *_p_love__MenuTo_p_love__Padded(void *x) {
    return (void *)((love::Padded *) (love::AbstractMenu *) ((love::Menu *) x));
}
static void *_p_love__AbstractMenuTo_p_love__Padded(void *x) {
    return (void *)((love::Padded *)  ((love::AbstractMenu *) x));
}
static void *_p_love__MessageEventTo_p_love__Object(void *x) {
    return (void *)((love::Object *) (love::Event *) ((love::MessageEvent *) x));
}
static void *_p_love__EventTo_p_love__Object(void *x) {
    return (void *)((love::Object *)  ((love::Event *) x));
}
static void *_p_love__AbstractFontTo_p_love__Object(void *x) {
    return (void *)((love::Object *)  ((love::AbstractFont *) x));
}
static void *_p_love__GUIEventTo_p_love__Object(void *x) {
    return (void *)((love::Object *) (love::Event *) ((love::GUIEvent *) x));
}
static void *_p_love__AbstractColorTo_p_love__Object(void *x) {
    return (void *)((love::Object *)  ((love::AbstractColor *) x));
}
static void *_p_love__AbstractMusicTo_p_love__Object(void *x) {
    return (void *)((love::Object *)  ((love::AbstractMusic *) x));
}
static void *_p_love__AbstractSoundTo_p_love__Object(void *x) {
    return (void *)((love::Object *)  ((love::AbstractSound *) x));
}
static void *_p_love__DisplayModeTo_p_love__Object(void *x) {
    return (void *)((love::Object *)  ((love::DisplayMode *) x));
}
static void *_p_love__LuaGLTo_p_love__Object(void *x) {
    return (void *)((love::Object *)  ((love::LuaGL *) x));
}
static void *_p_love__AbstractImageTo_p_love__Sprite(void *x) {
    return (void *)((love::Sprite *)  ((love::AbstractImage *) x));
}
static void *_p_love__FrameAnimationTo_p_love__Sprite(void *x) {
    return (void *)((love::Sprite *)  ((love::FrameAnimation *) x));
}
static void *_p_love__MultilineLabelTo_p_love__Label(void *x) {
    return (void *)((love::Label *)  ((love::MultilineLabel *) x));
}
static void *_p_love__MenuTo_p_love__AbstractMenu(void *x) {
    return (void *)((love::AbstractMenu *)  ((love::Menu *) x));
}
static void *_p_love__AbstractColorTo_p_love__Updateable(void *x) {
    return (void *)((love::Updateable *)  ((love::AbstractColor *) x));
}
static void *_p_love__AbstractGUITo_p_love__Updateable(void *x) {
    return (void *)((love::Updateable *)  ((love::AbstractGUI *) x));
}
static void *_p_love__LabelTo_p_love__GUIElement(void *x) {
    return (void *)((love::GUIElement *)  ((love::Label *) x));
}
static void *_p_love__MultilineLabelTo_p_love__GUIElement(void *x) {
    return (void *)((love::GUIElement *) (love::Label *) ((love::MultilineLabel *) x));
}
static void *_p_love__MenuTo_p_love__GUIElement(void *x) {
    return (void *)((love::GUIElement *) (love::AbstractMenu *) ((love::Menu *) x));
}
static void *_p_love__TextBoxTo_p_love__GUIElement(void *x) {
    return (void *)((love::GUIElement *)  ((love::TextBox *) x));
}
static void *_p_love__ButtonTo_p_love__GUIElement(void *x) {
    return (void *)((love::GUIElement *)  ((love::Button *) x));
}
static void *_p_love__RadioButtonTo_p_love__GUIElement(void *x) {
    return (void *)((love::GUIElement *)  ((love::RadioButton *) x));
}
static void *_p_love__ListBoxTo_p_love__GUIElement(void *x) {
    return (void *)((love::GUIElement *)  ((love::ListBox *) x));
}
static void *_p_love__DropDownTo_p_love__GUIElement(void *x) {
    return (void *)((love::GUIElement *)  ((love::DropDown *) x));
}
static void *_p_love__AbstractMenuTo_p_love__GUIElement(void *x) {
    return (void *)((love::GUIElement *)  ((love::AbstractMenu *) x));
}
static void *_p_love__TextFieldTo_p_love__GUIElement(void *x) {
    return (void *)((love::GUIElement *)  ((love::TextField *) x));
}
static void *_p_love__SliderTo_p_love__GUIElement(void *x) {
    return (void *)((love::GUIElement *)  ((love::Slider *) x));
}
static void *_p_love__CheckBoxTo_p_love__GUIElement(void *x) {
    return (void *)((love::GUIElement *)  ((love::CheckBox *) x));
}
static swig_type_info _swigt__Vector = {"_Vector", "Vector", 0, 0, (void*)0, 0};
static swig_type_info _swigt__boost__shared_ptrTlove__AbstractColor_t = {"_boost__shared_ptrTlove__AbstractColor_t", "boost::shared_ptr<love::AbstractColor >", 0, 0, (void*)0, 0};
static swig_type_info _swigt__boost__shared_ptrTlove__AbstractFont_t = {"_boost__shared_ptrTlove__AbstractFont_t", "boost::shared_ptr<love::AbstractFont >|love::pAbstractFont", 0, 0, (void*)0, 0};
static swig_type_info _swigt__love__DisplayMode = {"_love__DisplayMode", "love::DisplayMode", 0, 0, (void*)0, 0};
static swig_type_info _swigt__pEvent = {"_pEvent", "pEvent", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Color = {"_p_Color", "Color *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GUIList = {"_p_GUIList", "GUIList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Vector = {"_p_Vector", "Vector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrTlove__AbstractColor_t = {"_p_boost__shared_ptrTlove__AbstractColor_t", "boost::shared_ptr<love::AbstractColor > *|love::pAbstractColor *", 0, 0, (void*)&_wrap_class_boost_shared_ptr_Sl_love_AbstractColor_Sg_, 0};
static swig_type_info _swigt__p_boost__shared_ptrTlove__AbstractDisplay_t = {"_p_boost__shared_ptrTlove__AbstractDisplay_t", "boost::shared_ptr<love::AbstractDisplay > *", 0, 0, (void*)&_wrap_class_boost_shared_ptr_Sl_love_AbstractDisplay_Sg_, 0};
static swig_type_info _swigt__p_boost__shared_ptrTlove__AbstractFont_t = {"_p_boost__shared_ptrTlove__AbstractFont_t", "boost::shared_ptr<love::AbstractFont > *|love::pAbstractFont *", 0, 0, (void*)&_wrap_class_boost_shared_ptr_Sl_love_AbstractFont_Sg_, 0};
static swig_type_info _swigt__p_boost__shared_ptrTlove__AbstractGraphics_t = {"_p_boost__shared_ptrTlove__AbstractGraphics_t", "boost::shared_ptr<love::AbstractGraphics > *|love::pAbstractGraphics *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrTlove__AbstractImage_t = {"_p_boost__shared_ptrTlove__AbstractImage_t", "boost::shared_ptr<love::AbstractImage > *", 0, 0, (void*)&_wrap_class_boost_shared_ptr_Sl_love_AbstractImage_Sg_, 0};
static swig_type_info _swigt__p_boost__shared_ptrTlove__AbstractMenu_t = {"_p_boost__shared_ptrTlove__AbstractMenu_t", "boost::shared_ptr<love::AbstractMenu > *", 0, 0, (void*)&_wrap_class_boost_shared_ptr_Sl_love_AbstractMenu_Sg_, 0};
static swig_type_info _swigt__p_boost__shared_ptrTlove__AbstractMusic_t = {"_p_boost__shared_ptrTlove__AbstractMusic_t", "boost::shared_ptr<love::AbstractMusic > *", 0, 0, (void*)&_wrap_class_boost_shared_ptr_Sl_love_AbstractMusic_Sg_, 0};
static swig_type_info _swigt__p_boost__shared_ptrTlove__AbstractSoundDevice_t = {"_p_boost__shared_ptrTlove__AbstractSoundDevice_t", "boost::shared_ptr<love::AbstractSoundDevice > *|love::pAbstractSoundDevice *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrTlove__AbstractSound_t = {"_p_boost__shared_ptrTlove__AbstractSound_t", "boost::shared_ptr<love::AbstractSound > *", 0, 0, (void*)&_wrap_class_boost_shared_ptr_Sl_love_AbstractSound_Sg_, 0};
static swig_type_info _swigt__p_boost__shared_ptrTlove__Bezier_t = {"_p_boost__shared_ptrTlove__Bezier_t", "boost::shared_ptr<love::Bezier > *", 0, 0, (void*)&_wrap_class_boost_shared_ptr_Sl_love_Bezier_Sg_, 0};
static swig_type_info _swigt__p_boost__shared_ptrTlove__Button_t = {"_p_boost__shared_ptrTlove__Button_t", "boost::shared_ptr<love::Button > *", 0, 0, (void*)&_wrap_class_boost_shared_ptr_Sl_love_Button_Sg_, 0};
static swig_type_info _swigt__p_boost__shared_ptrTlove__CheckBox_t = {"_p_boost__shared_ptrTlove__CheckBox_t", "boost::shared_ptr<love::CheckBox > *", 0, 0, (void*)&_wrap_class_boost_shared_ptr_Sl_love_CheckBox_Sg_, 0};
static swig_type_info _swigt__p_boost__shared_ptrTlove__DisplayMode_t = {"_p_boost__shared_ptrTlove__DisplayMode_t", "boost::shared_ptr<love::DisplayMode > *|love::pDisplayMode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrTlove__DropDown_t = {"_p_boost__shared_ptrTlove__DropDown_t", "boost::shared_ptr<love::DropDown > *", 0, 0, (void*)&_wrap_class_boost_shared_ptr_Sl_love_DropDown_Sg_, 0};
static swig_type_info _swigt__p_boost__shared_ptrTlove__Event_t = {"_p_boost__shared_ptrTlove__Event_t", "boost::shared_ptr<love::Event > *|love::pEvent *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrTlove__FrameAnimation_t = {"_p_boost__shared_ptrTlove__FrameAnimation_t", "boost::shared_ptr<love::FrameAnimation > *|love::pFrameAnimation *", 0, 0, (void*)&_wrap_class_boost_shared_ptr_Sl_love_FrameAnimation_Sg_, 0};
static swig_type_info _swigt__p_boost__shared_ptrTlove__GUIElement_t = {"_p_boost__shared_ptrTlove__GUIElement_t", "boost::shared_ptr<love::GUIElement > *|love::pGUIElement *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrTlove__GUIEvent_t = {"_p_boost__shared_ptrTlove__GUIEvent_t", "boost::shared_ptr<love::GUIEvent > *|love::pGUIEvent *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrTlove__Label_t = {"_p_boost__shared_ptrTlove__Label_t", "boost::shared_ptr<love::Label > *", 0, 0, (void*)&_wrap_class_boost_shared_ptr_Sl_love_Label_Sg_, 0};
static swig_type_info _swigt__p_boost__shared_ptrTlove__ListBox_t = {"_p_boost__shared_ptrTlove__ListBox_t", "boost::shared_ptr<love::ListBox > *", 0, 0, (void*)&_wrap_class_boost_shared_ptr_Sl_love_ListBox_Sg_, 0};
static swig_type_info _swigt__p_boost__shared_ptrTlove__LuaGL_t = {"_p_boost__shared_ptrTlove__LuaGL_t", "boost::shared_ptr<love::LuaGL > *|love::pLuaGL *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrTlove__Menu_t = {"_p_boost__shared_ptrTlove__Menu_t", "boost::shared_ptr<love::Menu > *|love::pMenu *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrTlove__MessageEvent_t = {"_p_boost__shared_ptrTlove__MessageEvent_t", "boost::shared_ptr<love::MessageEvent > *|love::pMessageEvent *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrTlove__MultilineLabel_t = {"_p_boost__shared_ptrTlove__MultilineLabel_t", "boost::shared_ptr<love::MultilineLabel > *", 0, 0, (void*)&_wrap_class_boost_shared_ptr_Sl_love_MultilineLabel_Sg_, 0};
static swig_type_info _swigt__p_boost__shared_ptrTlove__ObjectFactory_t = {"_p_boost__shared_ptrTlove__ObjectFactory_t", "boost::shared_ptr<love::ObjectFactory > *|love::pObjectFactory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrTlove__ParticleSystem_t = {"_p_boost__shared_ptrTlove__ParticleSystem_t", "boost::shared_ptr<love::ParticleSystem > *", 0, 0, (void*)&_wrap_class_boost_shared_ptr_Sl_love_ParticleSystem_Sg_, 0};
static swig_type_info _swigt__p_boost__shared_ptrTlove__RadioButton_t = {"_p_boost__shared_ptrTlove__RadioButton_t", "boost::shared_ptr<love::RadioButton > *", 0, 0, (void*)&_wrap_class_boost_shared_ptr_Sl_love_RadioButton_Sg_, 0};
static swig_type_info _swigt__p_boost__shared_ptrTlove__Slider_t = {"_p_boost__shared_ptrTlove__Slider_t", "boost::shared_ptr<love::Slider > *", 0, 0, (void*)&_wrap_class_boost_shared_ptr_Sl_love_Slider_Sg_, 0};
static swig_type_info _swigt__p_boost__shared_ptrTlove__TextBox_t = {"_p_boost__shared_ptrTlove__TextBox_t", "boost::shared_ptr<love::TextBox > *", 0, 0, (void*)&_wrap_class_boost_shared_ptr_Sl_love_TextBox_Sg_, 0};
static swig_type_info _swigt__p_boost__shared_ptrTlove__TextField_t = {"_p_boost__shared_ptrTlove__TextField_t", "boost::shared_ptr<love::TextField > *", 0, 0, (void*)&_wrap_class_boost_shared_ptr_Sl_love_TextField_Sg_, 0};
static swig_type_info _swigt__p_boost__shared_ptrTlove__Timer_t = {"_p_boost__shared_ptrTlove__Timer_t", "boost::shared_ptr<love::Timer > *|love::pTimer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gcn__ActionEvent = {"_p_gcn__ActionEvent", "gcn::ActionEvent *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gcn__Graphics = {"_p_gcn__Graphics", "gcn::Graphics *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gcn__Widget = {"_p_gcn__Widget", "gcn::Widget *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_listTlove__particle_t = {"_p_listTlove__particle_t", "list<love::particle > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_love__AbstractColor = {"_p_love__AbstractColor", "love::AbstractColor *", 0, 0, (void*)&_wrap_class_love_AbstractColor, 0};
static swig_type_info _swigt__p_love__AbstractDisplay = {"_p_love__AbstractDisplay", "love::AbstractDisplay *", 0, 0, (void*)&_wrap_class_love_AbstractDisplay, 0};
static swig_type_info _swigt__p_love__AbstractFont = {"_p_love__AbstractFont", "love::AbstractFont *", 0, 0, (void*)&_wrap_class_love_AbstractFont, 0};
static swig_type_info _swigt__p_love__AbstractGUI = {"_p_love__AbstractGUI", "love::AbstractGUI *", 0, 0, (void*)&_wrap_class_love_AbstractGUI, 0};
static swig_type_info _swigt__p_love__AbstractGraphics = {"_p_love__AbstractGraphics", "love::AbstractGraphics *", 0, 0, (void*)&_wrap_class_love_AbstractGraphics, 0};
static swig_type_info _swigt__p_love__AbstractImage = {"_p_love__AbstractImage", "love::AbstractImage *", 0, 0, (void*)&_wrap_class_love_AbstractImage, 0};
static swig_type_info _swigt__p_love__AbstractMenu = {"_p_love__AbstractMenu", "love::AbstractMenu *", 0, 0, (void*)&_wrap_class_love_AbstractMenu, 0};
static swig_type_info _swigt__p_love__AbstractMusic = {"_p_love__AbstractMusic", "love::AbstractMusic *", 0, 0, (void*)&_wrap_class_love_AbstractMusic, 0};
static swig_type_info _swigt__p_love__AbstractSound = {"_p_love__AbstractSound", "love::AbstractSound *", 0, 0, (void*)&_wrap_class_love_AbstractSound, 0};
static swig_type_info _swigt__p_love__AbstractSoundDevice = {"_p_love__AbstractSoundDevice", "love::AbstractSoundDevice *", 0, 0, (void*)&_wrap_class_love_AbstractSoundDevice, 0};
static swig_type_info _swigt__p_love__Bezier = {"_p_love__Bezier", "love::Bezier *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_love__Button = {"_p_love__Button", "love::Button *", 0, 0, (void*)&_wrap_class_love_Button, 0};
static swig_type_info _swigt__p_love__CheckBox = {"_p_love__CheckBox", "love::CheckBox *", 0, 0, (void*)&_wrap_class_love_CheckBox, 0};
static swig_type_info _swigt__p_love__DisplayMode = {"_p_love__DisplayMode", "love::DisplayMode *", 0, 0, (void*)&_wrap_class_love_DisplayMode, 0};
static swig_type_info _swigt__p_love__DropDown = {"_p_love__DropDown", "love::DropDown *", 0, 0, (void*)&_wrap_class_love_DropDown, 0};
static swig_type_info _swigt__p_love__Event = {"_p_love__Event", "love::Event *", 0, 0, (void*)&_wrap_class_love_Event, 0};
static swig_type_info _swigt__p_love__FrameAnimation = {"_p_love__FrameAnimation", "love::FrameAnimation *", 0, 0, (void*)&_wrap_class_love_FrameAnimation, 0};
static swig_type_info _swigt__p_love__GUIContainer = {"_p_love__GUIContainer", "love::GUIContainer *", 0, 0, (void*)&_wrap_class_love_GUIContainer, 0};
static swig_type_info _swigt__p_love__GUIElement = {"_p_love__GUIElement", "love::GUIElement *", 0, 0, (void*)&_wrap_class_love_GUIElement, 0};
static swig_type_info _swigt__p_love__GUIEvent = {"_p_love__GUIEvent", "love::GUIEvent *", 0, 0, (void*)&_wrap_class_love_GUIEvent, 0};
static swig_type_info _swigt__p_love__Keyboard = {"_p_love__Keyboard", "love::Keyboard *", 0, 0, (void*)&_wrap_class_love_Keyboard, 0};
static swig_type_info _swigt__p_love__Label = {"_p_love__Label", "love::Label *", 0, 0, (void*)&_wrap_class_love_Label, 0};
static swig_type_info _swigt__p_love__ListBox = {"_p_love__ListBox", "love::ListBox *", 0, 0, (void*)&_wrap_class_love_ListBox, 0};
static swig_type_info _swigt__p_love__LuaGL = {"_p_love__LuaGL", "love::LuaGL *", 0, 0, (void*)&_wrap_class_love_LuaGL, 0};
static swig_type_info _swigt__p_love__LuaGame = {"_p_love__LuaGame", "love::LuaGame *", 0, 0, (void*)&_wrap_class_love_LuaGame, 0};
static swig_type_info _swigt__p_love__Menu = {"_p_love__Menu", "love::Menu *", 0, 0, (void*)&_wrap_class_love_Menu, 0};
static swig_type_info _swigt__p_love__MessageEvent = {"_p_love__MessageEvent", "love::MessageEvent *", 0, 0, (void*)&_wrap_class_love_MessageEvent, 0};
static swig_type_info _swigt__p_love__Mouse = {"_p_love__Mouse", "love::Mouse *", 0, 0, (void*)&_wrap_class_love_Mouse, 0};
static swig_type_info _swigt__p_love__MultilineLabel = {"_p_love__MultilineLabel", "love::MultilineLabel *", 0, 0, (void*)&_wrap_class_love_MultilineLabel, 0};
static swig_type_info _swigt__p_love__Object = {"_p_love__Object", "love::Object *", 0, 0, (void*)&_wrap_class_love_Object, 0};
static swig_type_info _swigt__p_love__ObjectFactory = {"_p_love__ObjectFactory", "love::ObjectFactory *", 0, 0, (void*)&_wrap_class_love_ObjectFactory, 0};
static swig_type_info _swigt__p_love__Padded = {"_p_love__Padded", "love::Padded *", 0, 0, (void*)&_wrap_class_love_Padded, 0};
static swig_type_info _swigt__p_love__ParticleSystem = {"_p_love__ParticleSystem", "love::ParticleSystem *", 0, 0, (void*)&_wrap_class_love_ParticleSystem, 0};
static swig_type_info _swigt__p_love__RadioButton = {"_p_love__RadioButton", "love::RadioButton *", 0, 0, (void*)&_wrap_class_love_RadioButton, 0};
static swig_type_info _swigt__p_love__Slider = {"_p_love__Slider", "love::Slider *", 0, 0, (void*)&_wrap_class_love_Slider, 0};
static swig_type_info _swigt__p_love__Sprite = {"_p_love__Sprite", "love::Sprite *", 0, 0, (void*)&_wrap_class_love_Sprite, 0};
static swig_type_info _swigt__p_love__TextBox = {"_p_love__TextBox", "love::TextBox *", 0, 0, (void*)&_wrap_class_love_TextBox, 0};
static swig_type_info _swigt__p_love__TextField = {"_p_love__TextField", "love::TextField *", 0, 0, (void*)&_wrap_class_love_TextField, 0};
static swig_type_info _swigt__p_love__Timer = {"_p_love__Timer", "love::Timer *", 0, 0, (void*)&_wrap_class_love_Timer, 0};
static swig_type_info _swigt__p_love__Updateable = {"_p_love__Updateable", "love::Updateable *", 0, 0, (void*)&_wrap_class_love_Updateable, 0};
static swig_type_info _swigt__p_love__interval = {"_p_love__interval", "love::interval *", 0, 0, (void*)&_wrap_class_love_interval, 0};
static swig_type_info _swigt__p_love__particle = {"_p_love__particle", "love::particle *", 0, 0, (void*)&_wrap_class_love_particle, 0};
static swig_type_info _swigt__p_pAbstractImage = {"_p_pAbstractImage", "pAbstractImage *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pAbstractMusic = {"_p_pAbstractMusic", "pAbstractMusic *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pAbstractSound = {"_p_pAbstractSound", "pAbstractSound *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pAnimatedColor = {"_p_pAnimatedColor", "pAnimatedColor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pBezier = {"_p_pBezier", "pBezier *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pEvent = {"_p_pEvent", "pEvent *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pSprite = {"_p_pSprite", "pSprite *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_string = {"_p_string", "string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__string = {"_string", "string", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__Vector,
  &_swigt__boost__shared_ptrTlove__AbstractColor_t,
  &_swigt__boost__shared_ptrTlove__AbstractFont_t,
  &_swigt__love__DisplayMode,
  &_swigt__pEvent,
  &_swigt__p_Color,
  &_swigt__p_GUIList,
  &_swigt__p_Vector,
  &_swigt__p_boost__shared_ptrTlove__AbstractColor_t,
  &_swigt__p_boost__shared_ptrTlove__AbstractDisplay_t,
  &_swigt__p_boost__shared_ptrTlove__AbstractFont_t,
  &_swigt__p_boost__shared_ptrTlove__AbstractGraphics_t,
  &_swigt__p_boost__shared_ptrTlove__AbstractImage_t,
  &_swigt__p_boost__shared_ptrTlove__AbstractMenu_t,
  &_swigt__p_boost__shared_ptrTlove__AbstractMusic_t,
  &_swigt__p_boost__shared_ptrTlove__AbstractSoundDevice_t,
  &_swigt__p_boost__shared_ptrTlove__AbstractSound_t,
  &_swigt__p_boost__shared_ptrTlove__Bezier_t,
  &_swigt__p_boost__shared_ptrTlove__Button_t,
  &_swigt__p_boost__shared_ptrTlove__CheckBox_t,
  &_swigt__p_boost__shared_ptrTlove__DisplayMode_t,
  &_swigt__p_boost__shared_ptrTlove__DropDown_t,
  &_swigt__p_boost__shared_ptrTlove__Event_t,
  &_swigt__p_boost__shared_ptrTlove__FrameAnimation_t,
  &_swigt__p_boost__shared_ptrTlove__GUIElement_t,
  &_swigt__p_boost__shared_ptrTlove__GUIEvent_t,
  &_swigt__p_boost__shared_ptrTlove__Label_t,
  &_swigt__p_boost__shared_ptrTlove__ListBox_t,
  &_swigt__p_boost__shared_ptrTlove__LuaGL_t,
  &_swigt__p_boost__shared_ptrTlove__Menu_t,
  &_swigt__p_boost__shared_ptrTlove__MessageEvent_t,
  &_swigt__p_boost__shared_ptrTlove__MultilineLabel_t,
  &_swigt__p_boost__shared_ptrTlove__ObjectFactory_t,
  &_swigt__p_boost__shared_ptrTlove__ParticleSystem_t,
  &_swigt__p_boost__shared_ptrTlove__RadioButton_t,
  &_swigt__p_boost__shared_ptrTlove__Slider_t,
  &_swigt__p_boost__shared_ptrTlove__TextBox_t,
  &_swigt__p_boost__shared_ptrTlove__TextField_t,
  &_swigt__p_boost__shared_ptrTlove__Timer_t,
  &_swigt__p_gcn__ActionEvent,
  &_swigt__p_gcn__Graphics,
  &_swigt__p_gcn__Widget,
  &_swigt__p_int,
  &_swigt__p_listTlove__particle_t,
  &_swigt__p_love__AbstractColor,
  &_swigt__p_love__AbstractDisplay,
  &_swigt__p_love__AbstractFont,
  &_swigt__p_love__AbstractGUI,
  &_swigt__p_love__AbstractGraphics,
  &_swigt__p_love__AbstractImage,
  &_swigt__p_love__AbstractMenu,
  &_swigt__p_love__AbstractMusic,
  &_swigt__p_love__AbstractSound,
  &_swigt__p_love__AbstractSoundDevice,
  &_swigt__p_love__Bezier,
  &_swigt__p_love__Button,
  &_swigt__p_love__CheckBox,
  &_swigt__p_love__DisplayMode,
  &_swigt__p_love__DropDown,
  &_swigt__p_love__Event,
  &_swigt__p_love__FrameAnimation,
  &_swigt__p_love__GUIContainer,
  &_swigt__p_love__GUIElement,
  &_swigt__p_love__GUIEvent,
  &_swigt__p_love__Keyboard,
  &_swigt__p_love__Label,
  &_swigt__p_love__ListBox,
  &_swigt__p_love__LuaGL,
  &_swigt__p_love__LuaGame,
  &_swigt__p_love__Menu,
  &_swigt__p_love__MessageEvent,
  &_swigt__p_love__Mouse,
  &_swigt__p_love__MultilineLabel,
  &_swigt__p_love__Object,
  &_swigt__p_love__ObjectFactory,
  &_swigt__p_love__Padded,
  &_swigt__p_love__ParticleSystem,
  &_swigt__p_love__RadioButton,
  &_swigt__p_love__Slider,
  &_swigt__p_love__Sprite,
  &_swigt__p_love__TextBox,
  &_swigt__p_love__TextField,
  &_swigt__p_love__Timer,
  &_swigt__p_love__Updateable,
  &_swigt__p_love__interval,
  &_swigt__p_love__particle,
  &_swigt__p_pAbstractImage,
  &_swigt__p_pAbstractMusic,
  &_swigt__p_pAbstractSound,
  &_swigt__p_pAnimatedColor,
  &_swigt__p_pBezier,
  &_swigt__p_pEvent,
  &_swigt__p_pSprite,
  &_swigt__p_string,
  &_swigt__string,
};

static swig_cast_info _swigc__Vector[] = {  {&_swigt__Vector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__boost__shared_ptrTlove__AbstractColor_t[] = {  {&_swigt__boost__shared_ptrTlove__AbstractColor_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__boost__shared_ptrTlove__AbstractFont_t[] = {  {&_swigt__boost__shared_ptrTlove__AbstractFont_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__love__DisplayMode[] = {  {&_swigt__love__DisplayMode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__pEvent[] = {  {&_swigt__pEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Color[] = {  {&_swigt__p_Color, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GUIList[] = {  {&_swigt__p_GUIList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Vector[] = {  {&_swigt__p_Vector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrTlove__AbstractColor_t[] = {  {&_swigt__p_boost__shared_ptrTlove__AbstractColor_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrTlove__AbstractDisplay_t[] = {  {&_swigt__p_boost__shared_ptrTlove__AbstractDisplay_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrTlove__AbstractFont_t[] = {  {&_swigt__p_boost__shared_ptrTlove__AbstractFont_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrTlove__AbstractGraphics_t[] = {  {&_swigt__p_boost__shared_ptrTlove__AbstractGraphics_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrTlove__AbstractImage_t[] = {  {&_swigt__p_boost__shared_ptrTlove__AbstractImage_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrTlove__AbstractMenu_t[] = {  {&_swigt__p_boost__shared_ptrTlove__AbstractMenu_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrTlove__AbstractMusic_t[] = {  {&_swigt__p_boost__shared_ptrTlove__AbstractMusic_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrTlove__AbstractSoundDevice_t[] = {  {&_swigt__p_boost__shared_ptrTlove__AbstractSoundDevice_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrTlove__AbstractSound_t[] = {  {&_swigt__p_boost__shared_ptrTlove__AbstractSound_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrTlove__Bezier_t[] = {  {&_swigt__p_boost__shared_ptrTlove__Bezier_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrTlove__Button_t[] = {  {&_swigt__p_boost__shared_ptrTlove__Button_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrTlove__CheckBox_t[] = {  {&_swigt__p_boost__shared_ptrTlove__CheckBox_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrTlove__DisplayMode_t[] = {  {&_swigt__p_boost__shared_ptrTlove__DisplayMode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrTlove__DropDown_t[] = {  {&_swigt__p_boost__shared_ptrTlove__DropDown_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrTlove__Event_t[] = {  {&_swigt__p_boost__shared_ptrTlove__Event_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrTlove__FrameAnimation_t[] = {  {&_swigt__p_boost__shared_ptrTlove__FrameAnimation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrTlove__GUIElement_t[] = {  {&_swigt__p_boost__shared_ptrTlove__GUIElement_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrTlove__GUIEvent_t[] = {  {&_swigt__p_boost__shared_ptrTlove__GUIEvent_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrTlove__Label_t[] = {  {&_swigt__p_boost__shared_ptrTlove__Label_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrTlove__ListBox_t[] = {  {&_swigt__p_boost__shared_ptrTlove__ListBox_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrTlove__LuaGL_t[] = {  {&_swigt__p_boost__shared_ptrTlove__LuaGL_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrTlove__Menu_t[] = {  {&_swigt__p_boost__shared_ptrTlove__Menu_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrTlove__MessageEvent_t[] = {  {&_swigt__p_boost__shared_ptrTlove__MessageEvent_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrTlove__MultilineLabel_t[] = {  {&_swigt__p_boost__shared_ptrTlove__MultilineLabel_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrTlove__ObjectFactory_t[] = {  {&_swigt__p_boost__shared_ptrTlove__ObjectFactory_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrTlove__ParticleSystem_t[] = {  {&_swigt__p_boost__shared_ptrTlove__ParticleSystem_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrTlove__RadioButton_t[] = {  {&_swigt__p_boost__shared_ptrTlove__RadioButton_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrTlove__Slider_t[] = {  {&_swigt__p_boost__shared_ptrTlove__Slider_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrTlove__TextBox_t[] = {  {&_swigt__p_boost__shared_ptrTlove__TextBox_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrTlove__TextField_t[] = {  {&_swigt__p_boost__shared_ptrTlove__TextField_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrTlove__Timer_t[] = {  {&_swigt__p_boost__shared_ptrTlove__Timer_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gcn__ActionEvent[] = {  {&_swigt__p_gcn__ActionEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gcn__Graphics[] = {  {&_swigt__p_gcn__Graphics, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gcn__Widget[] = {  {&_swigt__p_gcn__Widget, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_listTlove__particle_t[] = {  {&_swigt__p_listTlove__particle_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_love__AbstractColor[] = {  {&_swigt__p_love__AbstractColor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_love__AbstractDisplay[] = {  {&_swigt__p_love__AbstractDisplay, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_love__AbstractFont[] = {  {&_swigt__p_love__AbstractFont, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_love__AbstractGUI[] = {  {&_swigt__p_love__AbstractGUI, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_love__AbstractGraphics[] = {  {&_swigt__p_love__AbstractGraphics, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_love__AbstractImage[] = {  {&_swigt__p_love__AbstractImage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_love__AbstractMenu[] = {  {&_swigt__p_love__Menu, _p_love__MenuTo_p_love__AbstractMenu, 0, 0},  {&_swigt__p_love__AbstractMenu, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_love__AbstractMusic[] = {  {&_swigt__p_love__AbstractMusic, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_love__AbstractSound[] = {  {&_swigt__p_love__AbstractSound, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_love__AbstractSoundDevice[] = {  {&_swigt__p_love__AbstractSoundDevice, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_love__Bezier[] = {  {&_swigt__p_love__Bezier, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_love__Button[] = {  {&_swigt__p_love__Button, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_love__CheckBox[] = {  {&_swigt__p_love__CheckBox, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_love__DisplayMode[] = {  {&_swigt__p_love__DisplayMode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_love__DropDown[] = {  {&_swigt__p_love__DropDown, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_love__Event[] = {  {&_swigt__p_love__MessageEvent, _p_love__MessageEventTo_p_love__Event, 0, 0},  {&_swigt__p_love__Event, 0, 0, 0},  {&_swigt__p_love__GUIEvent, _p_love__GUIEventTo_p_love__Event, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_love__FrameAnimation[] = {  {&_swigt__p_love__FrameAnimation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_love__GUIContainer[] = {  {&_swigt__p_love__GUIContainer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_love__GUIElement[] = {  {&_swigt__p_love__GUIElement, 0, 0, 0},  {&_swigt__p_love__MultilineLabel, _p_love__MultilineLabelTo_p_love__GUIElement, 0, 0},  {&_swigt__p_love__Label, _p_love__LabelTo_p_love__GUIElement, 0, 0},  {&_swigt__p_love__TextBox, _p_love__TextBoxTo_p_love__GUIElement, 0, 0},  {&_swigt__p_love__Menu, _p_love__MenuTo_p_love__GUIElement, 0, 0},  {&_swigt__p_love__Button, _p_love__ButtonTo_p_love__GUIElement, 0, 0},  {&_swigt__p_love__RadioButton, _p_love__RadioButtonTo_p_love__GUIElement, 0, 0},  {&_swigt__p_love__ListBox, _p_love__ListBoxTo_p_love__GUIElement, 0, 0},  {&_swigt__p_love__DropDown, _p_love__DropDownTo_p_love__GUIElement, 0, 0},  {&_swigt__p_love__AbstractMenu, _p_love__AbstractMenuTo_p_love__GUIElement, 0, 0},  {&_swigt__p_love__TextField, _p_love__TextFieldTo_p_love__GUIElement, 0, 0},  {&_swigt__p_love__Slider, _p_love__SliderTo_p_love__GUIElement, 0, 0},  {&_swigt__p_love__CheckBox, _p_love__CheckBoxTo_p_love__GUIElement, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_love__GUIEvent[] = {  {&_swigt__p_love__GUIEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_love__Keyboard[] = {  {&_swigt__p_love__Keyboard, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_love__Label[] = {  {&_swigt__p_love__MultilineLabel, _p_love__MultilineLabelTo_p_love__Label, 0, 0},  {&_swigt__p_love__Label, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_love__ListBox[] = {  {&_swigt__p_love__ListBox, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_love__LuaGL[] = {  {&_swigt__p_love__LuaGL, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_love__LuaGame[] = {  {&_swigt__p_love__LuaGame, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_love__Menu[] = {  {&_swigt__p_love__Menu, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_love__MessageEvent[] = {  {&_swigt__p_love__MessageEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_love__Mouse[] = {  {&_swigt__p_love__Mouse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_love__MultilineLabel[] = {  {&_swigt__p_love__MultilineLabel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_love__Object[] = {  {&_swigt__p_love__MessageEvent, _p_love__MessageEventTo_p_love__Object, 0, 0},  {&_swigt__p_love__LuaGL, _p_love__LuaGLTo_p_love__Object, 0, 0},  {&_swigt__p_love__Event, _p_love__EventTo_p_love__Object, 0, 0},  {&_swigt__p_love__GUIEvent, _p_love__GUIEventTo_p_love__Object, 0, 0},  {&_swigt__p_love__AbstractFont, _p_love__AbstractFontTo_p_love__Object, 0, 0},  {&_swigt__p_love__AbstractColor, _p_love__AbstractColorTo_p_love__Object, 0, 0},  {&_swigt__p_love__AbstractMusic, _p_love__AbstractMusicTo_p_love__Object, 0, 0},  {&_swigt__p_love__Object, 0, 0, 0},  {&_swigt__p_love__AbstractSound, _p_love__AbstractSoundTo_p_love__Object, 0, 0},  {&_swigt__p_love__DisplayMode, _p_love__DisplayModeTo_p_love__Object, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_love__ObjectFactory[] = {  {&_swigt__p_love__ObjectFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_love__Padded[] = {  {&_swigt__p_love__Padded, 0, 0, 0},  {&_swigt__p_love__Menu, _p_love__MenuTo_p_love__Padded, 0, 0},  {&_swigt__p_love__AbstractMenu, _p_love__AbstractMenuTo_p_love__Padded, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_love__ParticleSystem[] = {  {&_swigt__p_love__ParticleSystem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_love__RadioButton[] = {  {&_swigt__p_love__RadioButton, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_love__Slider[] = {  {&_swigt__p_love__Slider, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_love__Sprite[] = {  {&_swigt__p_love__AbstractImage, _p_love__AbstractImageTo_p_love__Sprite, 0, 0},  {&_swigt__p_love__Sprite, 0, 0, 0},  {&_swigt__p_love__FrameAnimation, _p_love__FrameAnimationTo_p_love__Sprite, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_love__TextBox[] = {  {&_swigt__p_love__TextBox, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_love__TextField[] = {  {&_swigt__p_love__TextField, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_love__Timer[] = {  {&_swigt__p_love__Timer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_love__Updateable[] = {  {&_swigt__p_love__Updateable, 0, 0, 0},  {&_swigt__p_love__AbstractColor, _p_love__AbstractColorTo_p_love__Updateable, 0, 0},  {&_swigt__p_love__AbstractGUI, _p_love__AbstractGUITo_p_love__Updateable, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_love__interval[] = {  {&_swigt__p_love__interval, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_love__particle[] = {  {&_swigt__p_love__particle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pAbstractImage[] = {  {&_swigt__p_pAbstractImage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pAbstractMusic[] = {  {&_swigt__p_pAbstractMusic, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pAbstractSound[] = {  {&_swigt__p_pAbstractSound, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pAnimatedColor[] = {  {&_swigt__p_pAnimatedColor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pBezier[] = {  {&_swigt__p_pBezier, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pEvent[] = {  {&_swigt__p_pEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pSprite[] = {  {&_swigt__p_pSprite, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_string[] = {  {&_swigt__p_string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__string[] = {  {&_swigt__string, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__Vector,
  _swigc__boost__shared_ptrTlove__AbstractColor_t,
  _swigc__boost__shared_ptrTlove__AbstractFont_t,
  _swigc__love__DisplayMode,
  _swigc__pEvent,
  _swigc__p_Color,
  _swigc__p_GUIList,
  _swigc__p_Vector,
  _swigc__p_boost__shared_ptrTlove__AbstractColor_t,
  _swigc__p_boost__shared_ptrTlove__AbstractDisplay_t,
  _swigc__p_boost__shared_ptrTlove__AbstractFont_t,
  _swigc__p_boost__shared_ptrTlove__AbstractGraphics_t,
  _swigc__p_boost__shared_ptrTlove__AbstractImage_t,
  _swigc__p_boost__shared_ptrTlove__AbstractMenu_t,
  _swigc__p_boost__shared_ptrTlove__AbstractMusic_t,
  _swigc__p_boost__shared_ptrTlove__AbstractSoundDevice_t,
  _swigc__p_boost__shared_ptrTlove__AbstractSound_t,
  _swigc__p_boost__shared_ptrTlove__Bezier_t,
  _swigc__p_boost__shared_ptrTlove__Button_t,
  _swigc__p_boost__shared_ptrTlove__CheckBox_t,
  _swigc__p_boost__shared_ptrTlove__DisplayMode_t,
  _swigc__p_boost__shared_ptrTlove__DropDown_t,
  _swigc__p_boost__shared_ptrTlove__Event_t,
  _swigc__p_boost__shared_ptrTlove__FrameAnimation_t,
  _swigc__p_boost__shared_ptrTlove__GUIElement_t,
  _swigc__p_boost__shared_ptrTlove__GUIEvent_t,
  _swigc__p_boost__shared_ptrTlove__Label_t,
  _swigc__p_boost__shared_ptrTlove__ListBox_t,
  _swigc__p_boost__shared_ptrTlove__LuaGL_t,
  _swigc__p_boost__shared_ptrTlove__Menu_t,
  _swigc__p_boost__shared_ptrTlove__MessageEvent_t,
  _swigc__p_boost__shared_ptrTlove__MultilineLabel_t,
  _swigc__p_boost__shared_ptrTlove__ObjectFactory_t,
  _swigc__p_boost__shared_ptrTlove__ParticleSystem_t,
  _swigc__p_boost__shared_ptrTlove__RadioButton_t,
  _swigc__p_boost__shared_ptrTlove__Slider_t,
  _swigc__p_boost__shared_ptrTlove__TextBox_t,
  _swigc__p_boost__shared_ptrTlove__TextField_t,
  _swigc__p_boost__shared_ptrTlove__Timer_t,
  _swigc__p_gcn__ActionEvent,
  _swigc__p_gcn__Graphics,
  _swigc__p_gcn__Widget,
  _swigc__p_int,
  _swigc__p_listTlove__particle_t,
  _swigc__p_love__AbstractColor,
  _swigc__p_love__AbstractDisplay,
  _swigc__p_love__AbstractFont,
  _swigc__p_love__AbstractGUI,
  _swigc__p_love__AbstractGraphics,
  _swigc__p_love__AbstractImage,
  _swigc__p_love__AbstractMenu,
  _swigc__p_love__AbstractMusic,
  _swigc__p_love__AbstractSound,
  _swigc__p_love__AbstractSoundDevice,
  _swigc__p_love__Bezier,
  _swigc__p_love__Button,
  _swigc__p_love__CheckBox,
  _swigc__p_love__DisplayMode,
  _swigc__p_love__DropDown,
  _swigc__p_love__Event,
  _swigc__p_love__FrameAnimation,
  _swigc__p_love__GUIContainer,
  _swigc__p_love__GUIElement,
  _swigc__p_love__GUIEvent,
  _swigc__p_love__Keyboard,
  _swigc__p_love__Label,
  _swigc__p_love__ListBox,
  _swigc__p_love__LuaGL,
  _swigc__p_love__LuaGame,
  _swigc__p_love__Menu,
  _swigc__p_love__MessageEvent,
  _swigc__p_love__Mouse,
  _swigc__p_love__MultilineLabel,
  _swigc__p_love__Object,
  _swigc__p_love__ObjectFactory,
  _swigc__p_love__Padded,
  _swigc__p_love__ParticleSystem,
  _swigc__p_love__RadioButton,
  _swigc__p_love__Slider,
  _swigc__p_love__Sprite,
  _swigc__p_love__TextBox,
  _swigc__p_love__TextField,
  _swigc__p_love__Timer,
  _swigc__p_love__Updateable,
  _swigc__p_love__interval,
  _swigc__p_love__particle,
  _swigc__p_pAbstractImage,
  _swigc__p_pAbstractMusic,
  _swigc__p_pAbstractSound,
  _swigc__p_pAnimatedColor,
  _swigc__p_pBezier,
  _swigc__p_pEvent,
  _swigc__p_pSprite,
  _swigc__p_string,
  _swigc__string,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop though that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head;
  static int init_run = 0;

  clientdata = clientdata;

  if (init_run) return;
  init_run = 1;

  /* Initialize the swig_module */
  swig_module.type_initial = swig_type_initial;
  swig_module.cast_initial = swig_cast_initial;

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (module_head) {
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  } else {
    /* This is the first module loaded */
    swig_module.next = &swig_module;
    SWIG_SetModule(clientdata, &swig_module);
  }
		 
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
  
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
#ifdef __cplusplus
extern "C" {
#endif
void SWIG_init_user(lua_State* L );

/* this is the initialization function
	added at the very end of the code
	the function is always called SWIG_init, but an eariler #define will rename it
*/
SWIGEXPORT int SWIG_init(lua_State* L)
{
	int i;

	/* start with global table */
	lua_pushvalue(L,LUA_GLOBALSINDEX);

	SWIG_InitializeModule((void*)L);
	SWIG_PropagateClientData();

	/* invoke user-specific initialization */
	SWIG_init_user(L);

	/* add a global fn */
	SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
	SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_equal);

	/* begin the module (its a table with the same name as the module) */
	SWIG_Lua_module_begin(L,SWIG_name);
	/* add commands/functions */
	for (i = 0; swig_commands[i].name; i++){
		SWIG_Lua_module_add_function(L,swig_commands[i].name,swig_commands[i].func);
	}
	/*luaL_openlib(L,NULL,swig_commands,0);*/
	/* all in one */
	/*luaL_openlib(L,SWIG_name,swig_commands,0);*/
	/* add variables */
	for (i = 0; swig_variables[i].name; i++){
		SWIG_Lua_module_add_variable(L,swig_variables[i].name,swig_variables[i].get,swig_variables[i].set);
	}

	/* additional registration structs & classes in lua: */
	for (i = 0; swig_types[i]; i++){
		if (swig_types[i]->clientdata){
			SWIG_Lua_class_register(L,(swig_lua_class*)(swig_types[i]->clientdata));
		}
	}

	/* constants */
	SWIG_Lua_InstallConstants(L,swig_constants);

	/* end module */
	/*SWIG_Lua_module_end(L);*/
	lua_pop(L,1);  /* tidy stack (remove module table)*/
	lua_pop(L,1);  /* tidy stack (remove global table)*/

	return 1;
}

/* Lua 5.1 has a different name for importing libraries
luaopen_XXX, where XXX is the name of the module (not capitalised)
this function will allow Lua 5.1 to import correctly.
There is a #define in the wrapper to rename 'SWIG_import' to the correct name
*/

SWIGEXPORT int SWIG_import(lua_State* L)
{
	return SWIG_init(L);
}

#ifdef __cplusplus
}
#endif


#ifdef __cplusplus
extern "C"
#endif
void SWIG_init_user(lua_State* L)
{
  
}

#include "lua_glue_bot.h" 


// Made by AutoLOVE
// ENABLE WARNINGS PLZ
#pragma warning( pop )