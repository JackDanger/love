/*
* LOVE: Totally Awesome 2D Gaming.
* Website: http://love.sourceforge.net
* Licence: ZLIB/libpng
* Copyright © 2006-2008 LOVE Development Team
*/


// Made by AutoLOVE
// IGNORE WARNINGS PLZ
#ifdef WIN32
#pragma warning( push )
#pragma warning ( disable : 4005)
#pragma warning ( disable : 4244)
#pragma warning ( disable : 4102)
#pragma warning ( disable : 4800)
#endif

#include <list>
#include <string>
using std::list;
using std::string;

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.29
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC)
#   if (__SUNPRO_CC <= 0x560)
#     define SWIGTEMPLATEDISAMBIGUATOR template
#   else
#     define SWIGTEMPLATEDISAMBIGUATOR 
#   endif
# else
#   define SWIGTEMPLATEDISAMBIGUATOR 
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic CAPI SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "2"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The swig conversion methods, as ConvertPtr, return and integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old swig versions, you usually write code as:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit as:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   that seems to be the same, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   requires also to SWIG_ConvertPtr to return new result values, as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   swig errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()


 */
#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))


/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif




#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store inforomation on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (l1 - f1) - (l2 - f2);
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/* think of this as a c++ template<> or a scheme macro */
#define SWIG_TypeCheck_Template(comparison, ty)         \
  if (ty) {                                             \
    swig_cast_info *iter = ty->cast;                    \
    while (iter) {                                      \
      if (comparison) {                                 \
        if (iter == ty->cast) return iter;              \
        /* Move iter to the top of the linked list */   \
        iter->prev->next = iter->next;                  \
        if (iter->next)                                 \
          iter->next->prev = iter->prev;                \
        iter->next = ty->cast;                          \
        iter->prev = 0;                                 \
        if (ty->cast) ty->cast->prev = iter;            \
        ty->cast = iter;                                \
        return iter;                                    \
      }                                                 \
      iter = iter->next;                                \
    }                                                   \
  }                                                     \
  return 0

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  SWIG_TypeCheck_Template(strcmp(iter->type->name, c) == 0, ty);
}

/* Same as previous function, except strcmp is replaced with a pointer comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *into) {
  SWIG_TypeCheck_Template(iter->type == from, into);
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <assert.h>	/* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5

/* Structure for command table (replaced by luaLib's luaL_reg) */
/*typedef struct {
  const char *name;
  lua_CFunction wrapper;
} swig_lua_command_info;*/

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

typedef struct {
  const char     *name;
  lua_CFunction   method;
} swig_lua_method;

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;

typedef struct swig_lua_class {
  const char         *name;
  swig_type_info   **type;
  lua_CFunction       constructor;
  void              (*destructor)(void *);
  swig_lua_method        *methods;
  swig_lua_attribute     *attributes;
  struct swig_lua_class **bases;
} swig_lua_class;

typedef struct {
  void             *ptr;
  swig_type_info   *type;
  int               own;	/* 1 if owned & must be destroyed */
} swig_lua_userdata;


/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner) \
  SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags) \
	SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname) \
	SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { lua_pushstring(L, (char *) msg); goto fail; } else



/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(I) {lua_pushfstring(L,"argument %d incorrect/missing",I);goto fail;}

#define SWIG_Lua_get_table(L,n) \
	(lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
		   (lua_pushstring(L, n), \
			lua_pushcfunction(L, f), \
			lua_rawset(L,-3))

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* the module.get method used for getting linked data */
SWIGINTERN int SWIG_Lua_module_get(lua_State* L)
{
/*	there should be 2 params passed in
	(1) table (not the meta table)
	(2) string name of the attribute
	printf("SWIG_Lua_module_get %p(%s) '%s'\n",
				lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
				lua_tostring(L,2));
*/
	/* get the metatable */
	assert(lua_istable(L,1));	/* just in case */
	lua_getmetatable(L,1);	/* get the metatable */
	assert(lua_istable(L,-1));	/* just in case */
	SWIG_Lua_get_table(L,".get");	/* get the .get table */
	lua_remove(L,3);	/* remove metatable */
	if (lua_istable(L,-1))
	{
		/* look for the key in the .get table */
		lua_pushvalue(L,2);  /* key */
		lua_rawget(L,-2);
		lua_remove(L,3);	/* remove .get */
		if (lua_iscfunction(L,-1))
		{	/* found it so call the fn & return its value */
			lua_call(L,0,1);
			return 1;
		}
		lua_pop(L,1);	/* remove the top */
	}
	lua_pop(L,1);	/* remove the .get */
	lua_pushnil(L);	/* return a nil */
    return 1;
}

/* the module.set method used for setting linked data */
SWIGINTERN int SWIG_Lua_module_set(lua_State* L)
{
/*	there should be 3 params passed in
	(1) table (not the meta table)
	(2) string name of the attribute
	(3) any for the new value
*/
	/* get the metatable */
	assert(lua_istable(L,1));	/* just in case */
	lua_getmetatable(L,1);	/* get the metatable */
	assert(lua_istable(L,-1));	/* just in case */
	SWIG_Lua_get_table(L,".set");	/* get the .set table */
	lua_remove(L,4);	/* remove metatable */
	if (lua_istable(L,-1))
	{
		/* look for the key in the .set table */
		lua_pushvalue(L,2);  /* key */
		lua_rawget(L,-2);
		lua_remove(L,4);	/* remove .set */
		if (lua_iscfunction(L,-1))
		{	/* found it so call the fn & return its value */
			lua_pushvalue(L,3);  /* value */
			lua_call(L,1,0);
			return 0;
		}
		lua_pop(L,1);	/* remove the top */
	}
	lua_pop(L,1);	/* remove the .set */
    return 0;
}

/* registering a module in lua */
SWIGINTERN void  SWIG_Lua_module_begin(lua_State* L,const char* name)
{
	assert(lua_istable(L,-1));	/* just in case */
	lua_pushstring(L,name);
	lua_newtable(L);				/* the table */
	/* add meta table */
	lua_newtable(L);		/* the meta table */
	SWIG_Lua_add_function(L,"__index",SWIG_Lua_module_get);
	SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_module_set);
	lua_pushstring(L,".get");
	lua_newtable(L);		/* the .get table */
	lua_rawset(L,-3);       /* add .get into metatable */
	lua_pushstring(L,".set");
	lua_newtable(L);		/* the .set table */
	lua_rawset(L,-3);       /* add .set into metatable */
	lua_setmetatable(L,-2);	/* sets meta table in module */
	lua_rawset(L,-3);                  /* add module into parent */
	SWIG_Lua_get_table(L,name);				/* get the table back out */
}

/* ending the register */
SWIGINTERN void  SWIG_Lua_module_end(lua_State* L)
{
	lua_pop(L,1);                      /* tidy stack (remove module) */
}

/* adding a linked variable to the module */
SWIGINTERN void SWIG_Lua_module_add_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
	assert(lua_istable(L,-1));	/* just in case */
	lua_getmetatable(L,-1);	/* get the metatable */
	assert(lua_istable(L,-1));	/* just in case */
	SWIG_Lua_get_table(L,".get"); /* find the .get table */
	assert(lua_istable(L,-1));	/* should be a table: */
	SWIG_Lua_add_function(L,name,getFn);
	lua_pop(L,1);                      /* tidy stack (remove table) */
	if (setFn)	/* if there is a set fn */
	{
		SWIG_Lua_get_table(L,".set"); /* find the .set table */
		assert(lua_istable(L,-1));	/* should be a table: */
		SWIG_Lua_add_function(L,name,setFn);
		lua_pop(L,1);                      /* tidy stack (remove table) */
	}
	lua_pop(L,1);                      /* tidy stack (remove meta) */
}

/* adding a function module */
SWIGINTERN void  SWIG_Lua_module_add_function(lua_State* L,const char* name,lua_CFunction fn)
{
	SWIG_Lua_add_function(L,name,fn);
}

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

/* the class.get method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_get(lua_State* L)
{
/*	there should be 2 params passed in
	(1) userdata (not the meta table)
	(2) string name of the attribute
*/
	assert(lua_isuserdata(L,-2));	/* just in case */
	lua_getmetatable(L,-2);		/* get the meta table */
	assert(lua_istable(L,-1));	/* just in case */
	SWIG_Lua_get_table(L,".get"); /* find the .get table */
	assert(lua_istable(L,-1));	/* just in case */
	/* look for the key in the .get table */
	lua_pushvalue(L,2);  /* key */
	lua_rawget(L,-2);
	lua_remove(L,-2); /* stack tidy, remove .get table */
	if (lua_iscfunction(L,-1))
	{	/* found it so call the fn & return its value */
		lua_pushvalue(L,1);  /* the userdata */
		lua_call(L,1,1);	/* 1 value in (userdata),1 out (result) */
		lua_remove(L,-2); /* stack tidy, remove metatable */
		return 1;
	}
	lua_pop(L,1);	/* remove whatever was there */
	/* ok, so try the .fn table */
	SWIG_Lua_get_table(L,".fn"); /* find the .get table */
	assert(lua_istable(L,-1));	/* just in case */
	lua_pushvalue(L,2);  /* key */
	lua_rawget(L,-2);	/* look for the fn */
	lua_remove(L,-2); /* stack tidy, remove .fn table */
	if (lua_iscfunction(L,-1))
	{	/* found it so return the fn & let lua call it */
		lua_remove(L,-2); /* stack tidy, remove metatable */
		return 1;
	}
	lua_pop(L,1);	/* remove whatever was there */
	/* NEW: looks for the __getitem() fn
	this is a user provided get fn */
	SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
	if (lua_iscfunction(L,-1))	/* if its there */
	{	/* found it so call the fn & return its value */
		lua_pushvalue(L,1);  /* the userdata */
		lua_pushvalue(L,2);  /* the parameter */
		lua_call(L,2,1);	/* 2 value in (userdata),1 out (result) */
		lua_remove(L,-2); /* stack tidy, remove metatable */
		return 1;
	}
	return 0;	/* sorry not known */
}

/* the class.set method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_set(lua_State* L)
{
/*	there should be 3 params passed in
	(1) table (not the meta table)
	(2) string name of the attribute
	(3) any for the new value
printf("SWIG_Lua_class_set %p(%s) '%s' %p(%s)\n",
			lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
			lua_tostring(L,2),
			lua_topointer(L,3),lua_typename(L,lua_type(L,3)));*/

	assert(lua_isuserdata(L,1));	/* just in case */
	lua_getmetatable(L,1);		/* get the meta table */
	assert(lua_istable(L,-1));	/* just in case */

	SWIG_Lua_get_table(L,".set"); /* find the .set table */
	if (lua_istable(L,-1))
	{
		/* look for the key in the .set table */
		lua_pushvalue(L,2);  /* key */
		lua_rawget(L,-2);
		if (lua_iscfunction(L,-1))
		{	/* found it so call the fn & return its value */
			lua_pushvalue(L,1);  /* userdata */
			lua_pushvalue(L,3);  /* value */
			lua_call(L,2,0);
			return 0;
		}
		lua_pop(L,1);	/* remove the value */
	}
	lua_pop(L,1);	/* remove the value .set table */
	/* NEW: looks for the __setitem() fn
	this is a user provided set fn */
	SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
	if (lua_iscfunction(L,-1))	/* if its there */
	{	/* found it so call the fn & return its value */
		lua_pushvalue(L,1);  /* the userdata */
		lua_pushvalue(L,2);  /* the parameter */
		lua_pushvalue(L,3);  /* the value */
		lua_call(L,3,0);	/* 3 values in ,0 out */
		lua_remove(L,-2); /* stack tidy, remove metatable */
		return 1;
	}
	return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State* L)
{
/*	there should be 1 params passed in
	(1) userdata (not the meta table) */
	swig_lua_userdata* usr;
	swig_lua_class* clss;
	assert(lua_isuserdata(L,-1));	/* just in case */
	usr=(swig_lua_userdata*)lua_touserdata(L,-1);	/* get it */
	/* if must be destroyed & has a destructor */
	if (usr->own) /* if must be destroyed */
	{
		clss=(swig_lua_class*)usr->type->clientdata;	/* get the class */
		if (clss && clss->destructor)	/* there is a destroy fn */
		{
			clss->destructor(usr->ptr);	/* bye bye */
		}
	}
	return 0;
}

/* gets the swig class registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State* L)
{
	/* add this all into the swig registry: */
	lua_pushstring(L,"SWIG");
	lua_rawget(L,LUA_REGISTRYINDEX);	/* get the registry */
	if (!lua_istable(L,-1))	/* not there */
	{	/* must be first time, so add it */
		lua_pop(L,1);	/* remove the result */
		lua_pushstring(L,"SWIG");
		lua_newtable(L);
		lua_rawset(L,LUA_REGISTRYINDEX);
		/* then get it */
		lua_pushstring(L,"SWIG");
		lua_rawget(L,LUA_REGISTRYINDEX);
	}
}

/* helper fn to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State* L,const char* cname)
{
	SWIG_Lua_get_class_registry(L);	/* get the registry */
	lua_pushstring(L,cname);	/* get the name */
	lua_rawget(L,-2);		/* get it */
	lua_remove(L,-2);		/* tidy up (remove registry) */
}

/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_class_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
	assert(lua_istable(L,-1));	/* just in case */
	SWIG_Lua_get_table(L,".get"); /* find the .get table */
	assert(lua_istable(L,-1));	/* just in case */
	SWIG_Lua_add_function(L,name,getFn);
	lua_pop(L,1);                      /* tidy stack (remove table) */
	if (setFn)
	{
		SWIG_Lua_get_table(L,".set"); /* find the .set table */
		assert(lua_istable(L,-1));	/* just in case */
		SWIG_Lua_add_function(L,name,setFn);
		lua_pop(L,1);                      /* tidy stack (remove table) */
	}
}

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_details(lua_State* L,swig_lua_class* clss)
{
	int i;
	/* call all the base classes first: we can then override these later: */
	for(i=0;clss->bases[i];i++)
	{
		SWIG_Lua_add_class_details(L,clss->bases[i]);
	}
	/* add fns */
	for(i=0;clss->attributes[i].name;i++){
		SWIG_Lua_add_class_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
	}
	/* add methods to the metatable */
	SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
	assert(lua_istable(L,-1));	/* just in case */
	for(i=0;clss->methods[i].name;i++){
		SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
	}
	lua_pop(L,1);                      /* tidy stack (remove table) */
	/* 	add operator overloads
		these look ANY method which start with "__" and assume they
		are operator overloads & add them to the metatable
		(this might mess up is someone defines a method __gc (the destructor)*/
	for(i=0;clss->methods[i].name;i++){
		if (clss->methods[i].name[0]=='_' && clss->methods[i].name[1]=='_'){
			SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
		}
	}
}

/* performs the entire class registration process */
SWIGINTERN void  SWIG_Lua_class_register(lua_State* L,swig_lua_class* clss)
{
/*	add its constructor to module with the name of the class
	so you can do MyClass(...) as well as new_MyClass(...)
	BUT only if a constructor is defined
	(this overcomes the problem of pure virtual classes without constructors)*/
	if (clss->constructor)
		SWIG_Lua_add_function(L,clss->name,clss->constructor);

	SWIG_Lua_get_class_registry(L);	/* get the registry */
	lua_pushstring(L,clss->name);	/* get the name */
	lua_newtable(L);		/* create the metatable */
	/* add string of class name called ".type" */
	lua_pushstring(L,".type");
	lua_pushstring(L,clss->name);
	lua_rawset(L,-3);
	/* add a table called ".get" */
	lua_pushstring(L,".get");
	lua_newtable(L);
	lua_rawset(L,-3);
	/* add a table called ".set" */
	lua_pushstring(L,".set");
	lua_newtable(L);
	lua_rawset(L,-3);
	/* add a table called ".fn" */
	lua_pushstring(L,".fn");
	lua_newtable(L);
	lua_rawset(L,-3);
	/* add accessor fns for using the .get,.set&.fn */
	SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
	SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
	SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
	/* add it */
	lua_rawset(L,-3);	/* metatable into registry */
	lua_pop(L,1);           /* tidy stack (remove registry) */

	SWIG_Lua_get_class_metatable(L,clss->name);
	SWIG_Lua_add_class_details(L,clss);	/* recursive adding of details (atts & ops) */
	lua_pop(L,1);           /* tidy stack (remove class metatable) */
}

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State* L,void* ptr,swig_type_info *type, int own)
{
	swig_lua_userdata* usr;
	if (!ptr){
		lua_pushnil(L);
		return;
	}
	usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));	/* get data */
	usr->ptr=ptr;	/* set the ptr */
	usr->type=type;
	usr->own=own;
	if (type->clientdata)	/* there is clientdata: so add the metatable */
	{
		SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->name);
		if (lua_istable(L,-1))
		{
			lua_setmetatable(L,-2);
		}
		else
		{
			lua_pop(L,1);
		}
	}
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State* L,int index,void** ptr,swig_type_info *type,int flags)
{
	swig_lua_userdata* usr;
	swig_cast_info *cast;
	usr=(swig_lua_userdata*)lua_touserdata(L,index);	/* get data */
	if (usr)
	{
		cast=SWIG_TypeCheckStruct(usr->type,type);
		if (cast)
		{
			*ptr=SWIG_TypeCast(cast,usr->ptr);
			return 0;	/* ok */
		}
	}
	return 1;	/* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State* L,int index,swig_type_info *type,int flags,
						int argnum,const char* func_name){
	void* result;
	if (SWIG_ConvertPtr(L,index,&result,type,flags)){
		lua_pushfstring(L,"Error in %s, expected a %s at argument number %d\n",
			func_name,(type && type->str)?type->str:"void*",argnum);
		lua_error(L);
	}
	return result;
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State* L)
{
	swig_lua_userdata* usr;
	if (!lua_isuserdata(L,1))	/* just in case */
		return 0;	/* nil reply */
	usr=(swig_lua_userdata*)lua_touserdata(L,1);	/* get data */
	lua_pushstring(L,usr->type->name);
	return 1;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_equal(lua_State* L)
{
	int result;
	swig_lua_userdata *usr1,*usr2;
	if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))	/* just in case */
		return 0;	/* nil reply */
	usr1=(swig_lua_userdata*)lua_touserdata(L,1);	/* get data */
	usr2=(swig_lua_userdata*)lua_touserdata(L,2);	/* get data */
	result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type);
	lua_pushboolean(L,result);
	return 1;
}


/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State* L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(double)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(double)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
    /* TODO?? */
/*      obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype)); */
      break;
    default:
      break;
    }
  }
}

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State* L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
  	ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);	/* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State* L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */




/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_boost__shared_ptrTlove__Sprite_t swig_types[0]
#define SWIGTYPE_p_boost__shared_ptrTlove__Animation_t swig_types[1]
#define SWIGTYPE_p_boost__shared_ptrTlove__Color_t swig_types[2]
#define SWIGTYPE_p_boost__shared_ptrTlove__Font_t swig_types[3]
#define SWIGTYPE_p_boost__shared_ptrTlove__Image_t swig_types[4]
#define SWIGTYPE_p_boost__shared_ptrTlove__Music_t swig_types[5]
#define SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t swig_types[6]
#define SWIGTYPE_p_boost__shared_ptrTlove__Sound_t swig_types[7]
#define SWIGTYPE_p_boost__shared_ptrTlove__Sprite_t swig_types[8]
#define SWIGTYPE_p_love__Animation swig_types[9]
#define SWIGTYPE_p_love__Audio swig_types[10]
#define SWIGTYPE_p_love__Color swig_types[11]
#define SWIGTYPE_p_love__Device swig_types[12]
#define SWIGTYPE_p_love__Filesystem swig_types[13]
#define SWIGTYPE_p_love__Font swig_types[14]
#define SWIGTYPE_p_love__Graphics swig_types[15]
#define SWIGTYPE_p_love__Image swig_types[16]
#define SWIGTYPE_p_love__Keyboard swig_types[17]
#define SWIGTYPE_p_love__Mouse swig_types[18]
#define SWIGTYPE_p_love__Music swig_types[19]
#define SWIGTYPE_p_love__ObjectFactory swig_types[20]
#define SWIGTYPE_p_love__Particlesystem swig_types[21]
#define SWIGTYPE_p_love__Sound swig_types[22]
#define SWIGTYPE_p_love__Sprite swig_types[23]
#define SWIGTYPE_p_love__Timer swig_types[24]
static swig_type_info *swig_types[26];
static swig_module_info swig_module = {swig_types, 25, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Love_Init
#define SWIG_name    "love"
#define SWIG_import  luaopen_love



#include "Color.h"
SWIGINTERN char const *love_Color___str__(love::Color *self){
        static char buffer[255];
        sprintf(buffer,"Color(%i,%i,%i,%i)",
				self->getRed(), self->getGreen(), self->getBlue(), self->getAlpha());
        return buffer;
	}
#include "Device.h"
#include "Font.h"
#include "Sprite.h"
#include "Image.h"
#include "Animation.h"
#include "Particlesystem.h"
SWIGINTERN void love_Particlesystem_setSprite__SWIG_1(love::Particlesystem *self,love::pImage const *sprite){
		self->setSprite(*sprite);
	}
#include "Graphics.h"
SWIGINTERN void love_Graphics_setBackgroundColor__SWIG_1(love::Graphics *self,love::pColor const *color){
		self->setBackgroundColor(*color);
	}
SWIGINTERN void love_Graphics_setColor__SWIG_2(love::Graphics *self,love::pColor const *color){
		self->setColor(*color);
	}
SWIGINTERN void love_Graphics_setFont(love::Graphics *self,love::pFont const *font){
		self->setFont(*font);
	}
SWIGINTERN void love_Graphics_draw__SWIG_3(love::Graphics *self,love::pImage const *sprite,float x,float y){
		(*sprite)->render(x, y);
	}
SWIGINTERN void love_Graphics_draw__SWIG_4(love::Graphics *self,love::pImage const *sprite,float x,float y,float angle,float s=1.0f){
		(*sprite)->render(x, y, angle, s, s);
	}
SWIGINTERN void love_Graphics_draw__SWIG_6(love::Graphics *self,love::pImage const *sprite,float x,float y,float angle,float sx,float sy){
		(*sprite)->render(x, y, angle, sx, sy);
	}
SWIGINTERN void love_Graphics_draw__SWIG_7(love::Graphics *self,love::pAnimation const *sprite,float x,float y){
		(*sprite)->render(x, y);
	}
SWIGINTERN void love_Graphics_draw__SWIG_8(love::Graphics *self,love::pAnimation const *sprite,float x,float y,float angle,float s=1.0f){
		(*sprite)->render(x, y, angle, s, s);
	}
SWIGINTERN void love_Graphics_draw__SWIG_10(love::Graphics *self,love::pAnimation const *sprite,float x,float y,float angle,float sx,float sy){
		(*sprite)->render(x, y, angle, sx, sy);
	}
SWIGINTERN void love_Graphics_draw__SWIG_11(love::Graphics *self,love::pParticlesystem const *system){
		(*system)->render();
	}
SWIGINTERN void love_Graphics_draw__SWIG_12(love::Graphics *self,love::pParticlesystem const *system,float x,float y){
		(*system)->render(x, y);
	}
#include "Sound.h"
#include "Music.h"
#include "Audio.h"
SWIGINTERN void love_Audio_play__SWIG_0(love::Audio *self,love::pSound const *sound,int loop=1,int channel=-1){
		self->play(*sound, loop, channel);
	}
SWIGINTERN void love_Audio_play__SWIG_3(love::Audio *self,love::pMusic const *music,int loop=1){
		self->play(*music, loop);
	}

#include "using_game.h"
#include "LuaGame.h"
#include "Filesystem.h"

SWIGINTERN void love_Filesystem_include(love::Filesystem *self,char const *file){
		love::LuaGame * luagame = dynamic_cast<love::LuaGame *>(love::game);
		
		if(luagame != 0)
			luagame->include(std::string(file));
	}
#include "Timer.h"
#include "Mouse.h"
#include "Keyboard.h"


#include "love_mouse.h"
#include "love_blend.h"




#include "Graphics.h"
#include "Filesystem.h"
#include "Mouse.h"
#include "Keyboard.h"
#include "Game.h"
#include "Audio.h"
#include "Timer.h"

namespace love
{
	extern Graphics * graphics;
	extern Filesystem * filesystem;
	extern Mouse * mouse;
	extern Keyboard * keyboard;
	extern Audio * audio;
	extern Timer * timer;
	
	extern Game * game;
} // love








namespace love
{
	/**
	* Class definition.
	**/
	class ObjectFactory
	{
	public:
		
		pImage newImage(const char * filename)
		{
			pFile file(filesystem->newFile(game->getSource(), std::string(filename)));
			pImage img(graphics->newImage(file));
			img->load();
			return img;
		}
		
		pColor newColor(int r, int g, int b, int a = 255)
		{
			pColor c(new Color(r, g, b, a));
			return c;
		}
		
		pFont newFont(const char * filename, int size)
		{
			pFile file(filesystem->newFile(game->getSource(), std::string(filename)));
			pFont tmp(graphics->newFont(file, size));
			tmp->load();
			return tmp;
		}

		pFont newImageFont(const char * filename, const char * glyphs)
		{
			pFile file(filesystem->newFile(game->getSource(), std::string(filename)));
			pFont tmp(graphics->newImageFont(file, glyphs));
			tmp->load();
			return tmp;
		}
		
		pSound newSound(const char * filename)
		{
			pFile file(filesystem->newFile(game->getSource(), std::string(filename)));
			pSound tmp(audio->newSound(file));
			tmp->load();
			return tmp;			
		}
		
		pMusic newMusic(const char * filename)
		{
			pFile file(filesystem->newFile(game->getSource(), std::string(filename)));
			pMusic tmp(audio->newMusic(file));
			tmp->load();
			return tmp;		
		}
		
		pParticlesystem newParticlesystem()
		{
			pParticlesystem tmp = graphics->newParticlesystem();
			return tmp;
		}
		
		pAnimation newAnimation(const pImage * image)
		{
			pAnimation tmp(new Animation(*image));
			return tmp;
		}
		
		pAnimation newAnimation(const pImage * image, float fw, float fh, float delay, int num = 0)
		{
			pAnimation tmp(new Animation(*image, fw, fh, delay, num));
			return tmp;
		}
		
		
	};
	
	/**
	* Global "device".
	**/
	
	ObjectFactory objects;

} // LOVE


#ifdef __cplusplus
extern "C" {
#endif


static int _wrap_Color_getRed(lua_State* L) {
  int SWIG_arg = -1;
  love::Color *arg1 = (love::Color *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Color *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Color,0,1,"Color_getRed");
  result = (int)((love::Color const *)arg1)->getRed();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_getGreen(lua_State* L) {
  int SWIG_arg = -1;
  love::Color *arg1 = (love::Color *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Color *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Color,0,1,"Color_getGreen");
  result = (int)((love::Color const *)arg1)->getGreen();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_getBlue(lua_State* L) {
  int SWIG_arg = -1;
  love::Color *arg1 = (love::Color *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Color *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Color,0,1,"Color_getBlue");
  result = (int)((love::Color const *)arg1)->getBlue();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_getAlpha(lua_State* L) {
  int SWIG_arg = -1;
  love::Color *arg1 = (love::Color *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Color *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Color,0,1,"Color_getAlpha");
  result = (int)((love::Color const *)arg1)->getAlpha();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_update(lua_State* L) {
  int SWIG_arg = -1;
  love::Color *arg1 = (love::Color *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Color *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Color,0,1,"Color_update");
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->update(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color___tostring(lua_State* L) {
  int SWIG_arg = -1;
  love::Color *arg1 = (love::Color *) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Color *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Color,0,1,"Color___tostring");
  result = (char *)love_Color___str__(arg1);
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_Color(lua_State* L) {
  int SWIG_arg = -1;
  love::Color *arg1 = (love::Color *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Color *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Color,0,1,"delete_Color");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Color(void *obj) {
love::Color *arg1 = (love::Color *) obj;
delete arg1;
}
static swig_lua_method swig_love_Color_methods[] = {
    {"getRed", _wrap_Color_getRed}, 
    {"getGreen", _wrap_Color_getGreen}, 
    {"getBlue", _wrap_Color_getBlue}, 
    {"getAlpha", _wrap_Color_getAlpha}, 
    {"update", _wrap_Color_update}, 
    {"__tostring", _wrap_Color___tostring}, 
    {0,0}
};
static swig_lua_attribute swig_love_Color_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_love_Color_bases[] = {0};
swig_lua_class _wrap_class_love_Color = { "Color", &SWIGTYPE_p_love__Color,0, swig_delete_Color, swig_love_Color_methods, swig_love_Color_attributes, swig_love_Color_bases };

static int _wrap_SmartColor___deref__(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Color > *arg1 = (boost::shared_ptr<love::Color > *) 0 ;
  love::Color *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Color > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Color_t,0,1,"SmartColor___deref__");
  result = (love::Color *)((boost::shared_ptr<love::Color > const *)arg1)->operator ->();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__Color,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_SmartColor(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Color > *arg1 = (boost::shared_ptr<love::Color > *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Color > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Color_t,0,1,"delete_SmartColor");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartColor_getRed(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Color > *arg1 = (boost::shared_ptr<love::Color > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Color > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Color_t,0,1,"SmartColor_getRed");
  result = (int)(*arg1)->getRed();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartColor_getGreen(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Color > *arg1 = (boost::shared_ptr<love::Color > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Color > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Color_t,0,1,"SmartColor_getGreen");
  result = (int)(*arg1)->getGreen();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartColor_getBlue(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Color > *arg1 = (boost::shared_ptr<love::Color > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Color > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Color_t,0,1,"SmartColor_getBlue");
  result = (int)(*arg1)->getBlue();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartColor_getAlpha(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Color > *arg1 = (boost::shared_ptr<love::Color > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Color > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Color_t,0,1,"SmartColor_getAlpha");
  result = (int)(*arg1)->getAlpha();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartColor_update(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Color > *arg1 = (boost::shared_ptr<love::Color > *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Color > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Color_t,0,1,"SmartColor_update");
  arg2 = (float)lua_tonumber(L, 2);
  (*arg1)->update(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartColor___tostring(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Color > *arg1 = (boost::shared_ptr<love::Color > *) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Color > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Color_t,0,1,"SmartColor___tostring");
  result = (char *)love_Color___str__((love::Color*)(arg1)->operator ->());
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SmartColor(void *obj) {
boost::shared_ptr<love::Color > *arg1 = (boost::shared_ptr<love::Color > *) obj;
delete arg1;
}
static swig_lua_method swig_boost_shared_ptr_Sl_love_Color_Sg__methods[] = {
    {"__deref__", _wrap_SmartColor___deref__}, 
    {"getRed", _wrap_SmartColor_getRed}, 
    {"getGreen", _wrap_SmartColor_getGreen}, 
    {"getBlue", _wrap_SmartColor_getBlue}, 
    {"getAlpha", _wrap_SmartColor_getAlpha}, 
    {"update", _wrap_SmartColor_update}, 
    {"__tostring", _wrap_SmartColor___tostring}, 
    {0,0}
};
static swig_lua_attribute swig_boost_shared_ptr_Sl_love_Color_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_boost_shared_ptr_Sl_love_Color_Sg__bases[] = {0};
swig_lua_class _wrap_class_boost_shared_ptr_Sl_love_Color_Sg_ = { "SmartColor", &SWIGTYPE_p_boost__shared_ptrTlove__Color_t,0, swig_delete_SmartColor, swig_boost_shared_ptr_Sl_love_Color_Sg__methods, swig_boost_shared_ptr_Sl_love_Color_Sg__attributes, swig_boost_shared_ptr_Sl_love_Color_Sg__bases };

static int _wrap_delete_Device(lua_State* L) {
  int SWIG_arg = -1;
  love::Device *arg1 = (love::Device *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Device *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Device,0,1,"delete_Device");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Device(void *obj) {
love::Device *arg1 = (love::Device *) obj;
delete arg1;
}
static swig_lua_method swig_love_Device_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_love_Device_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_love_Device_bases[] = {0};
swig_lua_class _wrap_class_love_Device = { "Device", &SWIGTYPE_p_love__Device,0, swig_delete_Device, swig_love_Device_methods, swig_love_Device_attributes, swig_love_Device_bases };

static int _wrap_Font_getHeight(lua_State* L) {
  int SWIG_arg = -1;
  love::Font *arg1 = (love::Font *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Font *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Font,0,1,"Font_getHeight");
  result = (float)(arg1)->getHeight();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Font_getWidth(lua_State* L) {
  int SWIG_arg = -1;
  love::Font *arg1 = (love::Font *) 0 ;
  char *arg2 = (char *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(love::Font *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Font,0,1,"Font_getWidth");
  arg2 = (char*)lua_tostring(L, 2);
  result = (float)(arg1)->getWidth((char const *)arg2);
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_Font(lua_State* L) {
  int SWIG_arg = -1;
  love::Font *arg1 = (love::Font *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Font *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Font,0,1,"delete_Font");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Font(void *obj) {
love::Font *arg1 = (love::Font *) obj;
delete arg1;
}
static swig_lua_method swig_love_Font_methods[] = {
    {"getHeight", _wrap_Font_getHeight}, 
    {"getWidth", _wrap_Font_getWidth}, 
    {0,0}
};
static swig_lua_attribute swig_love_Font_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_love_Font_bases[] = {0};
swig_lua_class _wrap_class_love_Font = { "Font", &SWIGTYPE_p_love__Font,0, swig_delete_Font, swig_love_Font_methods, swig_love_Font_attributes, swig_love_Font_bases };

static int _wrap_SmartFont___deref__(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Font > *arg1 = (boost::shared_ptr<love::Font > *) 0 ;
  love::Font *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Font > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Font_t,0,1,"SmartFont___deref__");
  result = (love::Font *)((boost::shared_ptr<love::Font > const *)arg1)->operator ->();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__Font,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_SmartFont(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Font > *arg1 = (boost::shared_ptr<love::Font > *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Font > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Font_t,0,1,"delete_SmartFont");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartFont_getHeight(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Font > *arg1 = (boost::shared_ptr<love::Font > *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Font > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Font_t,0,1,"SmartFont_getHeight");
  result = (float)(*arg1)->getHeight();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartFont_getWidth(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Font > *arg1 = (boost::shared_ptr<love::Font > *) 0 ;
  char *arg2 = (char *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Font > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Font_t,0,1,"SmartFont_getWidth");
  arg2 = (char*)lua_tostring(L, 2);
  result = (float)(*arg1)->getWidth((char const *)arg2);
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SmartFont(void *obj) {
boost::shared_ptr<love::Font > *arg1 = (boost::shared_ptr<love::Font > *) obj;
delete arg1;
}
static swig_lua_method swig_boost_shared_ptr_Sl_love_Font_Sg__methods[] = {
    {"__deref__", _wrap_SmartFont___deref__}, 
    {"getHeight", _wrap_SmartFont_getHeight}, 
    {"getWidth", _wrap_SmartFont_getWidth}, 
    {0,0}
};
static swig_lua_attribute swig_boost_shared_ptr_Sl_love_Font_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_boost_shared_ptr_Sl_love_Font_Sg__bases[] = {0};
swig_lua_class _wrap_class_boost_shared_ptr_Sl_love_Font_Sg_ = { "SmartFont", &SWIGTYPE_p_boost__shared_ptrTlove__Font_t,0, swig_delete_SmartFont, swig_boost_shared_ptr_Sl_love_Font_Sg__methods, swig_boost_shared_ptr_Sl_love_Font_Sg__attributes, swig_boost_shared_ptr_Sl_love_Font_Sg__bases };

static int _wrap_Sprite_getWidth(lua_State* L) {
  int SWIG_arg = -1;
  love::Sprite *arg1 = (love::Sprite *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Sprite *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Sprite,0,1,"Sprite_getWidth");
  result = (float)((love::Sprite const *)arg1)->getWidth();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sprite_getHeight(lua_State* L) {
  int SWIG_arg = -1;
  love::Sprite *arg1 = (love::Sprite *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Sprite *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Sprite,0,1,"Sprite_getHeight");
  result = (float)((love::Sprite const *)arg1)->getHeight();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sprite_getAlpha(lua_State* L) {
  int SWIG_arg = -1;
  love::Sprite *arg1 = (love::Sprite *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Sprite *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Sprite,0,1,"Sprite_getAlpha");
  result = (float)((love::Sprite const *)arg1)->getAlpha();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sprite_setAlpha(lua_State* L) {
  int SWIG_arg = -1;
  love::Sprite *arg1 = (love::Sprite *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Sprite *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Sprite,0,1,"Sprite_setAlpha");
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setAlpha(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sprite_update(lua_State* L) {
  int SWIG_arg = -1;
  love::Sprite *arg1 = (love::Sprite *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Sprite *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Sprite,0,1,"Sprite_update");
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->update(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sprite_setCenter(lua_State* L) {
  int SWIG_arg = -1;
  love::Sprite *arg1 = (love::Sprite *) 0 ;
  float arg2 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::Sprite *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Sprite,0,1,"Sprite_setCenter");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setCenter(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_Sprite(lua_State* L) {
  int SWIG_arg = -1;
  love::Sprite *arg1 = (love::Sprite *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Sprite *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Sprite,0,1,"delete_Sprite");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Sprite(void *obj) {
love::Sprite *arg1 = (love::Sprite *) obj;
delete arg1;
}
static swig_lua_method swig_love_Sprite_methods[] = {
    {"getWidth", _wrap_Sprite_getWidth}, 
    {"getHeight", _wrap_Sprite_getHeight}, 
    {"getAlpha", _wrap_Sprite_getAlpha}, 
    {"setAlpha", _wrap_Sprite_setAlpha}, 
    {"update", _wrap_Sprite_update}, 
    {"setCenter", _wrap_Sprite_setCenter}, 
    {0,0}
};
static swig_lua_attribute swig_love_Sprite_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_love_Sprite_bases[] = {0};
swig_lua_class _wrap_class_love_Sprite = { "Sprite", &SWIGTYPE_p_love__Sprite,0, swig_delete_Sprite, swig_love_Sprite_methods, swig_love_Sprite_attributes, swig_love_Sprite_bases };

static int _wrap_SmartSprite___deref__(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Sprite > *arg1 = (boost::shared_ptr<love::Sprite > *) 0 ;
  love::Sprite *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Sprite > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Sprite_t,0,1,"SmartSprite___deref__");
  result = (love::Sprite *)((boost::shared_ptr<love::Sprite > const *)arg1)->operator ->();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__Sprite,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_SmartSprite(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Sprite > *arg1 = (boost::shared_ptr<love::Sprite > *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Sprite > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Sprite_t,0,1,"delete_SmartSprite");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartSprite_getWidth(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Sprite > *arg1 = (boost::shared_ptr<love::Sprite > *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Sprite > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Sprite_t,0,1,"SmartSprite_getWidth");
  result = (float)(*arg1)->getWidth();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartSprite_getHeight(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Sprite > *arg1 = (boost::shared_ptr<love::Sprite > *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Sprite > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Sprite_t,0,1,"SmartSprite_getHeight");
  result = (float)(*arg1)->getHeight();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartSprite_getAlpha(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Sprite > *arg1 = (boost::shared_ptr<love::Sprite > *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Sprite > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Sprite_t,0,1,"SmartSprite_getAlpha");
  result = (float)(*arg1)->getAlpha();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartSprite_setAlpha(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Sprite > *arg1 = (boost::shared_ptr<love::Sprite > *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Sprite > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Sprite_t,0,1,"SmartSprite_setAlpha");
  arg2 = (float)lua_tonumber(L, 2);
  (*arg1)->setAlpha(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartSprite_update(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Sprite > *arg1 = (boost::shared_ptr<love::Sprite > *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Sprite > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Sprite_t,0,1,"SmartSprite_update");
  arg2 = (float)lua_tonumber(L, 2);
  (*arg1)->update(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartSprite_setCenter(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Sprite > *arg1 = (boost::shared_ptr<love::Sprite > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(boost::shared_ptr<love::Sprite > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Sprite_t,0,1,"SmartSprite_setCenter");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (*arg1)->setCenter(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SmartSprite(void *obj) {
boost::shared_ptr<love::Sprite > *arg1 = (boost::shared_ptr<love::Sprite > *) obj;
delete arg1;
}
static swig_lua_method swig_boost_shared_ptr_Sl_love_Sprite_Sg__methods[] = {
    {"__deref__", _wrap_SmartSprite___deref__}, 
    {"getWidth", _wrap_SmartSprite_getWidth}, 
    {"getHeight", _wrap_SmartSprite_getHeight}, 
    {"getAlpha", _wrap_SmartSprite_getAlpha}, 
    {"setAlpha", _wrap_SmartSprite_setAlpha}, 
    {"update", _wrap_SmartSprite_update}, 
    {"setCenter", _wrap_SmartSprite_setCenter}, 
    {0,0}
};
static swig_lua_attribute swig_boost_shared_ptr_Sl_love_Sprite_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_boost_shared_ptr_Sl_love_Sprite_Sg__bases[] = {0};
swig_lua_class _wrap_class_boost_shared_ptr_Sl_love_Sprite_Sg_ = { "SmartSprite", &SWIGTYPE_p_boost__shared_ptrTlove__Sprite_t,0, swig_delete_SmartSprite, swig_boost_shared_ptr_Sl_love_Sprite_Sg__methods, swig_boost_shared_ptr_Sl_love_Sprite_Sg__attributes, swig_boost_shared_ptr_Sl_love_Sprite_Sg__bases };

static int _wrap_delete_Image(lua_State* L) {
  int SWIG_arg = -1;
  love::Image *arg1 = (love::Image *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Image *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Image,0,1,"delete_Image");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Image(void *obj) {
love::Image *arg1 = (love::Image *) obj;
delete arg1;
}
static swig_lua_method swig_love_Image_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_love_Image_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_love_Image_bases[] = {&_wrap_class_love_Sprite,0};
swig_lua_class _wrap_class_love_Image = { "Image", &SWIGTYPE_p_love__Image,0, swig_delete_Image, swig_love_Image_methods, swig_love_Image_attributes, swig_love_Image_bases };

static int _wrap_SmartImage___deref__(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Image > *arg1 = (boost::shared_ptr<love::Image > *) 0 ;
  love::Image *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Image > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Image_t,0,1,"SmartImage___deref__");
  result = (love::Image *)((boost::shared_ptr<love::Image > const *)arg1)->operator ->();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__Image,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_SmartImage(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Image > *arg1 = (boost::shared_ptr<love::Image > *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Image > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Image_t,0,1,"delete_SmartImage");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartImage_getWidth(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Image > *arg1 = (boost::shared_ptr<love::Image > *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Image > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Image_t,0,1,"SmartImage_getWidth");
  result = (float)(*arg1)->getWidth();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartImage_getHeight(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Image > *arg1 = (boost::shared_ptr<love::Image > *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Image > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Image_t,0,1,"SmartImage_getHeight");
  result = (float)(*arg1)->getHeight();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartImage_getAlpha(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Image > *arg1 = (boost::shared_ptr<love::Image > *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Image > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Image_t,0,1,"SmartImage_getAlpha");
  result = (float)(*arg1)->getAlpha();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartImage_setAlpha(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Image > *arg1 = (boost::shared_ptr<love::Image > *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Image > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Image_t,0,1,"SmartImage_setAlpha");
  arg2 = (float)lua_tonumber(L, 2);
  (*arg1)->setAlpha(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartImage_update(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Image > *arg1 = (boost::shared_ptr<love::Image > *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Image > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Image_t,0,1,"SmartImage_update");
  arg2 = (float)lua_tonumber(L, 2);
  (*arg1)->update(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartImage_setCenter(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Image > *arg1 = (boost::shared_ptr<love::Image > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(boost::shared_ptr<love::Image > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Image_t,0,1,"SmartImage_setCenter");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (*arg1)->setCenter(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SmartImage(void *obj) {
boost::shared_ptr<love::Image > *arg1 = (boost::shared_ptr<love::Image > *) obj;
delete arg1;
}
static swig_lua_method swig_boost_shared_ptr_Sl_love_Image_Sg__methods[] = {
    {"__deref__", _wrap_SmartImage___deref__}, 
    {"getWidth", _wrap_SmartImage_getWidth}, 
    {"getHeight", _wrap_SmartImage_getHeight}, 
    {"getAlpha", _wrap_SmartImage_getAlpha}, 
    {"setAlpha", _wrap_SmartImage_setAlpha}, 
    {"update", _wrap_SmartImage_update}, 
    {"setCenter", _wrap_SmartImage_setCenter}, 
    {0,0}
};
static swig_lua_attribute swig_boost_shared_ptr_Sl_love_Image_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_boost_shared_ptr_Sl_love_Image_Sg__bases[] = {0};
swig_lua_class _wrap_class_boost_shared_ptr_Sl_love_Image_Sg_ = { "SmartImage", &SWIGTYPE_p_boost__shared_ptrTlove__Image_t,0, swig_delete_SmartImage, swig_boost_shared_ptr_Sl_love_Image_Sg__methods, swig_boost_shared_ptr_Sl_love_Image_Sg__attributes, swig_boost_shared_ptr_Sl_love_Image_Sg__bases };

static int _wrap_Animation_addFrame(lua_State* L) {
  int SWIG_arg = -1;
  love::Animation *arg1 = (love::Animation *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  if(!lua_isnumber(L,6)) SWIG_fail_arg(6);
  arg1=(love::Animation *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Animation,0,1,"Animation_addFrame");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  (arg1)->addFrame(arg2,arg3,arg4,arg5,arg6);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Animation_setMode(lua_State* L) {
  int SWIG_arg = -1;
  love::Animation *arg1 = (love::Animation *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Animation *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Animation,0,1,"Animation_setMode");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setMode(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Animation_play(lua_State* L) {
  int SWIG_arg = -1;
  love::Animation *arg1 = (love::Animation *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Animation *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Animation,0,1,"Animation_play");
  (arg1)->play();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Animation_stop(lua_State* L) {
  int SWIG_arg = -1;
  love::Animation *arg1 = (love::Animation *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Animation *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Animation,0,1,"Animation_stop");
  (arg1)->stop();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Animation_reset(lua_State* L) {
  int SWIG_arg = -1;
  love::Animation *arg1 = (love::Animation *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Animation *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Animation,0,1,"Animation_reset");
  (arg1)->reset();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Animation_seek(lua_State* L) {
  int SWIG_arg = -1;
  love::Animation *arg1 = (love::Animation *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Animation *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Animation,0,1,"Animation_seek");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->seek(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Animation_getCurrentFrame(lua_State* L) {
  int SWIG_arg = -1;
  love::Animation *arg1 = (love::Animation *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Animation *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Animation,0,1,"Animation_getCurrentFrame");
  result = (int)((love::Animation const *)arg1)->getCurrentFrame();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Animation_setDelay(lua_State* L) {
  int SWIG_arg = -1;
  love::Animation *arg1 = (love::Animation *) 0 ;
  int arg2 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::Animation *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Animation,0,1,"Animation_setDelay");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setDelay(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_Animation(lua_State* L) {
  int SWIG_arg = -1;
  love::Animation *arg1 = (love::Animation *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Animation *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Animation,0,1,"delete_Animation");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Animation(void *obj) {
love::Animation *arg1 = (love::Animation *) obj;
delete arg1;
}
static swig_lua_method swig_love_Animation_methods[] = {
    {"addFrame", _wrap_Animation_addFrame}, 
    {"setMode", _wrap_Animation_setMode}, 
    {"play", _wrap_Animation_play}, 
    {"stop", _wrap_Animation_stop}, 
    {"reset", _wrap_Animation_reset}, 
    {"seek", _wrap_Animation_seek}, 
    {"getCurrentFrame", _wrap_Animation_getCurrentFrame}, 
    {"setDelay", _wrap_Animation_setDelay}, 
    {0,0}
};
static swig_lua_attribute swig_love_Animation_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_love_Animation_bases[] = {&_wrap_class_love_Sprite,0};
swig_lua_class _wrap_class_love_Animation = { "Animation", &SWIGTYPE_p_love__Animation,0, swig_delete_Animation, swig_love_Animation_methods, swig_love_Animation_attributes, swig_love_Animation_bases };

static int _wrap_SmartAnimation___deref__(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Animation > *arg1 = (boost::shared_ptr<love::Animation > *) 0 ;
  love::Animation *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Animation > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Animation_t,0,1,"SmartAnimation___deref__");
  result = (love::Animation *)((boost::shared_ptr<love::Animation > const *)arg1)->operator ->();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__Animation,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_SmartAnimation(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Animation > *arg1 = (boost::shared_ptr<love::Animation > *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Animation > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Animation_t,0,1,"delete_SmartAnimation");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAnimation_addFrame(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Animation > *arg1 = (boost::shared_ptr<love::Animation > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  if(!lua_isnumber(L,6)) SWIG_fail_arg(6);
  arg1=(boost::shared_ptr<love::Animation > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Animation_t,0,1,"SmartAnimation_addFrame");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  (*arg1)->addFrame(arg2,arg3,arg4,arg5,arg6);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAnimation_setMode(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Animation > *arg1 = (boost::shared_ptr<love::Animation > *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Animation > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Animation_t,0,1,"SmartAnimation_setMode");
  arg2 = (int)lua_tonumber(L, 2);
  (*arg1)->setMode(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAnimation_play(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Animation > *arg1 = (boost::shared_ptr<love::Animation > *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Animation > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Animation_t,0,1,"SmartAnimation_play");
  (*arg1)->play();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAnimation_stop(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Animation > *arg1 = (boost::shared_ptr<love::Animation > *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Animation > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Animation_t,0,1,"SmartAnimation_stop");
  (*arg1)->stop();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAnimation_reset(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Animation > *arg1 = (boost::shared_ptr<love::Animation > *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Animation > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Animation_t,0,1,"SmartAnimation_reset");
  (*arg1)->reset();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAnimation_seek(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Animation > *arg1 = (boost::shared_ptr<love::Animation > *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Animation > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Animation_t,0,1,"SmartAnimation_seek");
  arg2 = (int)lua_tonumber(L, 2);
  (*arg1)->seek(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAnimation_getCurrentFrame(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Animation > *arg1 = (boost::shared_ptr<love::Animation > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Animation > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Animation_t,0,1,"SmartAnimation_getCurrentFrame");
  result = (int)(*arg1)->getCurrentFrame();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAnimation_setDelay(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Animation > *arg1 = (boost::shared_ptr<love::Animation > *) 0 ;
  int arg2 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(boost::shared_ptr<love::Animation > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Animation_t,0,1,"SmartAnimation_setDelay");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (*arg1)->setDelay(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAnimation_getWidth(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Animation > *arg1 = (boost::shared_ptr<love::Animation > *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Animation > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Animation_t,0,1,"SmartAnimation_getWidth");
  result = (float)(*arg1)->getWidth();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAnimation_getHeight(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Animation > *arg1 = (boost::shared_ptr<love::Animation > *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Animation > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Animation_t,0,1,"SmartAnimation_getHeight");
  result = (float)(*arg1)->getHeight();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAnimation_getAlpha(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Animation > *arg1 = (boost::shared_ptr<love::Animation > *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Animation > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Animation_t,0,1,"SmartAnimation_getAlpha");
  result = (float)(*arg1)->getAlpha();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAnimation_setAlpha(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Animation > *arg1 = (boost::shared_ptr<love::Animation > *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Animation > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Animation_t,0,1,"SmartAnimation_setAlpha");
  arg2 = (float)lua_tonumber(L, 2);
  (*arg1)->setAlpha(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAnimation_update(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Animation > *arg1 = (boost::shared_ptr<love::Animation > *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Animation > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Animation_t,0,1,"SmartAnimation_update");
  arg2 = (float)lua_tonumber(L, 2);
  (*arg1)->update(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartAnimation_setCenter(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Animation > *arg1 = (boost::shared_ptr<love::Animation > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(boost::shared_ptr<love::Animation > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Animation_t,0,1,"SmartAnimation_setCenter");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (*arg1)->setCenter(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SmartAnimation(void *obj) {
boost::shared_ptr<love::Animation > *arg1 = (boost::shared_ptr<love::Animation > *) obj;
delete arg1;
}
static swig_lua_method swig_boost_shared_ptr_Sl_love_Animation_Sg__methods[] = {
    {"__deref__", _wrap_SmartAnimation___deref__}, 
    {"addFrame", _wrap_SmartAnimation_addFrame}, 
    {"setMode", _wrap_SmartAnimation_setMode}, 
    {"play", _wrap_SmartAnimation_play}, 
    {"stop", _wrap_SmartAnimation_stop}, 
    {"reset", _wrap_SmartAnimation_reset}, 
    {"seek", _wrap_SmartAnimation_seek}, 
    {"getCurrentFrame", _wrap_SmartAnimation_getCurrentFrame}, 
    {"setDelay", _wrap_SmartAnimation_setDelay}, 
    {"getWidth", _wrap_SmartAnimation_getWidth}, 
    {"getHeight", _wrap_SmartAnimation_getHeight}, 
    {"getAlpha", _wrap_SmartAnimation_getAlpha}, 
    {"setAlpha", _wrap_SmartAnimation_setAlpha}, 
    {"update", _wrap_SmartAnimation_update}, 
    {"setCenter", _wrap_SmartAnimation_setCenter}, 
    {0,0}
};
static swig_lua_attribute swig_boost_shared_ptr_Sl_love_Animation_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_boost_shared_ptr_Sl_love_Animation_Sg__bases[] = {0};
swig_lua_class _wrap_class_boost_shared_ptr_Sl_love_Animation_Sg_ = { "SmartAnimation", &SWIGTYPE_p_boost__shared_ptrTlove__Animation_t,0, swig_delete_SmartAnimation, swig_boost_shared_ptr_Sl_love_Animation_Sg__methods, swig_boost_shared_ptr_Sl_love_Animation_Sg__attributes, swig_boost_shared_ptr_Sl_love_Animation_Sg__bases };

static int _wrap_Particlesystem_setAutostart(lua_State* L) {
  int SWIG_arg = -1;
  love::Particlesystem *arg1 = (love::Particlesystem *) 0 ;
  bool arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isboolean(L,2)) SWIG_fail_arg(2);
  arg1=(love::Particlesystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Particlesystem,0,1,"Particlesystem_setAutostart");
  arg2 = (bool)lua_toboolean(L, 2);
  (arg1)->setAutostart(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particlesystem_getNumParticles(lua_State* L) {
  int SWIG_arg = -1;
  love::Particlesystem *arg1 = (love::Particlesystem *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Particlesystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Particlesystem,0,1,"Particlesystem_getNumParticles");
  result = (int)((love::Particlesystem const *)arg1)->getNumParticles();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particlesystem_isAdditive(lua_State* L) {
  int SWIG_arg = -1;
  love::Particlesystem *arg1 = (love::Particlesystem *) 0 ;
  bool result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Particlesystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Particlesystem,0,1,"Particlesystem_isAdditive");
  result = (bool)((love::Particlesystem const *)arg1)->isAdditive();
  SWIG_arg=0;
  lua_pushboolean(L,(int)result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particlesystem_reset(lua_State* L) {
  int SWIG_arg = -1;
  love::Particlesystem *arg1 = (love::Particlesystem *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Particlesystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Particlesystem,0,1,"Particlesystem_reset");
  (arg1)->reset();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particlesystem_setPosition(lua_State* L) {
  int SWIG_arg = -1;
  love::Particlesystem *arg1 = (love::Particlesystem *) 0 ;
  float arg2 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::Particlesystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Particlesystem,0,1,"Particlesystem_setPosition");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setPosition(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particlesystem_getLifetime(lua_State* L) {
  int SWIG_arg = -1;
  love::Particlesystem *arg1 = (love::Particlesystem *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Particlesystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Particlesystem,0,1,"Particlesystem_getLifetime");
  result = (float)((love::Particlesystem const *)arg1)->getLifetime();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particlesystem_setLifetime(lua_State* L) {
  int SWIG_arg = -1;
  love::Particlesystem *arg1 = (love::Particlesystem *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Particlesystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Particlesystem,0,1,"Particlesystem_setLifetime");
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setLifetime(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particlesystem_getAge(lua_State* L) {
  int SWIG_arg = -1;
  love::Particlesystem *arg1 = (love::Particlesystem *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Particlesystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Particlesystem,0,1,"Particlesystem_getAge");
  result = (float)((love::Particlesystem const *)arg1)->getAge();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particlesystem_setLinger(lua_State* L) {
  int SWIG_arg = -1;
  love::Particlesystem *arg1 = (love::Particlesystem *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Particlesystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Particlesystem,0,1,"Particlesystem_setLinger");
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setLinger(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particlesystem_getLinger(lua_State* L) {
  int SWIG_arg = -1;
  love::Particlesystem *arg1 = (love::Particlesystem *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Particlesystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Particlesystem,0,1,"Particlesystem_getLinger");
  result = (float)(arg1)->getLinger();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particlesystem_isDead(lua_State* L) {
  int SWIG_arg = -1;
  love::Particlesystem *arg1 = (love::Particlesystem *) 0 ;
  bool result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Particlesystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Particlesystem,0,1,"Particlesystem_isDead");
  result = (bool)((love::Particlesystem const *)arg1)->isDead();
  SWIG_arg=0;
  lua_pushboolean(L,(int)result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particlesystem_isActive(lua_State* L) {
  int SWIG_arg = -1;
  love::Particlesystem *arg1 = (love::Particlesystem *) 0 ;
  bool result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Particlesystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Particlesystem,0,1,"Particlesystem_isActive");
  result = (bool)((love::Particlesystem const *)arg1)->isActive();
  SWIG_arg=0;
  lua_pushboolean(L,(int)result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particlesystem_setParticlesPerSecond(lua_State* L) {
  int SWIG_arg = -1;
  love::Particlesystem *arg1 = (love::Particlesystem *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Particlesystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Particlesystem,0,1,"Particlesystem_setParticlesPerSecond");
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setParticlesPerSecond(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particlesystem_addColor__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::Particlesystem *arg1 = (love::Particlesystem *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  float arg6 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  if(!lua_isnumber(L,6)) SWIG_fail_arg(6);
  arg1=(love::Particlesystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Particlesystem,0,1,"Particlesystem_addColor");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  (arg1)->addColor(arg2,arg3,arg4,arg5,arg6);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particlesystem_addColor__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::Particlesystem *arg1 = (love::Particlesystem *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  arg1=(love::Particlesystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Particlesystem,0,1,"Particlesystem_addColor");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  (arg1)->addColor(arg2,arg3,arg4,arg5);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particlesystem_addColor__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  love::Particlesystem *arg1 = (love::Particlesystem *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(love::Particlesystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Particlesystem,0,1,"Particlesystem_addColor");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->addColor(arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particlesystem_addColor(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Particlesystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Particlesystem_addColor__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Particlesystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_Particlesystem_addColor__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Particlesystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_Particlesystem_addColor__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'Particlesystem_addColor'");
  lua_error(L);return 0;
}


static int _wrap_Particlesystem_setSprite__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::Particlesystem *arg1 = (love::Particlesystem *) 0 ;
  love::pSprite arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::Particlesystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Particlesystem,0,1,"Particlesystem_setSprite");
  {
    love::pSprite * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_boost__shared_ptrTlove__Sprite_t,0)) SWIG_fail;
    arg2 = *argp;
  }
  (arg1)->setSprite(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particlesystem_setAdditiveBlending(lua_State* L) {
  int SWIG_arg = -1;
  love::Particlesystem *arg1 = (love::Particlesystem *) 0 ;
  bool arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isboolean(L,2)) SWIG_fail_arg(2);
  arg1=(love::Particlesystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Particlesystem,0,1,"Particlesystem_setAdditiveBlending");
  arg2 = (bool)lua_toboolean(L, 2);
  (arg1)->setAdditiveBlending(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particlesystem_setDirection__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::Particlesystem *arg1 = (love::Particlesystem *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(love::Particlesystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Particlesystem,0,1,"Particlesystem_setDirection");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->setDirection(arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particlesystem_setDirection__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::Particlesystem *arg1 = (love::Particlesystem *) 0 ;
  float arg2 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::Particlesystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Particlesystem,0,1,"Particlesystem_setDirection");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setDirection(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particlesystem_setDirection__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  love::Particlesystem *arg1 = (love::Particlesystem *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Particlesystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Particlesystem,0,1,"Particlesystem_setDirection");
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setDirection(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particlesystem_setDirection(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Particlesystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Particlesystem_setDirection__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Particlesystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Particlesystem_setDirection__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Particlesystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Particlesystem_setDirection__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'Particlesystem_setDirection'");
  lua_error(L);return 0;
}


static int _wrap_Particlesystem_setStartSpeed__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::Particlesystem *arg1 = (love::Particlesystem *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(love::Particlesystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Particlesystem,0,1,"Particlesystem_setStartSpeed");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->setStartSpeed(arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particlesystem_setStartSpeed__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::Particlesystem *arg1 = (love::Particlesystem *) 0 ;
  float arg2 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::Particlesystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Particlesystem,0,1,"Particlesystem_setStartSpeed");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setStartSpeed(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particlesystem_setStartSpeed__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  love::Particlesystem *arg1 = (love::Particlesystem *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Particlesystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Particlesystem,0,1,"Particlesystem_setStartSpeed");
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setStartSpeed(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particlesystem_setStartSpeed(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Particlesystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Particlesystem_setStartSpeed__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Particlesystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Particlesystem_setStartSpeed__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Particlesystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Particlesystem_setStartSpeed__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'Particlesystem_setStartSpeed'");
  lua_error(L);return 0;
}


static int _wrap_Particlesystem_setGravity__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::Particlesystem *arg1 = (love::Particlesystem *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(love::Particlesystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Particlesystem,0,1,"Particlesystem_setGravity");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->setGravity(arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particlesystem_setGravity__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::Particlesystem *arg1 = (love::Particlesystem *) 0 ;
  float arg2 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::Particlesystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Particlesystem,0,1,"Particlesystem_setGravity");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setGravity(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particlesystem_setGravity__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  love::Particlesystem *arg1 = (love::Particlesystem *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Particlesystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Particlesystem,0,1,"Particlesystem_setGravity");
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setGravity(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particlesystem_setGravity(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Particlesystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Particlesystem_setGravity__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Particlesystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Particlesystem_setGravity__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Particlesystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Particlesystem_setGravity__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'Particlesystem_setGravity'");
  lua_error(L);return 0;
}


static int _wrap_Particlesystem_setRadialAcc__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::Particlesystem *arg1 = (love::Particlesystem *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(love::Particlesystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Particlesystem,0,1,"Particlesystem_setRadialAcc");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->setRadialAcc(arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particlesystem_setRadialAcc__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::Particlesystem *arg1 = (love::Particlesystem *) 0 ;
  float arg2 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::Particlesystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Particlesystem,0,1,"Particlesystem_setRadialAcc");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setRadialAcc(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particlesystem_setRadialAcc__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  love::Particlesystem *arg1 = (love::Particlesystem *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Particlesystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Particlesystem,0,1,"Particlesystem_setRadialAcc");
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setRadialAcc(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particlesystem_setRadialAcc(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Particlesystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Particlesystem_setRadialAcc__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Particlesystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Particlesystem_setRadialAcc__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Particlesystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Particlesystem_setRadialAcc__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'Particlesystem_setRadialAcc'");
  lua_error(L);return 0;
}


static int _wrap_Particlesystem_setTangentialAcc__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::Particlesystem *arg1 = (love::Particlesystem *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(love::Particlesystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Particlesystem,0,1,"Particlesystem_setTangentialAcc");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->setTangentialAcc(arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particlesystem_setTangentialAcc__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::Particlesystem *arg1 = (love::Particlesystem *) 0 ;
  float arg2 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::Particlesystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Particlesystem,0,1,"Particlesystem_setTangentialAcc");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setTangentialAcc(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particlesystem_setTangentialAcc__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  love::Particlesystem *arg1 = (love::Particlesystem *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Particlesystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Particlesystem,0,1,"Particlesystem_setTangentialAcc");
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setTangentialAcc(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particlesystem_setTangentialAcc(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Particlesystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Particlesystem_setTangentialAcc__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Particlesystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Particlesystem_setTangentialAcc__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Particlesystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Particlesystem_setTangentialAcc__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'Particlesystem_setTangentialAcc'");
  lua_error(L);return 0;
}


static int _wrap_Particlesystem_setParticleLifetime__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::Particlesystem *arg1 = (love::Particlesystem *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(love::Particlesystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Particlesystem,0,1,"Particlesystem_setParticleLifetime");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->setParticleLifetime(arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particlesystem_setParticleLifetime__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::Particlesystem *arg1 = (love::Particlesystem *) 0 ;
  float arg2 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::Particlesystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Particlesystem,0,1,"Particlesystem_setParticleLifetime");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setParticleLifetime(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particlesystem_setParticleLifetime__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  love::Particlesystem *arg1 = (love::Particlesystem *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Particlesystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Particlesystem,0,1,"Particlesystem_setParticleLifetime");
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setParticleLifetime(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particlesystem_setParticleLifetime(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Particlesystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Particlesystem_setParticleLifetime__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Particlesystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Particlesystem_setParticleLifetime__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Particlesystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Particlesystem_setParticleLifetime__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'Particlesystem_setParticleLifetime'");
  lua_error(L);return 0;
}


static int _wrap_Particlesystem_setParticleSize__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::Particlesystem *arg1 = (love::Particlesystem *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(love::Particlesystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Particlesystem,0,1,"Particlesystem_setParticleSize");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->setParticleSize(arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particlesystem_setParticleSize__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::Particlesystem *arg1 = (love::Particlesystem *) 0 ;
  float arg2 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::Particlesystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Particlesystem,0,1,"Particlesystem_setParticleSize");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setParticleSize(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particlesystem_setParticleSize__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  love::Particlesystem *arg1 = (love::Particlesystem *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Particlesystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Particlesystem,0,1,"Particlesystem_setParticleSize");
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setParticleSize(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particlesystem_setParticleSize(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Particlesystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Particlesystem_setParticleSize__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Particlesystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Particlesystem_setParticleSize__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Particlesystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Particlesystem_setParticleSize__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'Particlesystem_setParticleSize'");
  lua_error(L);return 0;
}


static int _wrap_Particlesystem_setParticleSpin__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::Particlesystem *arg1 = (love::Particlesystem *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(love::Particlesystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Particlesystem,0,1,"Particlesystem_setParticleSpin");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->setParticleSpin(arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particlesystem_setParticleSpin__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::Particlesystem *arg1 = (love::Particlesystem *) 0 ;
  float arg2 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::Particlesystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Particlesystem,0,1,"Particlesystem_setParticleSpin");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setParticleSpin(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particlesystem_setParticleSpin__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  love::Particlesystem *arg1 = (love::Particlesystem *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Particlesystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Particlesystem,0,1,"Particlesystem_setParticleSpin");
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setParticleSpin(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particlesystem_setParticleSpin(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Particlesystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Particlesystem_setParticleSpin__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Particlesystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Particlesystem_setParticleSpin__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Particlesystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Particlesystem_setParticleSpin__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'Particlesystem_setParticleSpin'");
  lua_error(L);return 0;
}


static int _wrap_Particlesystem_update(lua_State* L) {
  int SWIG_arg = -1;
  love::Particlesystem *arg1 = (love::Particlesystem *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Particlesystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Particlesystem,0,1,"Particlesystem_update");
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->update(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particlesystem_setSprite__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::Particlesystem *arg1 = (love::Particlesystem *) 0 ;
  love::pImage *arg2 = (love::pImage *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::Particlesystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Particlesystem,0,1,"Particlesystem_setSprite");
  arg2=(love::pImage *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__Image_t,0,2,"Particlesystem_setSprite");
  love_Particlesystem_setSprite__SWIG_1(arg1,(boost::shared_ptr<love::Image > const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particlesystem_setSprite(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Particlesystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_boost__shared_ptrTlove__Sprite_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Particlesystem_setSprite__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Particlesystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__Image_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Particlesystem_setSprite__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'Particlesystem_setSprite'");
  lua_error(L);return 0;
}


static int _wrap_delete_Particlesystem(lua_State* L) {
  int SWIG_arg = -1;
  love::Particlesystem *arg1 = (love::Particlesystem *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Particlesystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Particlesystem,0,1,"delete_Particlesystem");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Particlesystem(void *obj) {
love::Particlesystem *arg1 = (love::Particlesystem *) obj;
delete arg1;
}
static swig_lua_method swig_love_Particlesystem_methods[] = {
    {"setAutostart", _wrap_Particlesystem_setAutostart}, 
    {"getNumParticles", _wrap_Particlesystem_getNumParticles}, 
    {"isAdditive", _wrap_Particlesystem_isAdditive}, 
    {"reset", _wrap_Particlesystem_reset}, 
    {"setPosition", _wrap_Particlesystem_setPosition}, 
    {"getLifetime", _wrap_Particlesystem_getLifetime}, 
    {"setLifetime", _wrap_Particlesystem_setLifetime}, 
    {"getAge", _wrap_Particlesystem_getAge}, 
    {"setLinger", _wrap_Particlesystem_setLinger}, 
    {"getLinger", _wrap_Particlesystem_getLinger}, 
    {"isDead", _wrap_Particlesystem_isDead}, 
    {"isActive", _wrap_Particlesystem_isActive}, 
    {"setParticlesPerSecond", _wrap_Particlesystem_setParticlesPerSecond}, 
    {"addColor", _wrap_Particlesystem_addColor}, 
    {"setAdditiveBlending", _wrap_Particlesystem_setAdditiveBlending}, 
    {"setDirection", _wrap_Particlesystem_setDirection}, 
    {"setStartSpeed", _wrap_Particlesystem_setStartSpeed}, 
    {"setGravity", _wrap_Particlesystem_setGravity}, 
    {"setRadialAcc", _wrap_Particlesystem_setRadialAcc}, 
    {"setTangentialAcc", _wrap_Particlesystem_setTangentialAcc}, 
    {"setParticleLifetime", _wrap_Particlesystem_setParticleLifetime}, 
    {"setParticleSize", _wrap_Particlesystem_setParticleSize}, 
    {"setParticleSpin", _wrap_Particlesystem_setParticleSpin}, 
    {"update", _wrap_Particlesystem_update}, 
    {"setSprite", _wrap_Particlesystem_setSprite}, 
    {0,0}
};
static swig_lua_attribute swig_love_Particlesystem_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_love_Particlesystem_bases[] = {0};
swig_lua_class _wrap_class_love_Particlesystem = { "Particlesystem", &SWIGTYPE_p_love__Particlesystem,0, swig_delete_Particlesystem, swig_love_Particlesystem_methods, swig_love_Particlesystem_attributes, swig_love_Particlesystem_bases };

static int _wrap_SmartParticlesystem___deref__(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Particlesystem > *arg1 = (boost::shared_ptr<love::Particlesystem > *) 0 ;
  love::Particlesystem *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Particlesystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t,0,1,"SmartParticlesystem___deref__");
  result = (love::Particlesystem *)((boost::shared_ptr<love::Particlesystem > const *)arg1)->operator ->();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__Particlesystem,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_SmartParticlesystem(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Particlesystem > *arg1 = (boost::shared_ptr<love::Particlesystem > *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Particlesystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t,0,1,"delete_SmartParticlesystem");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticlesystem_setAutostart(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Particlesystem > *arg1 = (boost::shared_ptr<love::Particlesystem > *) 0 ;
  bool arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isboolean(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Particlesystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t,0,1,"SmartParticlesystem_setAutostart");
  arg2 = (bool)lua_toboolean(L, 2);
  (*arg1)->setAutostart(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticlesystem_getNumParticles(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Particlesystem > *arg1 = (boost::shared_ptr<love::Particlesystem > *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Particlesystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t,0,1,"SmartParticlesystem_getNumParticles");
  result = (int)(*arg1)->getNumParticles();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticlesystem_isAdditive(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Particlesystem > *arg1 = (boost::shared_ptr<love::Particlesystem > *) 0 ;
  bool result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Particlesystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t,0,1,"SmartParticlesystem_isAdditive");
  result = (bool)(*arg1)->isAdditive();
  SWIG_arg=0;
  lua_pushboolean(L,(int)result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticlesystem_reset(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Particlesystem > *arg1 = (boost::shared_ptr<love::Particlesystem > *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Particlesystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t,0,1,"SmartParticlesystem_reset");
  (*arg1)->reset();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticlesystem_setPosition(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Particlesystem > *arg1 = (boost::shared_ptr<love::Particlesystem > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(boost::shared_ptr<love::Particlesystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t,0,1,"SmartParticlesystem_setPosition");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (*arg1)->setPosition(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticlesystem_getLifetime(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Particlesystem > *arg1 = (boost::shared_ptr<love::Particlesystem > *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Particlesystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t,0,1,"SmartParticlesystem_getLifetime");
  result = (float)(*arg1)->getLifetime();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticlesystem_setLifetime(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Particlesystem > *arg1 = (boost::shared_ptr<love::Particlesystem > *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Particlesystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t,0,1,"SmartParticlesystem_setLifetime");
  arg2 = (float)lua_tonumber(L, 2);
  (*arg1)->setLifetime(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticlesystem_getAge(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Particlesystem > *arg1 = (boost::shared_ptr<love::Particlesystem > *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Particlesystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t,0,1,"SmartParticlesystem_getAge");
  result = (float)(*arg1)->getAge();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticlesystem_setLinger(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Particlesystem > *arg1 = (boost::shared_ptr<love::Particlesystem > *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Particlesystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t,0,1,"SmartParticlesystem_setLinger");
  arg2 = (float)lua_tonumber(L, 2);
  (*arg1)->setLinger(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticlesystem_getLinger(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Particlesystem > *arg1 = (boost::shared_ptr<love::Particlesystem > *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Particlesystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t,0,1,"SmartParticlesystem_getLinger");
  result = (float)(*arg1)->getLinger();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticlesystem_isDead(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Particlesystem > *arg1 = (boost::shared_ptr<love::Particlesystem > *) 0 ;
  bool result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Particlesystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t,0,1,"SmartParticlesystem_isDead");
  result = (bool)(*arg1)->isDead();
  SWIG_arg=0;
  lua_pushboolean(L,(int)result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticlesystem_isActive(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Particlesystem > *arg1 = (boost::shared_ptr<love::Particlesystem > *) 0 ;
  bool result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Particlesystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t,0,1,"SmartParticlesystem_isActive");
  result = (bool)(*arg1)->isActive();
  SWIG_arg=0;
  lua_pushboolean(L,(int)result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticlesystem_setParticlesPerSecond(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Particlesystem > *arg1 = (boost::shared_ptr<love::Particlesystem > *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Particlesystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t,0,1,"SmartParticlesystem_setParticlesPerSecond");
  arg2 = (float)lua_tonumber(L, 2);
  (*arg1)->setParticlesPerSecond(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticlesystem_addColor__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Particlesystem > *arg1 = (boost::shared_ptr<love::Particlesystem > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  float arg6 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  if(!lua_isnumber(L,6)) SWIG_fail_arg(6);
  arg1=(boost::shared_ptr<love::Particlesystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t,0,1,"SmartParticlesystem_addColor");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  (*arg1)->addColor(arg2,arg3,arg4,arg5,arg6);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticlesystem_addColor__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Particlesystem > *arg1 = (boost::shared_ptr<love::Particlesystem > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  arg1=(boost::shared_ptr<love::Particlesystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t,0,1,"SmartParticlesystem_addColor");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  (*arg1)->addColor(arg2,arg3,arg4,arg5);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticlesystem_addColor__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Particlesystem > *arg1 = (boost::shared_ptr<love::Particlesystem > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(boost::shared_ptr<love::Particlesystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t,0,1,"SmartParticlesystem_addColor");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (*arg1)->addColor(arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticlesystem_addColor(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SmartParticlesystem_addColor__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_SmartParticlesystem_addColor__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_SmartParticlesystem_addColor__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'SmartParticlesystem_addColor'");
  lua_error(L);return 0;
}


static int _wrap_SmartParticlesystem_setSprite__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Particlesystem > *arg1 = (boost::shared_ptr<love::Particlesystem > *) 0 ;
  love::pSprite arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Particlesystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t,0,1,"SmartParticlesystem_setSprite");
  {
    love::pSprite * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_boost__shared_ptrTlove__Sprite_t,0)) SWIG_fail;
    arg2 = *argp;
  }
  (*arg1)->setSprite(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticlesystem_setSprite__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Particlesystem > *arg1 = (boost::shared_ptr<love::Particlesystem > *) 0 ;
  love::pImage *arg2 = (love::pImage *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Particlesystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t,0,1,"SmartParticlesystem_setSprite");
  arg2=(love::pImage *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__Image_t,0,2,"SmartParticlesystem_setSprite");
  love_Particlesystem_setSprite__SWIG_1((love::Particlesystem*)(arg1)->operator ->(),(love::pImage const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticlesystem_setSprite(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_boost__shared_ptrTlove__Sprite_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SmartParticlesystem_setSprite__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__Image_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SmartParticlesystem_setSprite__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'SmartParticlesystem_setSprite'");
  lua_error(L);return 0;
}


static int _wrap_SmartParticlesystem_setAdditiveBlending(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Particlesystem > *arg1 = (boost::shared_ptr<love::Particlesystem > *) 0 ;
  bool arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isboolean(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Particlesystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t,0,1,"SmartParticlesystem_setAdditiveBlending");
  arg2 = (bool)lua_toboolean(L, 2);
  (*arg1)->setAdditiveBlending(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticlesystem_setDirection__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Particlesystem > *arg1 = (boost::shared_ptr<love::Particlesystem > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(boost::shared_ptr<love::Particlesystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t,0,1,"SmartParticlesystem_setDirection");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (*arg1)->setDirection(arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticlesystem_setDirection__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Particlesystem > *arg1 = (boost::shared_ptr<love::Particlesystem > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(boost::shared_ptr<love::Particlesystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t,0,1,"SmartParticlesystem_setDirection");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (*arg1)->setDirection(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticlesystem_setDirection__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Particlesystem > *arg1 = (boost::shared_ptr<love::Particlesystem > *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Particlesystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t,0,1,"SmartParticlesystem_setDirection");
  arg2 = (float)lua_tonumber(L, 2);
  (*arg1)->setDirection(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticlesystem_setDirection(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SmartParticlesystem_setDirection__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SmartParticlesystem_setDirection__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SmartParticlesystem_setDirection__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'SmartParticlesystem_setDirection'");
  lua_error(L);return 0;
}


static int _wrap_SmartParticlesystem_setStartSpeed__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Particlesystem > *arg1 = (boost::shared_ptr<love::Particlesystem > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(boost::shared_ptr<love::Particlesystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t,0,1,"SmartParticlesystem_setStartSpeed");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (*arg1)->setStartSpeed(arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticlesystem_setStartSpeed__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Particlesystem > *arg1 = (boost::shared_ptr<love::Particlesystem > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(boost::shared_ptr<love::Particlesystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t,0,1,"SmartParticlesystem_setStartSpeed");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (*arg1)->setStartSpeed(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticlesystem_setStartSpeed__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Particlesystem > *arg1 = (boost::shared_ptr<love::Particlesystem > *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Particlesystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t,0,1,"SmartParticlesystem_setStartSpeed");
  arg2 = (float)lua_tonumber(L, 2);
  (*arg1)->setStartSpeed(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticlesystem_setStartSpeed(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SmartParticlesystem_setStartSpeed__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SmartParticlesystem_setStartSpeed__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SmartParticlesystem_setStartSpeed__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'SmartParticlesystem_setStartSpeed'");
  lua_error(L);return 0;
}


static int _wrap_SmartParticlesystem_setGravity__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Particlesystem > *arg1 = (boost::shared_ptr<love::Particlesystem > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(boost::shared_ptr<love::Particlesystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t,0,1,"SmartParticlesystem_setGravity");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (*arg1)->setGravity(arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticlesystem_setGravity__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Particlesystem > *arg1 = (boost::shared_ptr<love::Particlesystem > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(boost::shared_ptr<love::Particlesystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t,0,1,"SmartParticlesystem_setGravity");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (*arg1)->setGravity(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticlesystem_setGravity__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Particlesystem > *arg1 = (boost::shared_ptr<love::Particlesystem > *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Particlesystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t,0,1,"SmartParticlesystem_setGravity");
  arg2 = (float)lua_tonumber(L, 2);
  (*arg1)->setGravity(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticlesystem_setGravity(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SmartParticlesystem_setGravity__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SmartParticlesystem_setGravity__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SmartParticlesystem_setGravity__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'SmartParticlesystem_setGravity'");
  lua_error(L);return 0;
}


static int _wrap_SmartParticlesystem_setRadialAcc__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Particlesystem > *arg1 = (boost::shared_ptr<love::Particlesystem > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(boost::shared_ptr<love::Particlesystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t,0,1,"SmartParticlesystem_setRadialAcc");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (*arg1)->setRadialAcc(arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticlesystem_setRadialAcc__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Particlesystem > *arg1 = (boost::shared_ptr<love::Particlesystem > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(boost::shared_ptr<love::Particlesystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t,0,1,"SmartParticlesystem_setRadialAcc");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (*arg1)->setRadialAcc(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticlesystem_setRadialAcc__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Particlesystem > *arg1 = (boost::shared_ptr<love::Particlesystem > *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Particlesystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t,0,1,"SmartParticlesystem_setRadialAcc");
  arg2 = (float)lua_tonumber(L, 2);
  (*arg1)->setRadialAcc(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticlesystem_setRadialAcc(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SmartParticlesystem_setRadialAcc__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SmartParticlesystem_setRadialAcc__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SmartParticlesystem_setRadialAcc__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'SmartParticlesystem_setRadialAcc'");
  lua_error(L);return 0;
}


static int _wrap_SmartParticlesystem_setTangentialAcc__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Particlesystem > *arg1 = (boost::shared_ptr<love::Particlesystem > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(boost::shared_ptr<love::Particlesystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t,0,1,"SmartParticlesystem_setTangentialAcc");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (*arg1)->setTangentialAcc(arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticlesystem_setTangentialAcc__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Particlesystem > *arg1 = (boost::shared_ptr<love::Particlesystem > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(boost::shared_ptr<love::Particlesystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t,0,1,"SmartParticlesystem_setTangentialAcc");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (*arg1)->setTangentialAcc(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticlesystem_setTangentialAcc__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Particlesystem > *arg1 = (boost::shared_ptr<love::Particlesystem > *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Particlesystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t,0,1,"SmartParticlesystem_setTangentialAcc");
  arg2 = (float)lua_tonumber(L, 2);
  (*arg1)->setTangentialAcc(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticlesystem_setTangentialAcc(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SmartParticlesystem_setTangentialAcc__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SmartParticlesystem_setTangentialAcc__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SmartParticlesystem_setTangentialAcc__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'SmartParticlesystem_setTangentialAcc'");
  lua_error(L);return 0;
}


static int _wrap_SmartParticlesystem_setParticleLifetime__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Particlesystem > *arg1 = (boost::shared_ptr<love::Particlesystem > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(boost::shared_ptr<love::Particlesystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t,0,1,"SmartParticlesystem_setParticleLifetime");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (*arg1)->setParticleLifetime(arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticlesystem_setParticleLifetime__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Particlesystem > *arg1 = (boost::shared_ptr<love::Particlesystem > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(boost::shared_ptr<love::Particlesystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t,0,1,"SmartParticlesystem_setParticleLifetime");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (*arg1)->setParticleLifetime(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticlesystem_setParticleLifetime__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Particlesystem > *arg1 = (boost::shared_ptr<love::Particlesystem > *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Particlesystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t,0,1,"SmartParticlesystem_setParticleLifetime");
  arg2 = (float)lua_tonumber(L, 2);
  (*arg1)->setParticleLifetime(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticlesystem_setParticleLifetime(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SmartParticlesystem_setParticleLifetime__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SmartParticlesystem_setParticleLifetime__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SmartParticlesystem_setParticleLifetime__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'SmartParticlesystem_setParticleLifetime'");
  lua_error(L);return 0;
}


static int _wrap_SmartParticlesystem_setParticleSize__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Particlesystem > *arg1 = (boost::shared_ptr<love::Particlesystem > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(boost::shared_ptr<love::Particlesystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t,0,1,"SmartParticlesystem_setParticleSize");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (*arg1)->setParticleSize(arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticlesystem_setParticleSize__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Particlesystem > *arg1 = (boost::shared_ptr<love::Particlesystem > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(boost::shared_ptr<love::Particlesystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t,0,1,"SmartParticlesystem_setParticleSize");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (*arg1)->setParticleSize(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticlesystem_setParticleSize__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Particlesystem > *arg1 = (boost::shared_ptr<love::Particlesystem > *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Particlesystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t,0,1,"SmartParticlesystem_setParticleSize");
  arg2 = (float)lua_tonumber(L, 2);
  (*arg1)->setParticleSize(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticlesystem_setParticleSize(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SmartParticlesystem_setParticleSize__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SmartParticlesystem_setParticleSize__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SmartParticlesystem_setParticleSize__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'SmartParticlesystem_setParticleSize'");
  lua_error(L);return 0;
}


static int _wrap_SmartParticlesystem_setParticleSpin__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Particlesystem > *arg1 = (boost::shared_ptr<love::Particlesystem > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(boost::shared_ptr<love::Particlesystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t,0,1,"SmartParticlesystem_setParticleSpin");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (*arg1)->setParticleSpin(arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticlesystem_setParticleSpin__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Particlesystem > *arg1 = (boost::shared_ptr<love::Particlesystem > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(boost::shared_ptr<love::Particlesystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t,0,1,"SmartParticlesystem_setParticleSpin");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (*arg1)->setParticleSpin(arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticlesystem_setParticleSpin__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Particlesystem > *arg1 = (boost::shared_ptr<love::Particlesystem > *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Particlesystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t,0,1,"SmartParticlesystem_setParticleSpin");
  arg2 = (float)lua_tonumber(L, 2);
  (*arg1)->setParticleSpin(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartParticlesystem_setParticleSpin(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SmartParticlesystem_setParticleSpin__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SmartParticlesystem_setParticleSpin__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SmartParticlesystem_setParticleSpin__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'SmartParticlesystem_setParticleSpin'");
  lua_error(L);return 0;
}


static int _wrap_SmartParticlesystem_update(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Particlesystem > *arg1 = (boost::shared_ptr<love::Particlesystem > *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Particlesystem > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t,0,1,"SmartParticlesystem_update");
  arg2 = (float)lua_tonumber(L, 2);
  (*arg1)->update(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SmartParticlesystem(void *obj) {
boost::shared_ptr<love::Particlesystem > *arg1 = (boost::shared_ptr<love::Particlesystem > *) obj;
delete arg1;
}
static swig_lua_method swig_boost_shared_ptr_Sl_love_Particlesystem_Sg__methods[] = {
    {"__deref__", _wrap_SmartParticlesystem___deref__}, 
    {"setAutostart", _wrap_SmartParticlesystem_setAutostart}, 
    {"getNumParticles", _wrap_SmartParticlesystem_getNumParticles}, 
    {"isAdditive", _wrap_SmartParticlesystem_isAdditive}, 
    {"reset", _wrap_SmartParticlesystem_reset}, 
    {"setPosition", _wrap_SmartParticlesystem_setPosition}, 
    {"getLifetime", _wrap_SmartParticlesystem_getLifetime}, 
    {"setLifetime", _wrap_SmartParticlesystem_setLifetime}, 
    {"getAge", _wrap_SmartParticlesystem_getAge}, 
    {"setLinger", _wrap_SmartParticlesystem_setLinger}, 
    {"getLinger", _wrap_SmartParticlesystem_getLinger}, 
    {"isDead", _wrap_SmartParticlesystem_isDead}, 
    {"isActive", _wrap_SmartParticlesystem_isActive}, 
    {"setParticlesPerSecond", _wrap_SmartParticlesystem_setParticlesPerSecond}, 
    {"addColor", _wrap_SmartParticlesystem_addColor}, 
    {"setSprite", _wrap_SmartParticlesystem_setSprite}, 
    {"setAdditiveBlending", _wrap_SmartParticlesystem_setAdditiveBlending}, 
    {"setDirection", _wrap_SmartParticlesystem_setDirection}, 
    {"setStartSpeed", _wrap_SmartParticlesystem_setStartSpeed}, 
    {"setGravity", _wrap_SmartParticlesystem_setGravity}, 
    {"setRadialAcc", _wrap_SmartParticlesystem_setRadialAcc}, 
    {"setTangentialAcc", _wrap_SmartParticlesystem_setTangentialAcc}, 
    {"setParticleLifetime", _wrap_SmartParticlesystem_setParticleLifetime}, 
    {"setParticleSize", _wrap_SmartParticlesystem_setParticleSize}, 
    {"setParticleSpin", _wrap_SmartParticlesystem_setParticleSpin}, 
    {"update", _wrap_SmartParticlesystem_update}, 
    {0,0}
};
static swig_lua_attribute swig_boost_shared_ptr_Sl_love_Particlesystem_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_boost_shared_ptr_Sl_love_Particlesystem_Sg__bases[] = {0};
swig_lua_class _wrap_class_boost_shared_ptr_Sl_love_Particlesystem_Sg_ = { "SmartParticlesystem", &SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t,0, swig_delete_SmartParticlesystem, swig_boost_shared_ptr_Sl_love_Particlesystem_Sg__methods, swig_boost_shared_ptr_Sl_love_Particlesystem_Sg__attributes, swig_boost_shared_ptr_Sl_love_Particlesystem_Sg__bases };

static int _wrap_Graphics_setBackgroundColor__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::Graphics *arg1 = (love::Graphics *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(love::Graphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Graphics,0,1,"Graphics_setBackgroundColor");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->setBackgroundColor(arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Graphics_setColor__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::Graphics *arg1 = (love::Graphics *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  arg1=(love::Graphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Graphics,0,1,"Graphics_setColor");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  (arg1)->setColor(arg2,arg3,arg4,arg5);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Graphics_setColor__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::Graphics *arg1 = (love::Graphics *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(love::Graphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Graphics,0,1,"Graphics_setColor");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->setColor(arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Graphics_draw__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::Graphics *arg1 = (love::Graphics *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  float arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(love::Graphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Graphics,0,1,"Graphics_draw");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  ((love::Graphics const *)arg1)->draw((char const *)arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Graphics_draw__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::Graphics *arg1 = (love::Graphics *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  float arg4 ;
  int arg5 ;
  int arg6 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  if(!lua_isnumber(L,6)) SWIG_fail_arg(6);
  arg1=(love::Graphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Graphics,0,1,"Graphics_draw");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  ((love::Graphics const *)arg1)->draw((char const *)arg2,arg3,arg4,arg5,arg6);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Graphics_draw__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  love::Graphics *arg1 = (love::Graphics *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  float arg4 ;
  int arg5 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  arg1=(love::Graphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Graphics,0,1,"Graphics_draw");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  ((love::Graphics const *)arg1)->draw((char const *)arg2,arg3,arg4,arg5);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Graphics_drawLine__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::Graphics *arg1 = (love::Graphics *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  if(!lua_isnumber(L,6)) SWIG_fail_arg(6);
  if(!lua_isnumber(L,7)) SWIG_fail_arg(7);
  if(!lua_isnumber(L,8)) SWIG_fail_arg(8);
  arg1=(love::Graphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Graphics,0,1,"Graphics_drawLine");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  arg8 = (float)lua_tonumber(L, 8);
  ((love::Graphics const *)arg1)->drawLine(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Graphics_drawLine__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::Graphics *arg1 = (love::Graphics *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  if(!lua_isnumber(L,6)) SWIG_fail_arg(6);
  if(!lua_isnumber(L,7)) SWIG_fail_arg(7);
  arg1=(love::Graphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Graphics,0,1,"Graphics_drawLine");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  ((love::Graphics const *)arg1)->drawLine(arg2,arg3,arg4,arg5,arg6,arg7);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Graphics_drawLine(lua_State* L) {
  int argc;
  int argv[9]={
    1,2,3,4,5,6,7,8,9
  };
  
  argc = lua_gettop(L);
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Graphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_Graphics_drawLine__SWIG_1(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Graphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_Graphics_drawLine__SWIG_0(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'Graphics_drawLine'");
  lua_error(L);return 0;
}


static int _wrap_Graphics_drawTriangle__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::Graphics *arg1 = (love::Graphics *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  if(!lua_isnumber(L,6)) SWIG_fail_arg(6);
  if(!lua_isnumber(L,7)) SWIG_fail_arg(7);
  if(!lua_isnumber(L,8)) SWIG_fail_arg(8);
  if(!lua_isnumber(L,9)) SWIG_fail_arg(9);
  if(!lua_isnumber(L,10)) SWIG_fail_arg(10);
  arg1=(love::Graphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Graphics,0,1,"Graphics_drawTriangle");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  arg8 = (float)lua_tonumber(L, 8);
  arg9 = (float)lua_tonumber(L, 9);
  arg10 = (float)lua_tonumber(L, 10);
  ((love::Graphics const *)arg1)->drawTriangle(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Graphics_drawTriangle__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::Graphics *arg1 = (love::Graphics *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  if(!lua_isnumber(L,6)) SWIG_fail_arg(6);
  if(!lua_isnumber(L,7)) SWIG_fail_arg(7);
  if(!lua_isnumber(L,8)) SWIG_fail_arg(8);
  if(!lua_isnumber(L,9)) SWIG_fail_arg(9);
  arg1=(love::Graphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Graphics,0,1,"Graphics_drawTriangle");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  arg8 = (float)lua_tonumber(L, 8);
  arg9 = (float)lua_tonumber(L, 9);
  ((love::Graphics const *)arg1)->drawTriangle(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Graphics_drawTriangle(lua_State* L) {
  int argc;
  int argv[11]={
    1,2,3,4,5,6,7,8,9,10,11
  };
  
  argc = lua_gettop(L);
  if (argc == 9) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Graphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      return _wrap_Graphics_drawTriangle__SWIG_1(L);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Graphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        return _wrap_Graphics_drawTriangle__SWIG_0(L);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'Graphics_drawTriangle'");
  lua_error(L);return 0;
}


static int _wrap_Graphics_fillTriangle(lua_State* L) {
  int SWIG_arg = -1;
  love::Graphics *arg1 = (love::Graphics *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  if(!lua_isnumber(L,6)) SWIG_fail_arg(6);
  if(!lua_isnumber(L,7)) SWIG_fail_arg(7);
  if(!lua_isnumber(L,8)) SWIG_fail_arg(8);
  if(!lua_isnumber(L,9)) SWIG_fail_arg(9);
  arg1=(love::Graphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Graphics,0,1,"Graphics_fillTriangle");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  arg8 = (float)lua_tonumber(L, 8);
  arg9 = (float)lua_tonumber(L, 9);
  ((love::Graphics const *)arg1)->fillTriangle(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Graphics_drawQuad__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::Graphics *arg1 = (love::Graphics *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  float arg11 ;
  float arg12 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  if(!lua_isnumber(L,6)) SWIG_fail_arg(6);
  if(!lua_isnumber(L,7)) SWIG_fail_arg(7);
  if(!lua_isnumber(L,8)) SWIG_fail_arg(8);
  if(!lua_isnumber(L,9)) SWIG_fail_arg(9);
  if(!lua_isnumber(L,10)) SWIG_fail_arg(10);
  if(!lua_isnumber(L,11)) SWIG_fail_arg(11);
  if(!lua_isnumber(L,12)) SWIG_fail_arg(12);
  arg1=(love::Graphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Graphics,0,1,"Graphics_drawQuad");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  arg8 = (float)lua_tonumber(L, 8);
  arg9 = (float)lua_tonumber(L, 9);
  arg10 = (float)lua_tonumber(L, 10);
  arg11 = (float)lua_tonumber(L, 11);
  arg12 = (float)lua_tonumber(L, 12);
  ((love::Graphics const *)arg1)->drawQuad(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Graphics_drawQuad__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::Graphics *arg1 = (love::Graphics *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  float arg11 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  if(!lua_isnumber(L,6)) SWIG_fail_arg(6);
  if(!lua_isnumber(L,7)) SWIG_fail_arg(7);
  if(!lua_isnumber(L,8)) SWIG_fail_arg(8);
  if(!lua_isnumber(L,9)) SWIG_fail_arg(9);
  if(!lua_isnumber(L,10)) SWIG_fail_arg(10);
  if(!lua_isnumber(L,11)) SWIG_fail_arg(11);
  arg1=(love::Graphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Graphics,0,1,"Graphics_drawQuad");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  arg8 = (float)lua_tonumber(L, 8);
  arg9 = (float)lua_tonumber(L, 9);
  arg10 = (float)lua_tonumber(L, 10);
  arg11 = (float)lua_tonumber(L, 11);
  ((love::Graphics const *)arg1)->drawQuad(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Graphics_drawQuad(lua_State* L) {
  int argc;
  int argv[13]={
    1,2,3,4,5,6,7,8,9,10,11,12,13
  };
  
  argc = lua_gettop(L);
  if (argc == 11) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Graphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        {
                          _v = lua_isnumber(L,argv[10]);
                        }
                        if (_v) {
                          return _wrap_Graphics_drawQuad__SWIG_1(L);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 12) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Graphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        {
                          _v = lua_isnumber(L,argv[10]);
                        }
                        if (_v) {
                          {
                            _v = lua_isnumber(L,argv[11]);
                          }
                          if (_v) {
                            return _wrap_Graphics_drawQuad__SWIG_0(L);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'Graphics_drawQuad'");
  lua_error(L);return 0;
}


static int _wrap_Graphics_fillQuad(lua_State* L) {
  int SWIG_arg = -1;
  love::Graphics *arg1 = (love::Graphics *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  float arg11 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  if(!lua_isnumber(L,6)) SWIG_fail_arg(6);
  if(!lua_isnumber(L,7)) SWIG_fail_arg(7);
  if(!lua_isnumber(L,8)) SWIG_fail_arg(8);
  if(!lua_isnumber(L,9)) SWIG_fail_arg(9);
  if(!lua_isnumber(L,10)) SWIG_fail_arg(10);
  if(!lua_isnumber(L,11)) SWIG_fail_arg(11);
  arg1=(love::Graphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Graphics,0,1,"Graphics_fillQuad");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  arg8 = (float)lua_tonumber(L, 8);
  arg9 = (float)lua_tonumber(L, 9);
  arg10 = (float)lua_tonumber(L, 10);
  arg11 = (float)lua_tonumber(L, 11);
  ((love::Graphics const *)arg1)->fillQuad(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Graphics_drawCircle__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::Graphics *arg1 = (love::Graphics *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  if(!lua_isnumber(L,6)) SWIG_fail_arg(6);
  arg1=(love::Graphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Graphics,0,1,"Graphics_drawCircle");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  ((love::Graphics const *)arg1)->drawCircle(arg2,arg3,arg4,arg5,arg6);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Graphics_drawCircle__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::Graphics *arg1 = (love::Graphics *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  arg1=(love::Graphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Graphics,0,1,"Graphics_drawCircle");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  ((love::Graphics const *)arg1)->drawCircle(arg2,arg3,arg4,arg5);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Graphics_drawCircle__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  love::Graphics *arg1 = (love::Graphics *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(love::Graphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Graphics,0,1,"Graphics_drawCircle");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  ((love::Graphics const *)arg1)->drawCircle(arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Graphics_drawCircle(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Graphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Graphics_drawCircle__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Graphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_Graphics_drawCircle__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Graphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_Graphics_drawCircle__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'Graphics_drawCircle'");
  lua_error(L);return 0;
}


static int _wrap_Graphics_fillCircle__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::Graphics *arg1 = (love::Graphics *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  arg1=(love::Graphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Graphics,0,1,"Graphics_fillCircle");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  ((love::Graphics const *)arg1)->fillCircle(arg2,arg3,arg4,arg5);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Graphics_fillCircle__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::Graphics *arg1 = (love::Graphics *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(love::Graphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Graphics,0,1,"Graphics_fillCircle");
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  ((love::Graphics const *)arg1)->fillCircle(arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Graphics_fillCircle(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Graphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Graphics_fillCircle__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Graphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_Graphics_fillCircle__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'Graphics_fillCircle'");
  lua_error(L);return 0;
}


static int _wrap_Graphics_setBlendMode(lua_State* L) {
  int SWIG_arg = -1;
  love::Graphics *arg1 = (love::Graphics *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Graphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Graphics,0,1,"Graphics_setBlendMode");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setBlendMode(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Graphics_getBlendMode(lua_State* L) {
  int SWIG_arg = -1;
  love::Graphics *arg1 = (love::Graphics *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Graphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Graphics,0,1,"Graphics_getBlendMode");
  result = (int)((love::Graphics const *)arg1)->getBlendMode();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Graphics_setColorMode(lua_State* L) {
  int SWIG_arg = -1;
  love::Graphics *arg1 = (love::Graphics *) 0 ;
  int arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Graphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Graphics,0,1,"Graphics_setColorMode");
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setColorMode(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Graphics_getColorMode(lua_State* L) {
  int SWIG_arg = -1;
  love::Graphics *arg1 = (love::Graphics *) 0 ;
  int result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Graphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Graphics,0,1,"Graphics_getColorMode");
  result = (int)((love::Graphics const *)arg1)->getColorMode();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Graphics_setBackgroundColor__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::Graphics *arg1 = (love::Graphics *) 0 ;
  love::pColor *arg2 = (love::pColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::Graphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Graphics,0,1,"Graphics_setBackgroundColor");
  arg2=(love::pColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__Color_t,0,2,"Graphics_setBackgroundColor");
  love_Graphics_setBackgroundColor__SWIG_1(arg1,(boost::shared_ptr<love::Color > const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Graphics_setBackgroundColor(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Graphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__Color_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Graphics_setBackgroundColor__SWIG_1(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Graphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Graphics_setBackgroundColor__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'Graphics_setBackgroundColor'");
  lua_error(L);return 0;
}


static int _wrap_Graphics_setColor__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  love::Graphics *arg1 = (love::Graphics *) 0 ;
  love::pColor *arg2 = (love::pColor *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::Graphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Graphics,0,1,"Graphics_setColor");
  arg2=(love::pColor *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__Color_t,0,2,"Graphics_setColor");
  love_Graphics_setColor__SWIG_2(arg1,(boost::shared_ptr<love::Color > const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Graphics_setColor(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Graphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__Color_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Graphics_setColor__SWIG_2(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Graphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Graphics_setColor__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Graphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_Graphics_setColor__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'Graphics_setColor'");
  lua_error(L);return 0;
}


static int _wrap_Graphics_setFont(lua_State* L) {
  int SWIG_arg = -1;
  love::Graphics *arg1 = (love::Graphics *) 0 ;
  love::pFont *arg2 = (love::pFont *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::Graphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Graphics,0,1,"Graphics_setFont");
  arg2=(love::pFont *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__Font_t,0,2,"Graphics_setFont");
  love_Graphics_setFont(arg1,(boost::shared_ptr<love::Font > const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Graphics_draw__SWIG_3(lua_State* L) {
  int SWIG_arg = -1;
  love::Graphics *arg1 = (love::Graphics *) 0 ;
  love::pImage *arg2 = (love::pImage *) 0 ;
  float arg3 ;
  float arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(love::Graphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Graphics,0,1,"Graphics_draw");
  arg2=(love::pImage *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__Image_t,0,2,"Graphics_draw");
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  love_Graphics_draw__SWIG_3(arg1,(boost::shared_ptr<love::Image > const *)arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Graphics_draw__SWIG_4(lua_State* L) {
  int SWIG_arg = -1;
  love::Graphics *arg1 = (love::Graphics *) 0 ;
  love::pImage *arg2 = (love::pImage *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  if(!lua_isnumber(L,6)) SWIG_fail_arg(6);
  arg1=(love::Graphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Graphics,0,1,"Graphics_draw");
  arg2=(love::pImage *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__Image_t,0,2,"Graphics_draw");
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  love_Graphics_draw__SWIG_4(arg1,(boost::shared_ptr<love::Image > const *)arg2,arg3,arg4,arg5,arg6);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Graphics_draw__SWIG_5(lua_State* L) {
  int SWIG_arg = -1;
  love::Graphics *arg1 = (love::Graphics *) 0 ;
  love::pImage *arg2 = (love::pImage *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  arg1=(love::Graphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Graphics,0,1,"Graphics_draw");
  arg2=(love::pImage *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__Image_t,0,2,"Graphics_draw");
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  love_Graphics_draw__SWIG_4(arg1,(boost::shared_ptr<love::Image > const *)arg2,arg3,arg4,arg5);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Graphics_draw__SWIG_6(lua_State* L) {
  int SWIG_arg = -1;
  love::Graphics *arg1 = (love::Graphics *) 0 ;
  love::pImage *arg2 = (love::pImage *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  if(!lua_isnumber(L,6)) SWIG_fail_arg(6);
  if(!lua_isnumber(L,7)) SWIG_fail_arg(7);
  arg1=(love::Graphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Graphics,0,1,"Graphics_draw");
  arg2=(love::pImage *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__Image_t,0,2,"Graphics_draw");
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  love_Graphics_draw__SWIG_6(arg1,(boost::shared_ptr<love::Image > const *)arg2,arg3,arg4,arg5,arg6,arg7);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Graphics_draw__SWIG_7(lua_State* L) {
  int SWIG_arg = -1;
  love::Graphics *arg1 = (love::Graphics *) 0 ;
  love::pAnimation *arg2 = (love::pAnimation *) 0 ;
  float arg3 ;
  float arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(love::Graphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Graphics,0,1,"Graphics_draw");
  arg2=(love::pAnimation *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__Animation_t,0,2,"Graphics_draw");
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  love_Graphics_draw__SWIG_7(arg1,(boost::shared_ptr<love::Animation > const *)arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Graphics_draw__SWIG_8(lua_State* L) {
  int SWIG_arg = -1;
  love::Graphics *arg1 = (love::Graphics *) 0 ;
  love::pAnimation *arg2 = (love::pAnimation *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  if(!lua_isnumber(L,6)) SWIG_fail_arg(6);
  arg1=(love::Graphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Graphics,0,1,"Graphics_draw");
  arg2=(love::pAnimation *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__Animation_t,0,2,"Graphics_draw");
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  love_Graphics_draw__SWIG_8(arg1,(boost::shared_ptr<love::Animation > const *)arg2,arg3,arg4,arg5,arg6);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Graphics_draw__SWIG_9(lua_State* L) {
  int SWIG_arg = -1;
  love::Graphics *arg1 = (love::Graphics *) 0 ;
  love::pAnimation *arg2 = (love::pAnimation *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  arg1=(love::Graphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Graphics,0,1,"Graphics_draw");
  arg2=(love::pAnimation *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__Animation_t,0,2,"Graphics_draw");
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  love_Graphics_draw__SWIG_8(arg1,(boost::shared_ptr<love::Animation > const *)arg2,arg3,arg4,arg5);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Graphics_draw__SWIG_10(lua_State* L) {
  int SWIG_arg = -1;
  love::Graphics *arg1 = (love::Graphics *) 0 ;
  love::pAnimation *arg2 = (love::pAnimation *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  if(!lua_isnumber(L,6)) SWIG_fail_arg(6);
  if(!lua_isnumber(L,7)) SWIG_fail_arg(7);
  arg1=(love::Graphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Graphics,0,1,"Graphics_draw");
  arg2=(love::pAnimation *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__Animation_t,0,2,"Graphics_draw");
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  love_Graphics_draw__SWIG_10(arg1,(boost::shared_ptr<love::Animation > const *)arg2,arg3,arg4,arg5,arg6,arg7);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Graphics_draw__SWIG_11(lua_State* L) {
  int SWIG_arg = -1;
  love::Graphics *arg1 = (love::Graphics *) 0 ;
  love::pParticlesystem *arg2 = (love::pParticlesystem *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::Graphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Graphics,0,1,"Graphics_draw");
  arg2=(love::pParticlesystem *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t,0,2,"Graphics_draw");
  love_Graphics_draw__SWIG_11(arg1,(boost::shared_ptr<love::Particlesystem > const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Graphics_draw__SWIG_12(lua_State* L) {
  int SWIG_arg = -1;
  love::Graphics *arg1 = (love::Graphics *) 0 ;
  love::pParticlesystem *arg2 = (love::pParticlesystem *) 0 ;
  float arg3 ;
  float arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(love::Graphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Graphics,0,1,"Graphics_draw");
  arg2=(love::pParticlesystem *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t,0,2,"Graphics_draw");
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  love_Graphics_draw__SWIG_12(arg1,(boost::shared_ptr<love::Particlesystem > const *)arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Graphics_draw(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Graphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Graphics_draw__SWIG_11(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Graphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__Image_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Graphics_draw__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Graphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__Animation_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Graphics_draw__SWIG_7(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Graphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Graphics_draw__SWIG_12(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Graphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Graphics_draw__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Graphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__Animation_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_Graphics_draw__SWIG_9(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Graphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__Image_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_Graphics_draw__SWIG_5(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Graphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_Graphics_draw__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Graphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__Image_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_Graphics_draw__SWIG_4(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Graphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__Animation_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_Graphics_draw__SWIG_8(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Graphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_Graphics_draw__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Graphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__Image_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_Graphics_draw__SWIG_6(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Graphics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__Animation_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_Graphics_draw__SWIG_10(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'Graphics_draw'");
  lua_error(L);return 0;
}


static int _wrap_delete_Graphics(lua_State* L) {
  int SWIG_arg = -1;
  love::Graphics *arg1 = (love::Graphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Graphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Graphics,0,1,"delete_Graphics");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Graphics(void *obj) {
love::Graphics *arg1 = (love::Graphics *) obj;
delete arg1;
}
static swig_lua_method swig_love_Graphics_methods[] = {
    {"drawLine", _wrap_Graphics_drawLine}, 
    {"drawTriangle", _wrap_Graphics_drawTriangle}, 
    {"fillTriangle", _wrap_Graphics_fillTriangle}, 
    {"drawQuad", _wrap_Graphics_drawQuad}, 
    {"fillQuad", _wrap_Graphics_fillQuad}, 
    {"drawCircle", _wrap_Graphics_drawCircle}, 
    {"fillCircle", _wrap_Graphics_fillCircle}, 
    {"setBlendMode", _wrap_Graphics_setBlendMode}, 
    {"getBlendMode", _wrap_Graphics_getBlendMode}, 
    {"setColorMode", _wrap_Graphics_setColorMode}, 
    {"getColorMode", _wrap_Graphics_getColorMode}, 
    {"setBackgroundColor", _wrap_Graphics_setBackgroundColor}, 
    {"setColor", _wrap_Graphics_setColor}, 
    {"setFont", _wrap_Graphics_setFont}, 
    {"draw", _wrap_Graphics_draw}, 
    {0,0}
};
static swig_lua_attribute swig_love_Graphics_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_love_Graphics_bases[] = {&_wrap_class_love_Device,0};
swig_lua_class _wrap_class_love_Graphics = { "Graphics", &SWIGTYPE_p_love__Graphics,0, swig_delete_Graphics, swig_love_Graphics_methods, swig_love_Graphics_attributes, swig_love_Graphics_bases };

static int _wrap_Sound_setVolume(lua_State* L) {
  int SWIG_arg = -1;
  love::Sound *arg1 = (love::Sound *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Sound *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Sound,0,1,"Sound_setVolume");
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setVolume(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_Sound(lua_State* L) {
  int SWIG_arg = -1;
  love::Sound *arg1 = (love::Sound *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Sound *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Sound,0,1,"delete_Sound");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Sound(void *obj) {
love::Sound *arg1 = (love::Sound *) obj;
delete arg1;
}
static swig_lua_method swig_love_Sound_methods[] = {
    {"setVolume", _wrap_Sound_setVolume}, 
    {0,0}
};
static swig_lua_attribute swig_love_Sound_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_love_Sound_bases[] = {0};
swig_lua_class _wrap_class_love_Sound = { "Sound", &SWIGTYPE_p_love__Sound,0, swig_delete_Sound, swig_love_Sound_methods, swig_love_Sound_attributes, swig_love_Sound_bases };

static int _wrap_SmartSound___deref__(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Sound > *arg1 = (boost::shared_ptr<love::Sound > *) 0 ;
  love::Sound *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Sound > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Sound_t,0,1,"SmartSound___deref__");
  result = (love::Sound *)((boost::shared_ptr<love::Sound > const *)arg1)->operator ->();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__Sound,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_SmartSound(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Sound > *arg1 = (boost::shared_ptr<love::Sound > *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Sound > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Sound_t,0,1,"delete_SmartSound");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartSound_setVolume(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Sound > *arg1 = (boost::shared_ptr<love::Sound > *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(boost::shared_ptr<love::Sound > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Sound_t,0,1,"SmartSound_setVolume");
  arg2 = (float)lua_tonumber(L, 2);
  (*arg1)->setVolume(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SmartSound(void *obj) {
boost::shared_ptr<love::Sound > *arg1 = (boost::shared_ptr<love::Sound > *) obj;
delete arg1;
}
static swig_lua_method swig_boost_shared_ptr_Sl_love_Sound_Sg__methods[] = {
    {"__deref__", _wrap_SmartSound___deref__}, 
    {"setVolume", _wrap_SmartSound_setVolume}, 
    {0,0}
};
static swig_lua_attribute swig_boost_shared_ptr_Sl_love_Sound_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_boost_shared_ptr_Sl_love_Sound_Sg__bases[] = {0};
swig_lua_class _wrap_class_boost_shared_ptr_Sl_love_Sound_Sg_ = { "SmartSound", &SWIGTYPE_p_boost__shared_ptrTlove__Sound_t,0, swig_delete_SmartSound, swig_boost_shared_ptr_Sl_love_Sound_Sg__methods, swig_boost_shared_ptr_Sl_love_Sound_Sg__attributes, swig_boost_shared_ptr_Sl_love_Sound_Sg__bases };

static int _wrap_delete_Music(lua_State* L) {
  int SWIG_arg = -1;
  love::Music *arg1 = (love::Music *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Music *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Music,0,1,"delete_Music");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Music(void *obj) {
love::Music *arg1 = (love::Music *) obj;
delete arg1;
}
static swig_lua_method swig_love_Music_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_love_Music_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_love_Music_bases[] = {0};
swig_lua_class _wrap_class_love_Music = { "Music", &SWIGTYPE_p_love__Music,0, swig_delete_Music, swig_love_Music_methods, swig_love_Music_attributes, swig_love_Music_bases };

static int _wrap_SmartMusic___deref__(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Music > *arg1 = (boost::shared_ptr<love::Music > *) 0 ;
  love::Music *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Music > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Music_t,0,1,"SmartMusic___deref__");
  result = (love::Music *)((boost::shared_ptr<love::Music > const *)arg1)->operator ->();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__Music,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_SmartMusic(lua_State* L) {
  int SWIG_arg = -1;
  boost::shared_ptr<love::Music > *arg1 = (boost::shared_ptr<love::Music > *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(boost::shared_ptr<love::Music > *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_boost__shared_ptrTlove__Music_t,0,1,"delete_SmartMusic");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SmartMusic(void *obj) {
boost::shared_ptr<love::Music > *arg1 = (boost::shared_ptr<love::Music > *) obj;
delete arg1;
}
static swig_lua_method swig_boost_shared_ptr_Sl_love_Music_Sg__methods[] = {
    {"__deref__", _wrap_SmartMusic___deref__}, 
    {0,0}
};
static swig_lua_attribute swig_boost_shared_ptr_Sl_love_Music_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_boost_shared_ptr_Sl_love_Music_Sg__bases[] = {0};
swig_lua_class _wrap_class_boost_shared_ptr_Sl_love_Music_Sg_ = { "SmartMusic", &SWIGTYPE_p_boost__shared_ptrTlove__Music_t,0, swig_delete_SmartMusic, swig_boost_shared_ptr_Sl_love_Music_Sg__methods, swig_boost_shared_ptr_Sl_love_Music_Sg__attributes, swig_boost_shared_ptr_Sl_love_Music_Sg__bases };

static int _wrap_Audio_isPlaying(lua_State* L) {
  int SWIG_arg = -1;
  love::Audio *arg1 = (love::Audio *) 0 ;
  bool result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Audio *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Audio,0,1,"Audio_isPlaying");
  result = (bool)((love::Audio const *)arg1)->isPlaying();
  SWIG_arg=0;
  lua_pushboolean(L,(int)result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Audio_isPaused(lua_State* L) {
  int SWIG_arg = -1;
  love::Audio *arg1 = (love::Audio *) 0 ;
  bool result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Audio *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Audio,0,1,"Audio_isPaused");
  result = (bool)((love::Audio const *)arg1)->isPaused();
  SWIG_arg=0;
  lua_pushboolean(L,(int)result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Audio_pause(lua_State* L) {
  int SWIG_arg = -1;
  love::Audio *arg1 = (love::Audio *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Audio *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Audio,0,1,"Audio_pause");
  ((love::Audio const *)arg1)->pause();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Audio_stop(lua_State* L) {
  int SWIG_arg = -1;
  love::Audio *arg1 = (love::Audio *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Audio *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Audio,0,1,"Audio_stop");
  ((love::Audio const *)arg1)->stop();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Audio_resume(lua_State* L) {
  int SWIG_arg = -1;
  love::Audio *arg1 = (love::Audio *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Audio *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Audio,0,1,"Audio_resume");
  ((love::Audio const *)arg1)->resume();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Audio_setVolume(lua_State* L) {
  int SWIG_arg = -1;
  love::Audio *arg1 = (love::Audio *) 0 ;
  float arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Audio *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Audio,0,1,"Audio_setVolume");
  arg2 = (float)lua_tonumber(L, 2);
  ((love::Audio const *)arg1)->setVolume(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Audio_play__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::Audio *arg1 = (love::Audio *) 0 ;
  love::pSound *arg2 = (love::pSound *) 0 ;
  int arg3 ;
  int arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(love::Audio *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Audio,0,1,"Audio_play");
  arg2=(love::pSound *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__Sound_t,0,2,"Audio_play");
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  love_Audio_play__SWIG_0(arg1,(boost::shared_ptr<love::Sound > const *)arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Audio_play__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::Audio *arg1 = (love::Audio *) 0 ;
  love::pSound *arg2 = (love::pSound *) 0 ;
  int arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::Audio *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Audio,0,1,"Audio_play");
  arg2=(love::pSound *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__Sound_t,0,2,"Audio_play");
  arg3 = (int)lua_tonumber(L, 3);
  love_Audio_play__SWIG_0(arg1,(boost::shared_ptr<love::Sound > const *)arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Audio_play__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  love::Audio *arg1 = (love::Audio *) 0 ;
  love::pSound *arg2 = (love::pSound *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::Audio *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Audio,0,1,"Audio_play");
  arg2=(love::pSound *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__Sound_t,0,2,"Audio_play");
  love_Audio_play__SWIG_0(arg1,(boost::shared_ptr<love::Sound > const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Audio_play__SWIG_3(lua_State* L) {
  int SWIG_arg = -1;
  love::Audio *arg1 = (love::Audio *) 0 ;
  love::pMusic *arg2 = (love::pMusic *) 0 ;
  int arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::Audio *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Audio,0,1,"Audio_play");
  arg2=(love::pMusic *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__Music_t,0,2,"Audio_play");
  arg3 = (int)lua_tonumber(L, 3);
  love_Audio_play__SWIG_3(arg1,(boost::shared_ptr<love::Music > const *)arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Audio_play__SWIG_4(lua_State* L) {
  int SWIG_arg = -1;
  love::Audio *arg1 = (love::Audio *) 0 ;
  love::pMusic *arg2 = (love::pMusic *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::Audio *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Audio,0,1,"Audio_play");
  arg2=(love::pMusic *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__Music_t,0,2,"Audio_play");
  love_Audio_play__SWIG_3(arg1,(boost::shared_ptr<love::Music > const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Audio_play(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Audio, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__Sound_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Audio_play__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Audio, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__Music_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Audio_play__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Audio, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__Music_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Audio_play__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Audio, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__Sound_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Audio_play__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__Audio, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__Sound_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Audio_play__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'Audio_play'");
  lua_error(L);return 0;
}


static int _wrap_delete_Audio(lua_State* L) {
  int SWIG_arg = -1;
  love::Audio *arg1 = (love::Audio *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Audio *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Audio,0,1,"delete_Audio");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Audio(void *obj) {
love::Audio *arg1 = (love::Audio *) obj;
delete arg1;
}
static swig_lua_method swig_love_Audio_methods[] = {
    {"isPlaying", _wrap_Audio_isPlaying}, 
    {"isPaused", _wrap_Audio_isPaused}, 
    {"pause", _wrap_Audio_pause}, 
    {"stop", _wrap_Audio_stop}, 
    {"resume", _wrap_Audio_resume}, 
    {"setVolume", _wrap_Audio_setVolume}, 
    {"play", _wrap_Audio_play}, 
    {0,0}
};
static swig_lua_attribute swig_love_Audio_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_love_Audio_bases[] = {&_wrap_class_love_Device,0};
swig_lua_class _wrap_class_love_Audio = { "Audio", &SWIGTYPE_p_love__Audio,0, swig_delete_Audio, swig_love_Audio_methods, swig_love_Audio_attributes, swig_love_Audio_bases };

static int _wrap_Filesystem_include(lua_State* L) {
  int SWIG_arg = -1;
  love::Filesystem *arg1 = (love::Filesystem *) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(love::Filesystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Filesystem,0,1,"Filesystem_include");
  arg2 = (char*)lua_tostring(L, 2);
  love_Filesystem_include(arg1,(char const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_Filesystem(lua_State* L) {
  int SWIG_arg = -1;
  love::Filesystem *arg1 = (love::Filesystem *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Filesystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Filesystem,0,1,"delete_Filesystem");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Filesystem(void *obj) {
love::Filesystem *arg1 = (love::Filesystem *) obj;
delete arg1;
}
static swig_lua_method swig_love_Filesystem_methods[] = {
    {"include", _wrap_Filesystem_include}, 
    {0,0}
};
static swig_lua_attribute swig_love_Filesystem_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_love_Filesystem_bases[] = {&_wrap_class_love_Device,0};
swig_lua_class _wrap_class_love_Filesystem = { "Filesystem", &SWIGTYPE_p_love__Filesystem,0, swig_delete_Filesystem, swig_love_Filesystem_methods, swig_love_Filesystem_attributes, swig_love_Filesystem_bases };

static int _wrap_Timer_getDelta(lua_State* L) {
  int SWIG_arg = -1;
  love::Timer *arg1 = (love::Timer *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Timer *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Timer,0,1,"Timer_getDelta");
  result = (float)(arg1)->getDelta();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_startBenchmark(lua_State* L) {
  int SWIG_arg = -1;
  love::Timer *arg1 = (love::Timer *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Timer *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Timer,0,1,"Timer_startBenchmark");
  (arg1)->startBenchmark();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_endBenchmark(lua_State* L) {
  int SWIG_arg = -1;
  love::Timer *arg1 = (love::Timer *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Timer *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Timer,0,1,"Timer_endBenchmark");
  result = (float)(arg1)->endBenchmark();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_getFps(lua_State* L) {
  int SWIG_arg = -1;
  love::Timer *arg1 = (love::Timer *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Timer *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Timer,0,1,"Timer_getFps");
  result = (float)((love::Timer const *)arg1)->getFps();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_Timer(lua_State* L) {
  int SWIG_arg = -1;
  love::Timer *arg1 = (love::Timer *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Timer *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Timer,0,1,"delete_Timer");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Timer(void *obj) {
love::Timer *arg1 = (love::Timer *) obj;
delete arg1;
}
static swig_lua_method swig_love_Timer_methods[] = {
    {"getDelta", _wrap_Timer_getDelta}, 
    {"startBenchmark", _wrap_Timer_startBenchmark}, 
    {"endBenchmark", _wrap_Timer_endBenchmark}, 
    {"getFps", _wrap_Timer_getFps}, 
    {0,0}
};
static swig_lua_attribute swig_love_Timer_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_love_Timer_bases[] = {&_wrap_class_love_Device,0};
swig_lua_class _wrap_class_love_Timer = { "Timer", &SWIGTYPE_p_love__Timer,0, swig_delete_Timer, swig_love_Timer_methods, swig_love_Timer_attributes, swig_love_Timer_bases };

static int _wrap_Mouse_getX(lua_State* L) {
  int SWIG_arg = -1;
  love::Mouse *arg1 = (love::Mouse *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Mouse *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Mouse,0,1,"Mouse_getX");
  result = (float)((love::Mouse const *)arg1)->getX();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mouse_getY(lua_State* L) {
  int SWIG_arg = -1;
  love::Mouse *arg1 = (love::Mouse *) 0 ;
  float result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Mouse *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Mouse,0,1,"Mouse_getY");
  result = (float)((love::Mouse const *)arg1)->getY();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mouse_isDown(lua_State* L) {
  int SWIG_arg = -1;
  love::Mouse *arg1 = (love::Mouse *) 0 ;
  int arg2 ;
  bool result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Mouse *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Mouse,0,1,"Mouse_isDown");
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)((love::Mouse const *)arg1)->isDown(arg2);
  SWIG_arg=0;
  lua_pushboolean(L,(int)result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mouse_setVisible(lua_State* L) {
  int SWIG_arg = -1;
  love::Mouse *arg1 = (love::Mouse *) 0 ;
  bool arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isboolean(L,2)) SWIG_fail_arg(2);
  arg1=(love::Mouse *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Mouse,0,1,"Mouse_setVisible");
  arg2 = (bool)lua_toboolean(L, 2);
  (arg1)->setVisible(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mouse_isVisible(lua_State* L) {
  int SWIG_arg = -1;
  love::Mouse *arg1 = (love::Mouse *) 0 ;
  bool result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Mouse *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Mouse,0,1,"Mouse_isVisible");
  result = (bool)((love::Mouse const *)arg1)->isVisible();
  SWIG_arg=0;
  lua_pushboolean(L,(int)result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_Mouse(lua_State* L) {
  int SWIG_arg = -1;
  love::Mouse *arg1 = (love::Mouse *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Mouse *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Mouse,0,1,"delete_Mouse");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Mouse(void *obj) {
love::Mouse *arg1 = (love::Mouse *) obj;
delete arg1;
}
static swig_lua_method swig_love_Mouse_methods[] = {
    {"getX", _wrap_Mouse_getX}, 
    {"getY", _wrap_Mouse_getY}, 
    {"isDown", _wrap_Mouse_isDown}, 
    {"setVisible", _wrap_Mouse_setVisible}, 
    {"isVisible", _wrap_Mouse_isVisible}, 
    {0,0}
};
static swig_lua_attribute swig_love_Mouse_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_love_Mouse_bases[] = {&_wrap_class_love_Device,0};
swig_lua_class _wrap_class_love_Mouse = { "Mouse", &SWIGTYPE_p_love__Mouse,0, swig_delete_Mouse, swig_love_Mouse_methods, swig_love_Mouse_attributes, swig_love_Mouse_bases };

static int _wrap_Keyboard_isDown(lua_State* L) {
  int SWIG_arg = -1;
  love::Keyboard *arg1 = (love::Keyboard *) 0 ;
  int arg2 ;
  bool result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  arg1=(love::Keyboard *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Keyboard,0,1,"Keyboard_isDown");
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)((love::Keyboard const *)arg1)->isDown(arg2);
  SWIG_arg=0;
  lua_pushboolean(L,(int)result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_Keyboard(lua_State* L) {
  int SWIG_arg = -1;
  love::Keyboard *arg1 = (love::Keyboard *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Keyboard *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Keyboard,0,1,"delete_Keyboard");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Keyboard(void *obj) {
love::Keyboard *arg1 = (love::Keyboard *) obj;
delete arg1;
}
static swig_lua_method swig_love_Keyboard_methods[] = {
    {"isDown", _wrap_Keyboard_isDown}, 
    {0,0}
};
static swig_lua_attribute swig_love_Keyboard_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_love_Keyboard_bases[] = {&_wrap_class_love_Device,0};
swig_lua_class _wrap_class_love_Keyboard = { "Keyboard", &SWIGTYPE_p_love__Keyboard,0, swig_delete_Keyboard, swig_love_Keyboard_methods, swig_love_Keyboard_attributes, swig_love_Keyboard_bases };

static int _wrap_graphics_set(lua_State* L) {
  int SWIG_arg = -1;
  love::Graphics *arg1 = (love::Graphics *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Graphics *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Graphics,0,1,"graphics_set");
  love::graphics = arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_graphics_get(lua_State* L) {
  int SWIG_arg = -1;
  love::Graphics *result = 0 ;
  
  result = (love::Graphics *)love::graphics;
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__Graphics,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_mouse_set(lua_State* L) {
  int SWIG_arg = -1;
  love::Mouse *arg1 = (love::Mouse *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Mouse *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Mouse,0,1,"mouse_set");
  love::mouse = arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_mouse_get(lua_State* L) {
  int SWIG_arg = -1;
  love::Mouse *result = 0 ;
  
  result = (love::Mouse *)love::mouse;
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__Mouse,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_keyboard_set(lua_State* L) {
  int SWIG_arg = -1;
  love::Keyboard *arg1 = (love::Keyboard *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Keyboard *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Keyboard,0,1,"keyboard_set");
  love::keyboard = arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_keyboard_get(lua_State* L) {
  int SWIG_arg = -1;
  love::Keyboard *result = 0 ;
  
  result = (love::Keyboard *)love::keyboard;
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__Keyboard,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_audio_set(lua_State* L) {
  int SWIG_arg = -1;
  love::Audio *arg1 = (love::Audio *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Audio *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Audio,0,1,"audio_set");
  love::audio = arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_audio_get(lua_State* L) {
  int SWIG_arg = -1;
  love::Audio *result = 0 ;
  
  result = (love::Audio *)love::audio;
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__Audio,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_filesystem_set(lua_State* L) {
  int SWIG_arg = -1;
  love::Filesystem *arg1 = (love::Filesystem *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Filesystem *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Filesystem,0,1,"filesystem_set");
  love::filesystem = arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_filesystem_get(lua_State* L) {
  int SWIG_arg = -1;
  love::Filesystem *result = 0 ;
  
  result = (love::Filesystem *)love::filesystem;
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__Filesystem,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_timer_set(lua_State* L) {
  int SWIG_arg = -1;
  love::Timer *arg1 = (love::Timer *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::Timer *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__Timer,0,1,"timer_set");
  love::timer = arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_timer_get(lua_State* L) {
  int SWIG_arg = -1;
  love::Timer *result = 0 ;
  
  result = (love::Timer *)love::timer;
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__Timer,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ObjectFactory_newImage(lua_State* L) {
  int SWIG_arg = -1;
  love::ObjectFactory *arg1 = (love::ObjectFactory *) 0 ;
  char *arg2 = (char *) 0 ;
  love::pImage result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(love::ObjectFactory *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ObjectFactory,0,1,"ObjectFactory_newImage");
  arg2 = (char*)lua_tostring(L, 2);
  result = (arg1)->newImage((char const *)arg2);
  SWIG_arg=0;
  {
    love::pImage * resultptr;
    resultptr = new love::pImage((love::pImage &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__Image_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ObjectFactory_newColor__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::ObjectFactory *arg1 = (love::ObjectFactory *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  love::pColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  arg1=(love::ObjectFactory *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ObjectFactory,0,1,"ObjectFactory_newColor");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  result = (arg1)->newColor(arg2,arg3,arg4,arg5);
  SWIG_arg=0;
  {
    love::pColor * resultptr;
    resultptr = new love::pColor((love::pColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__Color_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ObjectFactory_newColor__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::ObjectFactory *arg1 = (love::ObjectFactory *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  love::pColor result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  arg1=(love::ObjectFactory *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ObjectFactory,0,1,"ObjectFactory_newColor");
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (arg1)->newColor(arg2,arg3,arg4);
  SWIG_arg=0;
  {
    love::pColor * resultptr;
    resultptr = new love::pColor((love::pColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__Color_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ObjectFactory_newColor(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__ObjectFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ObjectFactory_newColor__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__ObjectFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_ObjectFactory_newColor__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'ObjectFactory_newColor'");
  lua_error(L);return 0;
}


static int _wrap_ObjectFactory_newFont(lua_State* L) {
  int SWIG_arg = -1;
  love::ObjectFactory *arg1 = (love::ObjectFactory *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  love::pFont result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  arg1=(love::ObjectFactory *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ObjectFactory,0,1,"ObjectFactory_newFont");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (arg1)->newFont((char const *)arg2,arg3);
  SWIG_arg=0;
  {
    love::pFont * resultptr;
    resultptr = new love::pFont((love::pFont &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__Font_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ObjectFactory_newImageFont(lua_State* L) {
  int SWIG_arg = -1;
  love::ObjectFactory *arg1 = (love::ObjectFactory *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  love::pFont result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isstring(L,3)) SWIG_fail_arg(3);
  arg1=(love::ObjectFactory *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ObjectFactory,0,1,"ObjectFactory_newImageFont");
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (char*)lua_tostring(L, 3);
  result = (arg1)->newImageFont((char const *)arg2,(char const *)arg3);
  SWIG_arg=0;
  {
    love::pFont * resultptr;
    resultptr = new love::pFont((love::pFont &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__Font_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ObjectFactory_newSound(lua_State* L) {
  int SWIG_arg = -1;
  love::ObjectFactory *arg1 = (love::ObjectFactory *) 0 ;
  char *arg2 = (char *) 0 ;
  love::pSound result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(love::ObjectFactory *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ObjectFactory,0,1,"ObjectFactory_newSound");
  arg2 = (char*)lua_tostring(L, 2);
  result = (arg1)->newSound((char const *)arg2);
  SWIG_arg=0;
  {
    love::pSound * resultptr;
    resultptr = new love::pSound((love::pSound &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__Sound_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ObjectFactory_newMusic(lua_State* L) {
  int SWIG_arg = -1;
  love::ObjectFactory *arg1 = (love::ObjectFactory *) 0 ;
  char *arg2 = (char *) 0 ;
  love::pMusic result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(love::ObjectFactory *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ObjectFactory,0,1,"ObjectFactory_newMusic");
  arg2 = (char*)lua_tostring(L, 2);
  result = (arg1)->newMusic((char const *)arg2);
  SWIG_arg=0;
  {
    love::pMusic * resultptr;
    resultptr = new love::pMusic((love::pMusic &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__Music_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ObjectFactory_newParticlesystem(lua_State* L) {
  int SWIG_arg = -1;
  love::ObjectFactory *arg1 = (love::ObjectFactory *) 0 ;
  love::pParticlesystem result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::ObjectFactory *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ObjectFactory,0,1,"ObjectFactory_newParticlesystem");
  result = (arg1)->newParticlesystem();
  SWIG_arg=0;
  {
    love::pParticlesystem * resultptr;
    resultptr = new love::pParticlesystem((love::pParticlesystem &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__Particlesystem_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ObjectFactory_newAnimation__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  love::ObjectFactory *arg1 = (love::ObjectFactory *) 0 ;
  love::pImage *arg2 = (love::pImage *) 0 ;
  love::pAnimation result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(love::ObjectFactory *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ObjectFactory,0,1,"ObjectFactory_newAnimation");
  arg2=(love::pImage *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__Image_t,0,2,"ObjectFactory_newAnimation");
  result = (arg1)->newAnimation((love::pImage const *)arg2);
  SWIG_arg=0;
  {
    love::pAnimation * resultptr;
    resultptr = new love::pAnimation((love::pAnimation &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__Animation_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ObjectFactory_newAnimation__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  love::ObjectFactory *arg1 = (love::ObjectFactory *) 0 ;
  love::pImage *arg2 = (love::pImage *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  int arg6 ;
  love::pAnimation result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  if(!lua_isnumber(L,6)) SWIG_fail_arg(6);
  arg1=(love::ObjectFactory *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ObjectFactory,0,1,"ObjectFactory_newAnimation");
  arg2=(love::pImage *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__Image_t,0,2,"ObjectFactory_newAnimation");
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  result = (arg1)->newAnimation((love::pImage const *)arg2,arg3,arg4,arg5,arg6);
  SWIG_arg=0;
  {
    love::pAnimation * resultptr;
    resultptr = new love::pAnimation((love::pAnimation &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__Animation_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ObjectFactory_newAnimation__SWIG_2(lua_State* L) {
  int SWIG_arg = -1;
  love::ObjectFactory *arg1 = (love::ObjectFactory *) 0 ;
  love::pImage *arg2 = (love::pImage *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  love::pAnimation result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  if(!lua_isnumber(L,3)) SWIG_fail_arg(3);
  if(!lua_isnumber(L,4)) SWIG_fail_arg(4);
  if(!lua_isnumber(L,5)) SWIG_fail_arg(5);
  arg1=(love::ObjectFactory *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ObjectFactory,0,1,"ObjectFactory_newAnimation");
  arg2=(love::pImage *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_boost__shared_ptrTlove__Image_t,0,2,"ObjectFactory_newAnimation");
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  result = (arg1)->newAnimation((love::pImage const *)arg2,arg3,arg4,arg5);
  SWIG_arg=0;
  {
    love::pAnimation * resultptr;
    resultptr = new love::pAnimation((love::pAnimation &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__shared_ptrTlove__Animation_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ObjectFactory_newAnimation(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__ObjectFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__Image_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ObjectFactory_newAnimation__SWIG_0(L);
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__ObjectFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__Image_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_ObjectFactory_newAnimation__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_love__ObjectFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_boost__shared_ptrTlove__Image_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_ObjectFactory_newAnimation__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'ObjectFactory_newAnimation'");
  lua_error(L);return 0;
}


static int _wrap_delete_ObjectFactory(lua_State* L) {
  int SWIG_arg = -1;
  love::ObjectFactory *arg1 = (love::ObjectFactory *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::ObjectFactory *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ObjectFactory,0,1,"delete_ObjectFactory");
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ObjectFactory(void *obj) {
love::ObjectFactory *arg1 = (love::ObjectFactory *) obj;
delete arg1;
}
static swig_lua_method swig_love_ObjectFactory_methods[] = {
    {"newImage", _wrap_ObjectFactory_newImage}, 
    {"newColor", _wrap_ObjectFactory_newColor}, 
    {"newFont", _wrap_ObjectFactory_newFont}, 
    {"newImageFont", _wrap_ObjectFactory_newImageFont}, 
    {"newSound", _wrap_ObjectFactory_newSound}, 
    {"newMusic", _wrap_ObjectFactory_newMusic}, 
    {"newParticlesystem", _wrap_ObjectFactory_newParticlesystem}, 
    {"newAnimation", _wrap_ObjectFactory_newAnimation}, 
    {0,0}
};
static swig_lua_attribute swig_love_ObjectFactory_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_love_ObjectFactory_bases[] = {0};
swig_lua_class _wrap_class_love_ObjectFactory = { "ObjectFactory", &SWIGTYPE_p_love__ObjectFactory,0, swig_delete_ObjectFactory, swig_love_ObjectFactory_methods, swig_love_ObjectFactory_attributes, swig_love_ObjectFactory_bases };

static int _wrap_objects_set(lua_State* L) {
  int SWIG_arg = -1;
  love::ObjectFactory *arg1 = (love::ObjectFactory *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(love::ObjectFactory *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_love__ObjectFactory,0,1,"objects_set");
  love::objects = *arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_objects_get(lua_State* L) {
  int SWIG_arg = -1;
  love::ObjectFactory *result = 0 ;
  
  result = (love::ObjectFactory *)&love::objects;
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_love__ObjectFactory,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


#ifdef __cplusplus
}
#endif

static const struct luaL_reg swig_commands[] = {
    { "Color_getRed", _wrap_Color_getRed},
    { "Color_getGreen", _wrap_Color_getGreen},
    { "Color_getBlue", _wrap_Color_getBlue},
    { "Color_getAlpha", _wrap_Color_getAlpha},
    { "Color_update", _wrap_Color_update},
    { "Color___tostring", _wrap_Color___tostring},
    { "delete_Color", _wrap_delete_Color},
    { "SmartColor___deref__", _wrap_SmartColor___deref__},
    { "delete_SmartColor", _wrap_delete_SmartColor},
    { "SmartColor_getRed", _wrap_SmartColor_getRed},
    { "SmartColor_getGreen", _wrap_SmartColor_getGreen},
    { "SmartColor_getBlue", _wrap_SmartColor_getBlue},
    { "SmartColor_getAlpha", _wrap_SmartColor_getAlpha},
    { "SmartColor_update", _wrap_SmartColor_update},
    { "SmartColor___tostring", _wrap_SmartColor___tostring},
    { "delete_Device", _wrap_delete_Device},
    { "Font_getHeight", _wrap_Font_getHeight},
    { "Font_getWidth", _wrap_Font_getWidth},
    { "delete_Font", _wrap_delete_Font},
    { "SmartFont___deref__", _wrap_SmartFont___deref__},
    { "delete_SmartFont", _wrap_delete_SmartFont},
    { "SmartFont_getHeight", _wrap_SmartFont_getHeight},
    { "SmartFont_getWidth", _wrap_SmartFont_getWidth},
    { "Sprite_getWidth", _wrap_Sprite_getWidth},
    { "Sprite_getHeight", _wrap_Sprite_getHeight},
    { "Sprite_getAlpha", _wrap_Sprite_getAlpha},
    { "Sprite_setAlpha", _wrap_Sprite_setAlpha},
    { "Sprite_update", _wrap_Sprite_update},
    { "Sprite_setCenter", _wrap_Sprite_setCenter},
    { "delete_Sprite", _wrap_delete_Sprite},
    { "SmartSprite___deref__", _wrap_SmartSprite___deref__},
    { "delete_SmartSprite", _wrap_delete_SmartSprite},
    { "SmartSprite_getWidth", _wrap_SmartSprite_getWidth},
    { "SmartSprite_getHeight", _wrap_SmartSprite_getHeight},
    { "SmartSprite_getAlpha", _wrap_SmartSprite_getAlpha},
    { "SmartSprite_setAlpha", _wrap_SmartSprite_setAlpha},
    { "SmartSprite_update", _wrap_SmartSprite_update},
    { "SmartSprite_setCenter", _wrap_SmartSprite_setCenter},
    { "delete_Image", _wrap_delete_Image},
    { "SmartImage___deref__", _wrap_SmartImage___deref__},
    { "delete_SmartImage", _wrap_delete_SmartImage},
    { "SmartImage_getWidth", _wrap_SmartImage_getWidth},
    { "SmartImage_getHeight", _wrap_SmartImage_getHeight},
    { "SmartImage_getAlpha", _wrap_SmartImage_getAlpha},
    { "SmartImage_setAlpha", _wrap_SmartImage_setAlpha},
    { "SmartImage_update", _wrap_SmartImage_update},
    { "SmartImage_setCenter", _wrap_SmartImage_setCenter},
    { "Animation_addFrame", _wrap_Animation_addFrame},
    { "Animation_setMode", _wrap_Animation_setMode},
    { "Animation_play", _wrap_Animation_play},
    { "Animation_stop", _wrap_Animation_stop},
    { "Animation_reset", _wrap_Animation_reset},
    { "Animation_seek", _wrap_Animation_seek},
    { "Animation_getCurrentFrame", _wrap_Animation_getCurrentFrame},
    { "Animation_setDelay", _wrap_Animation_setDelay},
    { "delete_Animation", _wrap_delete_Animation},
    { "SmartAnimation___deref__", _wrap_SmartAnimation___deref__},
    { "delete_SmartAnimation", _wrap_delete_SmartAnimation},
    { "SmartAnimation_addFrame", _wrap_SmartAnimation_addFrame},
    { "SmartAnimation_setMode", _wrap_SmartAnimation_setMode},
    { "SmartAnimation_play", _wrap_SmartAnimation_play},
    { "SmartAnimation_stop", _wrap_SmartAnimation_stop},
    { "SmartAnimation_reset", _wrap_SmartAnimation_reset},
    { "SmartAnimation_seek", _wrap_SmartAnimation_seek},
    { "SmartAnimation_getCurrentFrame", _wrap_SmartAnimation_getCurrentFrame},
    { "SmartAnimation_setDelay", _wrap_SmartAnimation_setDelay},
    { "SmartAnimation_getWidth", _wrap_SmartAnimation_getWidth},
    { "SmartAnimation_getHeight", _wrap_SmartAnimation_getHeight},
    { "SmartAnimation_getAlpha", _wrap_SmartAnimation_getAlpha},
    { "SmartAnimation_setAlpha", _wrap_SmartAnimation_setAlpha},
    { "SmartAnimation_update", _wrap_SmartAnimation_update},
    { "SmartAnimation_setCenter", _wrap_SmartAnimation_setCenter},
    { "Particlesystem_setAutostart", _wrap_Particlesystem_setAutostart},
    { "Particlesystem_getNumParticles", _wrap_Particlesystem_getNumParticles},
    { "Particlesystem_isAdditive", _wrap_Particlesystem_isAdditive},
    { "Particlesystem_reset", _wrap_Particlesystem_reset},
    { "Particlesystem_setPosition", _wrap_Particlesystem_setPosition},
    { "Particlesystem_getLifetime", _wrap_Particlesystem_getLifetime},
    { "Particlesystem_setLifetime", _wrap_Particlesystem_setLifetime},
    { "Particlesystem_getAge", _wrap_Particlesystem_getAge},
    { "Particlesystem_setLinger", _wrap_Particlesystem_setLinger},
    { "Particlesystem_getLinger", _wrap_Particlesystem_getLinger},
    { "Particlesystem_isDead", _wrap_Particlesystem_isDead},
    { "Particlesystem_isActive", _wrap_Particlesystem_isActive},
    { "Particlesystem_setParticlesPerSecond", _wrap_Particlesystem_setParticlesPerSecond},
    { "Particlesystem_addColor",_wrap_Particlesystem_addColor},
    { "Particlesystem_setAdditiveBlending", _wrap_Particlesystem_setAdditiveBlending},
    { "Particlesystem_setDirection",_wrap_Particlesystem_setDirection},
    { "Particlesystem_setStartSpeed",_wrap_Particlesystem_setStartSpeed},
    { "Particlesystem_setGravity",_wrap_Particlesystem_setGravity},
    { "Particlesystem_setRadialAcc",_wrap_Particlesystem_setRadialAcc},
    { "Particlesystem_setTangentialAcc",_wrap_Particlesystem_setTangentialAcc},
    { "Particlesystem_setParticleLifetime",_wrap_Particlesystem_setParticleLifetime},
    { "Particlesystem_setParticleSize",_wrap_Particlesystem_setParticleSize},
    { "Particlesystem_setParticleSpin",_wrap_Particlesystem_setParticleSpin},
    { "Particlesystem_update", _wrap_Particlesystem_update},
    { "Particlesystem_setSprite",_wrap_Particlesystem_setSprite},
    { "delete_Particlesystem", _wrap_delete_Particlesystem},
    { "SmartParticlesystem___deref__", _wrap_SmartParticlesystem___deref__},
    { "delete_SmartParticlesystem", _wrap_delete_SmartParticlesystem},
    { "SmartParticlesystem_setAutostart", _wrap_SmartParticlesystem_setAutostart},
    { "SmartParticlesystem_getNumParticles", _wrap_SmartParticlesystem_getNumParticles},
    { "SmartParticlesystem_isAdditive", _wrap_SmartParticlesystem_isAdditive},
    { "SmartParticlesystem_reset", _wrap_SmartParticlesystem_reset},
    { "SmartParticlesystem_setPosition", _wrap_SmartParticlesystem_setPosition},
    { "SmartParticlesystem_getLifetime", _wrap_SmartParticlesystem_getLifetime},
    { "SmartParticlesystem_setLifetime", _wrap_SmartParticlesystem_setLifetime},
    { "SmartParticlesystem_getAge", _wrap_SmartParticlesystem_getAge},
    { "SmartParticlesystem_setLinger", _wrap_SmartParticlesystem_setLinger},
    { "SmartParticlesystem_getLinger", _wrap_SmartParticlesystem_getLinger},
    { "SmartParticlesystem_isDead", _wrap_SmartParticlesystem_isDead},
    { "SmartParticlesystem_isActive", _wrap_SmartParticlesystem_isActive},
    { "SmartParticlesystem_setParticlesPerSecond", _wrap_SmartParticlesystem_setParticlesPerSecond},
    { "SmartParticlesystem_addColor",_wrap_SmartParticlesystem_addColor},
    { "SmartParticlesystem_setSprite",_wrap_SmartParticlesystem_setSprite},
    { "SmartParticlesystem_setAdditiveBlending", _wrap_SmartParticlesystem_setAdditiveBlending},
    { "SmartParticlesystem_setDirection",_wrap_SmartParticlesystem_setDirection},
    { "SmartParticlesystem_setStartSpeed",_wrap_SmartParticlesystem_setStartSpeed},
    { "SmartParticlesystem_setGravity",_wrap_SmartParticlesystem_setGravity},
    { "SmartParticlesystem_setRadialAcc",_wrap_SmartParticlesystem_setRadialAcc},
    { "SmartParticlesystem_setTangentialAcc",_wrap_SmartParticlesystem_setTangentialAcc},
    { "SmartParticlesystem_setParticleLifetime",_wrap_SmartParticlesystem_setParticleLifetime},
    { "SmartParticlesystem_setParticleSize",_wrap_SmartParticlesystem_setParticleSize},
    { "SmartParticlesystem_setParticleSpin",_wrap_SmartParticlesystem_setParticleSpin},
    { "SmartParticlesystem_update", _wrap_SmartParticlesystem_update},
    { "Graphics_drawLine",_wrap_Graphics_drawLine},
    { "Graphics_drawTriangle",_wrap_Graphics_drawTriangle},
    { "Graphics_fillTriangle", _wrap_Graphics_fillTriangle},
    { "Graphics_drawQuad",_wrap_Graphics_drawQuad},
    { "Graphics_fillQuad", _wrap_Graphics_fillQuad},
    { "Graphics_drawCircle",_wrap_Graphics_drawCircle},
    { "Graphics_fillCircle",_wrap_Graphics_fillCircle},
    { "Graphics_setBlendMode", _wrap_Graphics_setBlendMode},
    { "Graphics_getBlendMode", _wrap_Graphics_getBlendMode},
    { "Graphics_setColorMode", _wrap_Graphics_setColorMode},
    { "Graphics_getColorMode", _wrap_Graphics_getColorMode},
    { "Graphics_setBackgroundColor",_wrap_Graphics_setBackgroundColor},
    { "Graphics_setColor",_wrap_Graphics_setColor},
    { "Graphics_setFont", _wrap_Graphics_setFont},
    { "Graphics_draw",_wrap_Graphics_draw},
    { "delete_Graphics", _wrap_delete_Graphics},
    { "Sound_setVolume", _wrap_Sound_setVolume},
    { "delete_Sound", _wrap_delete_Sound},
    { "SmartSound___deref__", _wrap_SmartSound___deref__},
    { "delete_SmartSound", _wrap_delete_SmartSound},
    { "SmartSound_setVolume", _wrap_SmartSound_setVolume},
    { "delete_Music", _wrap_delete_Music},
    { "SmartMusic___deref__", _wrap_SmartMusic___deref__},
    { "delete_SmartMusic", _wrap_delete_SmartMusic},
    { "Audio_isPlaying", _wrap_Audio_isPlaying},
    { "Audio_isPaused", _wrap_Audio_isPaused},
    { "Audio_pause", _wrap_Audio_pause},
    { "Audio_stop", _wrap_Audio_stop},
    { "Audio_resume", _wrap_Audio_resume},
    { "Audio_setVolume", _wrap_Audio_setVolume},
    { "Audio_play",_wrap_Audio_play},
    { "delete_Audio", _wrap_delete_Audio},
    { "Filesystem_include", _wrap_Filesystem_include},
    { "delete_Filesystem", _wrap_delete_Filesystem},
    { "Timer_getDelta", _wrap_Timer_getDelta},
    { "Timer_startBenchmark", _wrap_Timer_startBenchmark},
    { "Timer_endBenchmark", _wrap_Timer_endBenchmark},
    { "Timer_getFps", _wrap_Timer_getFps},
    { "delete_Timer", _wrap_delete_Timer},
    { "Mouse_getX", _wrap_Mouse_getX},
    { "Mouse_getY", _wrap_Mouse_getY},
    { "Mouse_isDown", _wrap_Mouse_isDown},
    { "Mouse_setVisible", _wrap_Mouse_setVisible},
    { "Mouse_isVisible", _wrap_Mouse_isVisible},
    { "delete_Mouse", _wrap_delete_Mouse},
    { "Keyboard_isDown", _wrap_Keyboard_isDown},
    { "delete_Keyboard", _wrap_delete_Keyboard},
    { "graphics_set", _wrap_graphics_set},
    { "graphics_get", _wrap_graphics_get},
    { "mouse_set", _wrap_mouse_set},
    { "mouse_get", _wrap_mouse_get},
    { "keyboard_set", _wrap_keyboard_set},
    { "keyboard_get", _wrap_keyboard_get},
    { "audio_set", _wrap_audio_set},
    { "audio_get", _wrap_audio_get},
    { "filesystem_set", _wrap_filesystem_set},
    { "filesystem_get", _wrap_filesystem_get},
    { "timer_set", _wrap_timer_set},
    { "timer_get", _wrap_timer_get},
    { "ObjectFactory_newImage", _wrap_ObjectFactory_newImage},
    { "ObjectFactory_newColor",_wrap_ObjectFactory_newColor},
    { "ObjectFactory_newFont", _wrap_ObjectFactory_newFont},
    { "ObjectFactory_newImageFont", _wrap_ObjectFactory_newImageFont},
    { "ObjectFactory_newSound", _wrap_ObjectFactory_newSound},
    { "ObjectFactory_newMusic", _wrap_ObjectFactory_newMusic},
    { "ObjectFactory_newParticlesystem", _wrap_ObjectFactory_newParticlesystem},
    { "ObjectFactory_newAnimation",_wrap_ObjectFactory_newAnimation},
    { "delete_ObjectFactory", _wrap_delete_ObjectFactory},
    { "objects_set", _wrap_objects_set},
    { "objects_get", _wrap_objects_get},
    {0,0}
};

static swig_lua_var_info swig_variables[] = {
    { "graphics", _wrap_graphics_get, _wrap_graphics_set},
    { "mouse", _wrap_mouse_get, _wrap_mouse_set},
    { "keyboard", _wrap_keyboard_get, _wrap_keyboard_set},
    { "audio", _wrap_audio_get, _wrap_audio_set},
    { "filesystem", _wrap_filesystem_get, _wrap_filesystem_set},
    { "timer", _wrap_timer_get, _wrap_timer_set},
    { "objects", _wrap_objects_get, _wrap_objects_set},
    {0,0,0}
};

static swig_lua_const_info swig_constants[] = {
{ SWIG_LUA_INT,     (char *)"key_unknown", (long) 0, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_first", (long) 0, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_backspace", (long) 8, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_tab", (long) 9, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_clear", (long) 12, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_return", (long) 13, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_pause", (long) 19, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_escape", (long) 27, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_space", (long) 32, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_exclaim", (long) 33, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_quotedbl", (long) 34, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_hash", (long) 35, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_dollar", (long) 36, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_ampersand", (long) 38, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_quote", (long) 39, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_leftparen", (long) 40, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_rightparen", (long) 41, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_asterisk", (long) 42, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_plus", (long) 43, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_comma", (long) 44, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_minus", (long) 45, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_period", (long) 46, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_slash", (long) 47, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_0", (long) 48, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_1", (long) 49, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_2", (long) 50, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_3", (long) 51, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_4", (long) 52, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_5", (long) 53, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_6", (long) 54, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_7", (long) 55, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_8", (long) 56, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_9", (long) 57, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_colon", (long) 58, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_semicolon", (long) 59, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_less", (long) 60, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_equals", (long) 61, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_greater", (long) 62, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_question", (long) 63, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_at", (long) 64, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_leftbracket", (long) 91, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_backslash", (long) 92, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_rightbracket", (long) 93, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_caret", (long) 94, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_underscore", (long) 95, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_backquote", (long) 96, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_a", (long) 97, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_b", (long) 98, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_c", (long) 99, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_d", (long) 100, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_e", (long) 101, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_f", (long) 102, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_g", (long) 103, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_h", (long) 104, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_i", (long) 105, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_j", (long) 106, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_k", (long) 107, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_l", (long) 108, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_m", (long) 109, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_n", (long) 110, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_o", (long) 111, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_p", (long) 112, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_q", (long) 113, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_r", (long) 114, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_s", (long) 115, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_t", (long) 116, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_u", (long) 117, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_v", (long) 118, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_w", (long) 119, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_x", (long) 120, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_y", (long) 121, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_z", (long) 122, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_delete", (long) 127, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_kp0", (long) 256, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_kp1", (long) 257, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_kp2", (long) 258, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_kp3", (long) 259, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_kp4", (long) 260, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_kp5", (long) 261, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_kp6", (long) 262, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_kp7", (long) 263, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_kp8", (long) 264, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_kp9", (long) 265, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_kp_period", (long) 266, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_kp_divide", (long) 267, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_kp_multiply", (long) 268, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_kp_minus", (long) 269, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_kp_plus", (long) 270, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_kp_enter", (long) 271, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_kp_equals", (long) 272, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_up", (long) 273, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_down", (long) 274, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_right", (long) 275, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_left", (long) 276, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_insert", (long) 277, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_home", (long) 278, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_end", (long) 279, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_pageup", (long) 280, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_pagedown", (long) 281, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_f1", (long) 282, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_f2", (long) 283, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_f3", (long) 284, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_f4", (long) 285, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_f5", (long) 286, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_f6", (long) 287, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_f7", (long) 288, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_f8", (long) 289, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_f9", (long) 290, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_f10", (long) 291, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_f11", (long) 292, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_f12", (long) 293, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_f13", (long) 294, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_f14", (long) 295, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_f15", (long) 296, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_numlock", (long) 300, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_capslock", (long) 301, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_scrollock", (long) 302, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_rshift", (long) 303, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_lshift", (long) 304, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_rctrl", (long) 305, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_lctrl", (long) 306, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_ralt", (long) 307, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_lalt", (long) 308, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_rmeta", (long) 309, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_lmeta", (long) 310, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_lsuper", (long) 311, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_rsuper", (long) 312, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_mode", (long) 313, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_compose", (long) 314, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_help", (long) 315, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_print", (long) 316, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_sysreq", (long) 317, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_break", (long) 318, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_menu", (long) 319, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_power", (long) 320, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_euro", (long) 321, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"key_undo", (long) 322, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"mouse_left", (long) love::LOVE_MOUSE_LEFT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"mouse_middle", (long) love::LOVE_MOUSE_MIDDLE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"mouse_right", (long) love::LOVE_MOUSE_RIGHT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"mouse_wheelup", (long) love::LOVE_MOUSE_WHEELUP, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"mouse_wheeldown", (long) love::LOVE_MOUSE_WHEELDOWN, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"align_left", (long) 1, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"align_right", (long) 2, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"align_center", (long) 3, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"align_top", (long) 4, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"align_bottom", (long) 5, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"menu_vertical", (long) 1, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"menu_horizontal", (long) 2, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"slider_horizontal", (long) 0, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"slider_vertical", (long) 1, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"mode_loop", (long) 1, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"mode_once", (long) 2, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"mode_bounce", (long) 3, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"blend_normal", (long) love::LOVE_BLEND_NORMAL, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"blend_additive", (long) love::LOVE_BLEND_ADDITIVE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"color_normal", (long) love::LOVE_COLOR_NORMAL, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"color_modulate", (long) love::LOVE_COLOR_MODULATE, 0, 0, 0},
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_love__MouseTo_p_love__Device(void *x) {
    return (void *)((love::Device *)  ((love::Mouse *) x));
}
static void *_p_love__KeyboardTo_p_love__Device(void *x) {
    return (void *)((love::Device *)  ((love::Keyboard *) x));
}
static void *_p_love__GraphicsTo_p_love__Device(void *x) {
    return (void *)((love::Device *)  ((love::Graphics *) x));
}
static void *_p_love__FilesystemTo_p_love__Device(void *x) {
    return (void *)((love::Device *)  ((love::Filesystem *) x));
}
static void *_p_love__TimerTo_p_love__Device(void *x) {
    return (void *)((love::Device *)  ((love::Timer *) x));
}
static void *_p_love__AudioTo_p_love__Device(void *x) {
    return (void *)((love::Device *)  ((love::Audio *) x));
}
static void *_p_love__ImageTo_p_love__Sprite(void *x) {
    return (void *)((love::Sprite *)  ((love::Image *) x));
}
static void *_p_love__AnimationTo_p_love__Sprite(void *x) {
    return (void *)((love::Sprite *)  ((love::Animation *) x));
}
static swig_type_info _swigt__boost__shared_ptrTlove__Sprite_t = {"_boost__shared_ptrTlove__Sprite_t", "boost::shared_ptr<love::Sprite >|love::pSprite", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrTlove__Animation_t = {"_p_boost__shared_ptrTlove__Animation_t", "boost::shared_ptr<love::Animation > *|love::pAnimation *", 0, 0, (void*)&_wrap_class_boost_shared_ptr_Sl_love_Animation_Sg_, 0};
static swig_type_info _swigt__p_boost__shared_ptrTlove__Color_t = {"_p_boost__shared_ptrTlove__Color_t", "boost::shared_ptr<love::Color > *|love::pColor *", 0, 0, (void*)&_wrap_class_boost_shared_ptr_Sl_love_Color_Sg_, 0};
static swig_type_info _swigt__p_boost__shared_ptrTlove__Font_t = {"_p_boost__shared_ptrTlove__Font_t", "boost::shared_ptr<love::Font > *|love::pFont *", 0, 0, (void*)&_wrap_class_boost_shared_ptr_Sl_love_Font_Sg_, 0};
static swig_type_info _swigt__p_boost__shared_ptrTlove__Image_t = {"_p_boost__shared_ptrTlove__Image_t", "boost::shared_ptr<love::Image > *|love::pImage *", 0, 0, (void*)&_wrap_class_boost_shared_ptr_Sl_love_Image_Sg_, 0};
static swig_type_info _swigt__p_boost__shared_ptrTlove__Music_t = {"_p_boost__shared_ptrTlove__Music_t", "boost::shared_ptr<love::Music > *|love::pMusic *", 0, 0, (void*)&_wrap_class_boost_shared_ptr_Sl_love_Music_Sg_, 0};
static swig_type_info _swigt__p_boost__shared_ptrTlove__Particlesystem_t = {"_p_boost__shared_ptrTlove__Particlesystem_t", "boost::shared_ptr<love::Particlesystem > *|love::pParticlesystem *", 0, 0, (void*)&_wrap_class_boost_shared_ptr_Sl_love_Particlesystem_Sg_, 0};
static swig_type_info _swigt__p_boost__shared_ptrTlove__Sound_t = {"_p_boost__shared_ptrTlove__Sound_t", "boost::shared_ptr<love::Sound > *|love::pSound *", 0, 0, (void*)&_wrap_class_boost_shared_ptr_Sl_love_Sound_Sg_, 0};
static swig_type_info _swigt__p_boost__shared_ptrTlove__Sprite_t = {"_p_boost__shared_ptrTlove__Sprite_t", "boost::shared_ptr<love::Sprite > *|love::pSprite *", 0, 0, (void*)&_wrap_class_boost_shared_ptr_Sl_love_Sprite_Sg_, 0};
static swig_type_info _swigt__p_love__Animation = {"_p_love__Animation", "love::Animation *", 0, 0, (void*)&_wrap_class_love_Animation, 0};
static swig_type_info _swigt__p_love__Audio = {"_p_love__Audio", "love::Audio *", 0, 0, (void*)&_wrap_class_love_Audio, 0};
static swig_type_info _swigt__p_love__Color = {"_p_love__Color", "love::Color *", 0, 0, (void*)&_wrap_class_love_Color, 0};
static swig_type_info _swigt__p_love__Device = {"_p_love__Device", "love::Device *", 0, 0, (void*)&_wrap_class_love_Device, 0};
static swig_type_info _swigt__p_love__Filesystem = {"_p_love__Filesystem", "love::Filesystem *", 0, 0, (void*)&_wrap_class_love_Filesystem, 0};
static swig_type_info _swigt__p_love__Font = {"_p_love__Font", "love::Font *", 0, 0, (void*)&_wrap_class_love_Font, 0};
static swig_type_info _swigt__p_love__Graphics = {"_p_love__Graphics", "love::Graphics *", 0, 0, (void*)&_wrap_class_love_Graphics, 0};
static swig_type_info _swigt__p_love__Image = {"_p_love__Image", "love::Image *", 0, 0, (void*)&_wrap_class_love_Image, 0};
static swig_type_info _swigt__p_love__Keyboard = {"_p_love__Keyboard", "love::Keyboard *", 0, 0, (void*)&_wrap_class_love_Keyboard, 0};
static swig_type_info _swigt__p_love__Mouse = {"_p_love__Mouse", "love::Mouse *", 0, 0, (void*)&_wrap_class_love_Mouse, 0};
static swig_type_info _swigt__p_love__Music = {"_p_love__Music", "love::Music *", 0, 0, (void*)&_wrap_class_love_Music, 0};
static swig_type_info _swigt__p_love__ObjectFactory = {"_p_love__ObjectFactory", "love::ObjectFactory *", 0, 0, (void*)&_wrap_class_love_ObjectFactory, 0};
static swig_type_info _swigt__p_love__Particlesystem = {"_p_love__Particlesystem", "love::Particlesystem *", 0, 0, (void*)&_wrap_class_love_Particlesystem, 0};
static swig_type_info _swigt__p_love__Sound = {"_p_love__Sound", "love::Sound *", 0, 0, (void*)&_wrap_class_love_Sound, 0};
static swig_type_info _swigt__p_love__Sprite = {"_p_love__Sprite", "love::Sprite *", 0, 0, (void*)&_wrap_class_love_Sprite, 0};
static swig_type_info _swigt__p_love__Timer = {"_p_love__Timer", "love::Timer *", 0, 0, (void*)&_wrap_class_love_Timer, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__boost__shared_ptrTlove__Sprite_t,
  &_swigt__p_boost__shared_ptrTlove__Animation_t,
  &_swigt__p_boost__shared_ptrTlove__Color_t,
  &_swigt__p_boost__shared_ptrTlove__Font_t,
  &_swigt__p_boost__shared_ptrTlove__Image_t,
  &_swigt__p_boost__shared_ptrTlove__Music_t,
  &_swigt__p_boost__shared_ptrTlove__Particlesystem_t,
  &_swigt__p_boost__shared_ptrTlove__Sound_t,
  &_swigt__p_boost__shared_ptrTlove__Sprite_t,
  &_swigt__p_love__Animation,
  &_swigt__p_love__Audio,
  &_swigt__p_love__Color,
  &_swigt__p_love__Device,
  &_swigt__p_love__Filesystem,
  &_swigt__p_love__Font,
  &_swigt__p_love__Graphics,
  &_swigt__p_love__Image,
  &_swigt__p_love__Keyboard,
  &_swigt__p_love__Mouse,
  &_swigt__p_love__Music,
  &_swigt__p_love__ObjectFactory,
  &_swigt__p_love__Particlesystem,
  &_swigt__p_love__Sound,
  &_swigt__p_love__Sprite,
  &_swigt__p_love__Timer,
};

static swig_cast_info _swigc__boost__shared_ptrTlove__Sprite_t[] = {  {&_swigt__boost__shared_ptrTlove__Sprite_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrTlove__Animation_t[] = {  {&_swigt__p_boost__shared_ptrTlove__Animation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrTlove__Color_t[] = {  {&_swigt__p_boost__shared_ptrTlove__Color_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrTlove__Font_t[] = {  {&_swigt__p_boost__shared_ptrTlove__Font_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrTlove__Image_t[] = {  {&_swigt__p_boost__shared_ptrTlove__Image_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrTlove__Music_t[] = {  {&_swigt__p_boost__shared_ptrTlove__Music_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrTlove__Particlesystem_t[] = {  {&_swigt__p_boost__shared_ptrTlove__Particlesystem_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrTlove__Sound_t[] = {  {&_swigt__p_boost__shared_ptrTlove__Sound_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrTlove__Sprite_t[] = {  {&_swigt__p_boost__shared_ptrTlove__Sprite_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_love__Animation[] = {  {&_swigt__p_love__Animation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_love__Audio[] = {  {&_swigt__p_love__Audio, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_love__Color[] = {  {&_swigt__p_love__Color, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_love__Device[] = {  {&_swigt__p_love__Audio, _p_love__AudioTo_p_love__Device, 0, 0},  {&_swigt__p_love__Mouse, _p_love__MouseTo_p_love__Device, 0, 0},  {&_swigt__p_love__Keyboard, _p_love__KeyboardTo_p_love__Device, 0, 0},  {&_swigt__p_love__Graphics, _p_love__GraphicsTo_p_love__Device, 0, 0},  {&_swigt__p_love__Filesystem, _p_love__FilesystemTo_p_love__Device, 0, 0},  {&_swigt__p_love__Device, 0, 0, 0},  {&_swigt__p_love__Timer, _p_love__TimerTo_p_love__Device, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_love__Filesystem[] = {  {&_swigt__p_love__Filesystem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_love__Font[] = {  {&_swigt__p_love__Font, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_love__Graphics[] = {  {&_swigt__p_love__Graphics, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_love__Image[] = {  {&_swigt__p_love__Image, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_love__Keyboard[] = {  {&_swigt__p_love__Keyboard, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_love__Mouse[] = {  {&_swigt__p_love__Mouse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_love__Music[] = {  {&_swigt__p_love__Music, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_love__ObjectFactory[] = {  {&_swigt__p_love__ObjectFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_love__Particlesystem[] = {  {&_swigt__p_love__Particlesystem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_love__Sound[] = {  {&_swigt__p_love__Sound, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_love__Sprite[] = {  {&_swigt__p_love__Image, _p_love__ImageTo_p_love__Sprite, 0, 0},  {&_swigt__p_love__Sprite, 0, 0, 0},  {&_swigt__p_love__Animation, _p_love__AnimationTo_p_love__Sprite, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_love__Timer[] = {  {&_swigt__p_love__Timer, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__boost__shared_ptrTlove__Sprite_t,
  _swigc__p_boost__shared_ptrTlove__Animation_t,
  _swigc__p_boost__shared_ptrTlove__Color_t,
  _swigc__p_boost__shared_ptrTlove__Font_t,
  _swigc__p_boost__shared_ptrTlove__Image_t,
  _swigc__p_boost__shared_ptrTlove__Music_t,
  _swigc__p_boost__shared_ptrTlove__Particlesystem_t,
  _swigc__p_boost__shared_ptrTlove__Sound_t,
  _swigc__p_boost__shared_ptrTlove__Sprite_t,
  _swigc__p_love__Animation,
  _swigc__p_love__Audio,
  _swigc__p_love__Color,
  _swigc__p_love__Device,
  _swigc__p_love__Filesystem,
  _swigc__p_love__Font,
  _swigc__p_love__Graphics,
  _swigc__p_love__Image,
  _swigc__p_love__Keyboard,
  _swigc__p_love__Mouse,
  _swigc__p_love__Music,
  _swigc__p_love__ObjectFactory,
  _swigc__p_love__Particlesystem,
  _swigc__p_love__Sound,
  _swigc__p_love__Sprite,
  _swigc__p_love__Timer,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop though that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head;
  static int init_run = 0;

  clientdata = clientdata;

  if (init_run) return;
  init_run = 1;

  /* Initialize the swig_module */
  swig_module.type_initial = swig_type_initial;
  swig_module.cast_initial = swig_cast_initial;

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (module_head) {
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  } else {
    /* This is the first module loaded */
    swig_module.next = &swig_module;
    SWIG_SetModule(clientdata, &swig_module);
  }
		 
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
  
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
#ifdef __cplusplus
extern "C" {
#endif
void SWIG_init_user(lua_State* L );

/* this is the initialization function
	added at the very end of the code
	the function is always called SWIG_init, but an eariler #define will rename it
*/
SWIGEXPORT int SWIG_init(lua_State* L)
{
	int i;

	/* start with global table */
	lua_pushvalue(L,LUA_GLOBALSINDEX);

	SWIG_InitializeModule((void*)L);
	SWIG_PropagateClientData();

	/* invoke user-specific initialization */
	SWIG_init_user(L);

	/* add a global fn */
	SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
	SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_equal);

	/* begin the module (its a table with the same name as the module) */
	SWIG_Lua_module_begin(L,SWIG_name);
	/* add commands/functions */
	for (i = 0; swig_commands[i].name; i++){
		SWIG_Lua_module_add_function(L,swig_commands[i].name,swig_commands[i].func);
	}
	/*luaL_openlib(L,NULL,swig_commands,0);*/
	/* all in one */
	/*luaL_openlib(L,SWIG_name,swig_commands,0);*/
	/* add variables */
	for (i = 0; swig_variables[i].name; i++){
		SWIG_Lua_module_add_variable(L,swig_variables[i].name,swig_variables[i].get,swig_variables[i].set);
	}

	/* additional registration structs & classes in lua: */
	for (i = 0; swig_types[i]; i++){
		if (swig_types[i]->clientdata){
			SWIG_Lua_class_register(L,(swig_lua_class*)(swig_types[i]->clientdata));
		}
	}

	/* constants */
	SWIG_Lua_InstallConstants(L,swig_constants);

	/* end module */
	/*SWIG_Lua_module_end(L);*/
	lua_pop(L,1);  /* tidy stack (remove module table)*/
	lua_pop(L,1);  /* tidy stack (remove global table)*/

	return 1;
}

/* Lua 5.1 has a different name for importing libraries
luaopen_XXX, where XXX is the name of the module (not capitalised)
this function will allow Lua 5.1 to import correctly.
There is a #define in the wrapper to rename 'SWIG_import' to the correct name
*/

SWIGEXPORT int SWIG_import(lua_State* L)
{
	return SWIG_init(L);
}

#ifdef __cplusplus
}
#endif


#ifdef __cplusplus
extern "C"
#endif
void SWIG_init_user(lua_State* L)
{
  
}



// Made by AutoLOVE
// ENABLE WARNINGS PLZ
#ifdef WIN32
#pragma warning( pop )
#endif
