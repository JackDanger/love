/*
* LOVE: Totally Awesome 2D Gaming.
* Website: http://love.sourceforge.net
* Licence: ZLIB/libpng
* Copyright (c) 2006-2008 LOVE Development Team
*
* This file was AUTOGENERATED by swigfusion! Please
* do not edit this file manually.
* 
* @author Anders Ruud / swigfusion
* @date 2008-07-15
**/

#ifndef LOVE_MOD_FUSION_CHIPMUNK_H
#define LOVE_MOD_FUSION_CHIPMUNK_H

// Function from SWIG which opens the module.
extern "C" {
    int luaopen_mod_chipmunk(lua_State * L);
}

// Types found:
// SlideJoint (SWIGTYPE_p_boost__shared_ptrT_love_chipmunk__SlideJoint_t)
// PinJoint (SWIGTYPE_p_boost__shared_ptrT_love_chipmunk__PinJoint_t)
// Body (SWIGTYPE_p_boost__shared_ptrT_love_chipmunk__Body_t)
// SegmentShape (SWIGTYPE_p_boost__shared_ptrT_love_chipmunk__SegmentShape_t)
// PolygonShape (SWIGTYPE_p_boost__shared_ptrT_love_chipmunk__PolygonShape_t)
// Vector (SWIGTYPE_p_boost__shared_ptrT_love_chipmunk__Vector_t)
// Space (SWIGTYPE_p_boost__shared_ptrT_love_chipmunk__Space_t)
// GrooveJoint (SWIGTYPE_p_boost__shared_ptrT_love_chipmunk__GrooveJoint_t)
// PivotJoint (SWIGTYPE_p_boost__shared_ptrT_love_chipmunk__PivotJoint_t)
// Shape (SWIGTYPE_p_boost__shared_ptrT_love_chipmunk__Shape_t)
// Joint (SWIGTYPE_p_boost__shared_ptrT_love_chipmunk__Joint_t)

// Fused: 
// PolygonShape:getTransformedPoints => _PolygonShape_getTransformedPoints
// PinJoint:getPoints => _PinJoint_getPoints
// PivotJoint:getPoint => _PivotJoint_getPoint

namespace love_chipmunk
{

	bool mod_is_slidejoint(lua_State * L, int idx);
	pSlideJoint mod_to_slidejoint(lua_State * L, int idx);
	void mod_push_slidejoint(lua_State * L, pSlideJoint slidejoint);

	bool mod_is_pinjoint(lua_State * L, int idx);
	pPinJoint mod_to_pinjoint(lua_State * L, int idx);
	void mod_push_pinjoint(lua_State * L, pPinJoint pinjoint);

	bool mod_is_body(lua_State * L, int idx);
	pBody mod_to_body(lua_State * L, int idx);
	void mod_push_body(lua_State * L, pBody body);

	bool mod_is_segmentshape(lua_State * L, int idx);
	pSegmentShape mod_to_segmentshape(lua_State * L, int idx);
	void mod_push_segmentshape(lua_State * L, pSegmentShape segmentshape);

	bool mod_is_polygonshape(lua_State * L, int idx);
	pPolygonShape mod_to_polygonshape(lua_State * L, int idx);
	void mod_push_polygonshape(lua_State * L, pPolygonShape polygonshape);

	bool mod_is_vector(lua_State * L, int idx);
	pVector mod_to_vector(lua_State * L, int idx);
	void mod_push_vector(lua_State * L, pVector vector);

	bool mod_is_space(lua_State * L, int idx);
	pSpace mod_to_space(lua_State * L, int idx);
	void mod_push_space(lua_State * L, pSpace space);

	bool mod_is_groovejoint(lua_State * L, int idx);
	pGrooveJoint mod_to_groovejoint(lua_State * L, int idx);
	void mod_push_groovejoint(lua_State * L, pGrooveJoint groovejoint);

	bool mod_is_pivotjoint(lua_State * L, int idx);
	pPivotJoint mod_to_pivotjoint(lua_State * L, int idx);
	void mod_push_pivotjoint(lua_State * L, pPivotJoint pivotjoint);

	bool mod_is_shape(lua_State * L, int idx);
	pShape mod_to_shape(lua_State * L, int idx);
	void mod_push_shape(lua_State * L, pShape shape);

	bool mod_is_joint(lua_State * L, int idx);
	pJoint mod_to_joint(lua_State * L, int idx);
	void mod_push_joint(lua_State * L, pJoint joint);

} // love_chipmunk
#endif
