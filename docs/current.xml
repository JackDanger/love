<?xml version='1.0' ?>
<document version="Version 0.2.1" >

  <section name="LÖVE Documentation" refer="index">

    <page name="Overview" sym="index">


      [div class="subchapter"]
      [div class="title"]
      Welcome
      [/div]
      [div class="text"]


      Welcome to the official LÖVE documentation page. Here we have explanations of all the types and objects available for the Lua scripting.
      This does not describe the inner-workings of the engine itself (but we do have an SVN repository available on SourceForge if that's what you're looking for).
      To understand anything that's going on it is recommended that you have a little bit of programming experience, but hopefully LÖVE is straight-forward and simple
      enough for even novices to get into game creation.
      [br /][br /]
      We believe that thorough documentation is important for the survival of a program so if there is something missing or incorrect, please
      [a href="http://love.sourceforge.net/?page=contact"]contact us[/a].
      [/div]
      [div class="break"][/div]
      [/div]

      [div class="subchapter"]
      [div class="title"]
      Tutorials
      [/div]
      [div class="text"]
      This page has the bare documentation and, except for the simple examples, contain no actual tutorials.
      Tutorials are available from the tutorial page on the [a href="http://love.sourceforge.net/?page=documentation"]LÖVE website[/a].
      [/div]
      [/div]


    </page>
    <page name="Licence">


      [div class="subchapter"]
      [div class="title"]Summary
      [/div]
      [div class="text"]

      LÖVE is licenced under the terms of the ZLIB licence. This is a short licence to begin with,
      but for the lazy, here's a summary:

      [ul]
      [li]Do not claim that you made this software.[/li]
      [li]Do not make an altered version and claim that it is the original software.[/li]
      [li]Otherwise, feel free to use this software in any situation, including commercial.[/li]
      [/ul]
      [/div]
      [/div]

      [div class="subchapter"]
      [div class="title"]
      ZLIB licence (full)
      [/div]
      [div class="text"]

      Copyright © 2006-2008 LÖVE Development Team[br /]
      [br /]
      This software is provided 'as-is', without any express or implied
      warranty. In no event will the authors be held liable for any damages
      arising from the use of this software.[br /]
      [br /]
      Permission is granted to anyone to use this software for any purpose,
      including commercial applications, and to alter it and redistribute it
      freely, subject to the following restrictions:[br /]
      [br /]
      1. The origin of this software must not be misrepresented; you must not
      claim that you wrote the original software. If you use this software
      in a product, an acknowledgment in the product documentation would be
      appreciated but is not required.[br /]
      [br /]
      2. Altered source versions must be plainly marked as such, and must not be
      misrepresented as being the original software.[br /]
      [br /]
      3. This notice may not be removed or altered from any source
      distribution.[br /]

      [/div]
      [/div]

      <!-- Subchapter start -->
      [div class="subchapter"]
      [div class="title"]
      External libraries
      [/div]
      [div class="text"]
      LOVE uses many libraries, such as SDL, DevIL and FreeType. These all have their own licences.
      An overview is presented here.

      [ul]
      [li]SDL ([a href="http://www.opensource.org/licenses/lgpl-license.php"]LGPL[/a])[/li]
      [li]SDL_mixer ([a href="http://www.opensource.org/licenses/lgpl-license.php"]LGPL[/a])[/li]
      [li]DevIL ([a href="http://www.opensource.org/licenses/lgpl-license.php"]LGPL[/a])[/li]
      [li]FreeType 2 ([a href="http://www.freetype.org/FTL.TXT"]FTL[/a])[/li]
      [li]PhysFS ([a href="http://www.opensource.org/licenses/zlib-license.php"]ZLIB[/a])[/li]
      [li]Lua ([a href="http://www.opensource.org/licenses/mit-license.html"]MIT[/a])[/li]
      [/ul]

      [/div]
      <!-- Subchapter end -->


      [/div]


    </page>
    <page name="Credits">
      [div class="subchapter"]
      [div class="title"]
      Creators
      [/div]
      [div class="text"]
      LÖVE is created by:[br /]
      [ul]
      [li]Anders Ruud[/li]
      [li]Michael Enger[/li]
      [li]Tommy Nguyen[/li]
      [/ul]
      [/div]
      [/div]

      <!-- Subchapter start -->
      [div class="subchapter"]
      [div class="title"]
      Libraries
      [/div]
      [div class="text"]
      LÖVE is built around these libraries, presented here in no particular order:

      [ul]
      [li][a href="http://libsdl.org/"]SDL[/a] - OS abstraction, mouse input, keyboard input.[/li]
      [li][a href="http://lua.org/"]Lua[/a] - Scripting.[/li]
      [li][a href="http://opengl.org/"]OpenGL[/a] - Hardware accelerated graphics.[/li]
      [li][a href="http://openil.sourceforge.net/"]DevIL[/a] - Image loading.[/li]
      [li][a href="http://www.freetype.org/"]FreeType 2[/a] - Font loading and rasterization.[/li]
      [li][a href="http://www.libsdl.org/projects/SDL_mixer/"]SDL_mixer[/a] - Sound loading/playing.[/li]
      [li][a href="http://icculus.org/physfs/"]PhysicsFS[/a] - Generic file loading + support for archive files.[/li]

      [/ul]

      A behemothic thanks to all of these.

      [/div]
      [/div]
      <!-- Subchapter end -->


    </page>
    <page name="Getting started">
      [div class="subchapter"]
      [div class="title"]
      Basics
      [/div]
      [div class="text"]
      Download LÖVE from [a href="http://love.sf.net"]http://love.sf.net[/a] and install.[br /]
      [br /]
      Create a new directory somewhere, and create two files:

      [ul]
      [li]main.lua - main file containing the game code.[/li]
      [li]game.conf - optional (but recommended) support file that contains info about your game.[/li]
      [/ul]

      Write the following into the game.conf file:
      [code]
      author = "Your Name"[br /]
      title = "My Awesome Game"
      [/code]

      [br /]
      And write the following into the main.lua file:
      [lua]
      function load()
      [tab /]font = love.graphics.newFont(love.default_font, 12)
      [tab /]love.graphics.setFont(font)
      [tab /]message = "Yharrr, Why hello thaarrrr!"
      end

      function draw()
      [tab /]love.graphics.draw(message, 100, 100)
      end
      [/lua]

      [br /]

      After saving, simply drag the directory you created onto the executable
      (Windows: love.exe), and the the game will start. You should see your
      message on the screen.
      [/div]
      [/div]


      [div class="subchapter"]
      [div class="title"]
      Further reading
      [/div]
      [div class="text"]
      For more information, check out the [a href="http://love.sourceforge.net/?page=documentation"]tutorials[/a].
      [/div]
      [/div]


    </page>

  </section>

  <section name="Devices" has="List of devices">

    <device name="love.graphics" brief="Device for drawing all the graphical elements in the game.">


      <function name="newImage" brief="Loads an image.">
        <param name="filename" brief="The filepath to the image file." />
        <returns type="Image" brief="An Image object containing the display data." />
        <example name="Add an image.">
          picture = love.graphics.newImage("picture.jpg")
        </example>
      </function>


      <function name="newAnimation" brief="Creates an Animation.">
        <param name="image" brief="The source Image for the Animation."/>
        <returns type="Animation" brief="An Animation object with no frames." />
        <example>
          image = love.graphics.newImage("image.png")
          anim = love.graphics.newAnimation(image)
        </example>

      </function>

      <function name="newAnimation" brief="Creates an Animation." >

        This method assumes that

        [ol]
        [li]The frames are all of equal size[/li]
        [li]The frames are ordered from top-left to bottom-right[/li]
        [li]The frame size fx*fh must also fit with the width and height of the source image.[/li]
        [/ol]

        <param name="image" brief="The source Image for the Animation."/>
        <param name="fw" brief="The width of each frame."/>
        <param name="fh" brief="The height of each frame."/>
        <param name="delay" brief="The delay (seconds) between each frame."/>
        <param name="frames" brief="The number of frames to include. (0 = all)" />
        <returns type="Animation" />
        <example>
          -- * We have a source Image of total size 128x64.
          -- * Each frame is 32x32, which means that two rows with four
          --   frames each.
          -- * We want all the frames of the source Image to be included
          --   in the Animation.

          src = love.graphics.newImage("animation_src.png")

          -- Frame size: 32x32
          -- Number of frames: all (0)
          -- Delay between each frame: 0.1 seconds.
          animation = love.graphics.newImage(src, 32, 32, 0.1, 0)

        </example>
      </function>

      <function name="newColor" brief="Creates a color.">
        <param name="red" brief="The amount of red." />
        <param name="green" brief="The amount of green." />
        <param name="blue" brief="The amount of blue." />
        <param name="alpha" brief="The amount of alpha." />
        <returns type="Color" brief="A Color object containing the color data." />
        <example name="Add a color.">
          transparent_pink = love.graphics.newColor(246, 9, 104, 150);
        </example>
      </function>

      <function name="newColor" brief="Creates a color.">
        <param name="red" brief="The amount of red." />
        <param name="green" brief="The amount of green." />
        <param name="blue" brief="The amount of blue." />
        <returns type="Color" brief="A Color object containing the color data." />
        <example name="Add a color.">
          opaque_pink = love.graphics.newColor(246, 9, 104); -- the default alpha value (255) will be used
        </example>
      </function>

      <function name="newFont" brief="Creates a new font by loading the font file.">
        Fonts loaded with [a href="http://freetype.sourceforge.net/"]FreeType[/a].
        <param name="filename" brief="The filepath to the font file." />
        <param name="size" brief="The size of the font." />
        <returns type="Font" brief="A Font object containing the font data." />
        <example name="Add some fonts.">
          big = love.graphics.newFont("Vera.ttf", 40);
          small = love.graphics.newFont("SomeAwesomeZeldaFont.ttf", 8);
        </example>
      </function>

      <function name="newImageFont" brief="Creates a new font by loading a specifically formatted image.">
        An image font is created by having a series of characters set next to each other in a horizontal row.
        Between all the characters and on the left and right sides should be a dividing line consisting of a single color
        (which is not found in the actual characters themselves).[br /]
        This [a href="gfx/imagefont.png"]example image[/a] is consiting of black and white glyphs on a transparent background
        where they are separated by yellow lines. The yellow will be used in determining where each character begins and ends.
        <param name="filename" brief="The filepath to the image file." />
        <param name="glyphs" brief="A list of the characters as they are in the image." />
        <returns type="Font" brief="A Font object containing the font data." />
        <example name="Add the example font.">
          example = love.graphics.newImageFont("imagefont.png", " ABCDEFGHIJKLMNOPQRSTUVWXYZ");
        </example>
      </function>

      <function name="newImageFont" brief="Creates a new font by loading a specifically formatted image and sets the spacing factor.">
        An image font is created by having a series of characters set next to each other in a horizontal row.
        Between all the characters and on the left and right sides should be a dividing line consisting of a single color
        (which is not found in the actual characters themselves).[br /]
        This [a href="gfx/imagefont.png"]example image[/a] is consiting of black and white glyphs on a pink background (background can be transparent)
        where they are separated by yellow lines. The yellow will be used in determining where each character begins and ends.[br /]
        <param name="filename" brief="The filepath to the image file." />
        <param name="glyphs" brief="A list of the characters as they are in the image." />
        <param name="spacing" brief="The spacing factor." />
        <returns type="Font" brief="A Font object containing the font data." />
        <example name="Add the example font with different spacing.">
          example = love.graphics.newImageFont("imagefont.png", " ABCDEFGHIJKLMNOPQRSTUVWXYZ", 0.5); -- half spacing
          example = love.graphics.newImageFont("imagefont.png", " ABCDEFGHIJKLMNOPQRSTUVWXYZ", 2); -- double spacing
		  example = love.graphics.newImageFont("imagefont.png", " ABCDEFGHIJKLMNOPQRSTUVWXYZ", -1); -- negative spacing works too
        </example>
      </function>

      <separator />

      <function name="setColor" brief="Sets the current color.">
        <param name="color" brief="A Color object." />
        <example name="Set the current color as red.">
          red = love.graphics.newColor(255, 0, 0);
          love.graphics.setColor(red);
        </example>
      </function>

      <function name="setColor" brief="Sets the current color.">
        <param name="red" brief="The amount of red." />
        <param name="green" brief="The amount of green." />
        <param name="blue" brief="The amount of blue." />
        <example name="Set the current color as blue.">
          love.graphics.setColor(10, 10, 255); -- the default alpha value (255) will be used
        </example>
      </function>

      <function name="setColor" brief="Sets the current color.">
        <param name="red" brief="The amount of red." />
        <param name="green" brief="The amount of green." />
        <param name="blue" brief="The amount of blue." />
        <param name="alpha" brief="The amount of alpha." />
        <example name="Set the current color as transparent red.">
          love.graphics.setColor(255, 10, 10, 150);
        </example>
      </function>

      <function name="setBackgroundColor" brief="Sets the background color.">
        Note: The alpha value of the Color will be ignored as the background cannot be transparent.
        <param name="color" brief="A Color object." />
        <example name="Set the background color as red.">
          red = love.graphics.newColor(255, 0, 0);
          love.graphics.setBackgroundColor(red);
        </example>
      </function>

      <function name="setBackgroundColor" brief="Sets the background color.">
        No alpha value is present as the background cannot be transparent.
        <param name="red" brief="The amount of red." />
        <param name="green" brief="The amount of green." />
        <param name="blue" brief="The amount of blue." />
        <example name="Set the current color as red, then blue.">
          love.graphics.setBackgroundColor(255, 10, 10);
          love.graphics.setBackgroundColor(10, 10, 255);
        </example>
      </function>

      <function name="setFont" brief="Sets the current font.">
        <param name="font" brief="A Font object." />
        <example name="Create and set a large font.">
          big_text = love.graphics.newFont("Vera.tff", 30);
          love.graphics.setFont(big_text);
        </example>
      </function>
	  
	  <function name="setLine" brief="Sets the width of the line used when drawing outlined primitives.">
        <param name="width" brief="The width of the line." />
		<example>
		  love.graphics.setLine(1) -- 1 pixel width lines
		  love.graphics.setLine(4) -- 4 pixel width lines
		</example>
      </function>
	  
	  <function name="setLine" brief="Sets the width and type of line used when drawing outlined primitives.">
        <param name="width" brief="The width of the line." />
		<param name="type" brief="The type of line (smooth/rough)." />
		<example>
		  love.graphics.setLine(1, love.line_smooth) -- 1 pixel width smooth lines
		  love.graphics.setLine(1, love.line_rough) -- 1 pixel width rough lines
		</example>
      </function>
	  
	  <function name="setBlendMode" brief="Sets the blending mode.">
        The blending mode controls the way transparent elements blend together.
        <param name="mode" brief="The blending mode." />

        <example>
          function draw()

          [tab /]-- Set awesome additive blending.
          [tab /]love.graphics.setBlendMode(love.blend_additive)

          [tab /]love.graphics.draw(image, ... ) -- etc

          end
        </example>

      </function>

      <function name="setColorMode" brief="Sets the color mode.">
        The color mode controls how the current color affects elements.
        <param name="mode" brief="The color mode." />

        <example>
          function draw()

          [tab /]-- Enable color modulation. Images and animations will
          [tab /]-- will be affected by the current color.
          [tab /]love.graphics.setColorMode(love.color_modulate)

          [tab /]love.graphics.draw(image, ... ) -- etc

          end
        </example>

      </function>
	  
	  <separator />
	  
	  <function name="getWidth" brief="Gets the width of the window.">
        <returns type="number" brief="The width of the game window." />
		<example name="Get the width.">
		  width = love.graphics:getWidth()
		</example>
      </function>
	  
	  <function name="getHeight" brief="Gets the height of the window.">
        <returns type="number" brief="The height of the game window." />
		<example name="Get the height.">
		  height = love.graphics:getHeight()
		</example>
      </function>

      <separator />

      <function name="draw" brief="Draws text on screen.">
        Draws text in the current color.
        <param name="string" brief="A text string." />
        <param name="x" brief="The position on the x-axis." />
        <param name="y" brief="The position on the y-axis." />
		<example name="Draw some text.">
		  love.graphics.draw("This is text!", 100, 100)
		</example>
      </function>

	  <function name="draw" brief="Draws rotated text on screen.">
        Draws rotated text in the current color.
        <param name="string" brief="A text string." />
        <param name="x" brief="The position on the x-axis." />
        <param name="y" brief="The position on the y-axis." />
        <param name="angle" brief="The angle of rotation (in degrees)." />
		<example name="Draw some rotated text.">
		  love.graphics.draw("This is text is slanted!", 100, 100, 20)
		</example>
      </function>
	  
	  <function name="draw" brief="Draws rotated/scaled text on screen.">
        Draws rotated text in the current color.
        <param name="string" brief="A text string." />
        <param name="x" brief="The position on the x-axis." />
        <param name="y" brief="The position on the y-axis." />
        <param name="angle" brief="The angle of rotation (in degrees)." />
        <param name="s" brief="The scale factor." />
		<example name="Draw some rotated/scaled text.">
		  love.graphics.draw("This is text is slanted and scaled normally!", 100, 100, 20, 1)
		  love.graphics.draw("This is text is straight and twice as big!", 100, 100, 0, 2)
		  love.graphics.draw("This is text is slanted and half as big!", 100, 100, 20, 0.5)
		</example>
      </function>
	  
	  <function name="draw" brief="Draws rotated/scaled text on screen.">
        Draws rotated text in the current color.
        <param name="string" brief="A text string." />
        <param name="x" brief="The position on the x-axis." />
        <param name="y" brief="The position on the y-axis." />
        <param name="angle" brief="The angle of rotation (in degrees)." />
        <param name="sx" brief="The scale factor along the x-axis." />
        <param name="sy" brief="The scale factor along the y-axis." />
		<example name="Draw some rotated/scaled text.">
		  love.graphics.draw("TALL TEXT", 100, 100, 0, 1, 2)
		  love.graphics.draw("WIDE TEXT", 100, 100, 0, 2, 1)
		  love.graphics.draw("ROTATEDLY SHORT TEXT", 100, 100, 20, 1, 0.5)
		</example>
      </function>

      <function name="drawf" brief="Draws formatted text on screen, with word wrap.">
        Draws text in the current color, with word wrap.
        <param name="string" brief="A text string." />
        <param name="x" brief="The position on the x-axis." />
        <param name="y" brief="The position on the y-axis." />
        <param name="limit" brief="Wrap the line after this many horizontal pixels." />
		<example name="Draw text that cannot go beyond a 100 pixel wide box.">
		  love.graphics.draw("This text is going to be broken by the auto-breaker! Breakdown!", 50, 50, 100)
		</example>
      </function>

      <function name="drawf" brief="Draws formatted text on screen, with word wrap and alignment.">
        Draws text in the current color, with word wrap and alignment.
        <param name="string" brief="A text string." />
        <param name="x" brief="The position on the x-axis." />
        <param name="y" brief="The position on the y-axis." />
        <param name="limit" brief="Wrap the line after this many horizontal pixels." />
        <param name="align" brief="The alignment" />
		<example name="Draw text that cannot go beyond a 100 pixel wide box and aligned.">
		  love.graphics.draw("This text is going to be broken by the auto-breaker! Breakdown!", 50, 50, 100, love.align_left) -- left
		  love.graphics.draw("This text is going to be broken by the auto-breaker! Breakdown!", 50, 50, 100, love.align_center) -- center
		  love.graphics.draw("This text is going to be broken by the auto-breaker! Breakdown!", 50, 50, 100, love.align_right) -- right
		</example>
      </function>

      <separator />

      <function name="draw" brief="Draws an Image or Animation on screen.">
        <param name="sprite" brief="An Image or Animation object." />
        <param name="x" brief="The position on the x-axis." />
        <param name="y" brief="The position on the y-axis." />
		<example name="Draw an image.">
		  image = love.graphics.newImage("image.png")
		  love.graphics.draw(image, 50, 50)
		</example>
      </function>

      <function name="draw" brief="Draws a rotated Image or Animation on screen.">
        <param name="sprite" brief="An Image or Animation object." />
        <param name="x" brief="The position on the x-axis." />
        <param name="y" brief="The position on the y-axis." />
        <param name="angle" brief="The angle of rotation (in degrees)." />
		<example name="Draw a rotated image.">
		  image = love.graphics.newImage("image.png")
		  love.graphics.draw(image, 50, 50, 20)
		</example>
      </function>

      <function name="draw" brief="Draws a rotated/scaled Image or Animation on screen.">
        <param name="sprite" brief="An Image or Animation object." />
        <param name="x" brief="The position on the x-axis." />
        <param name="y" brief="The position on the y-axis." />
        <param name="angle" brief="The angle of rotation (in degrees)." />
        <param name="s" brief="The scale factor." />
		<example name="Draw an image rotated and scaled.">
		  image = love.graphics.newImage("image.png")
		  love.graphics.draw(image, 50, 50, 20, 1) -- rotation, normal scale
		  love.graphics.draw(image, 50, 50, 0, 2) -- normal rotation, twice as big
		  love.graphics.draw(image, 50, 50, 20, 0.5) -- rotation, half scale
		</example>
      </function>

      <function name="draw" brief="Draws a rotated/scaled Image or Animation on screen.">
        <param name="sprite" brief="An Image or Animation object." />
        <param name="x" brief="The position on the x-axis." />
        <param name="y" brief="The position on the y-axis." />
        <param name="angle" brief="The angle of rotation (in degrees)." />
        <param name="sx" brief="The scale factor along the x-axis." />
        <param name="sy" brief="The scale factor along the y-axis." />
		<example name="Draw an image in different scales scaled.">
		  image = love.graphics.newImage("image.png")
		  love.graphics.draw(image, 50, 50, 0, 1, 2) -- tall image
		  love.graphics.draw(image, 50, 50, 0, 2, 1) -- wide image
		  love.graphics.draw(image, 50, 50, 0, 2, 2) -- image is twice as big
		</example>
      </function>
	  
	  <separator />
	  
	  <function name="draws" brief="Draws a subsprite of an Image.">
	    Note: Will not work with Animation objects.
        <param name="sprite" brief="An Image object." />
        <param name="x" brief="The position on the x-axis." />
        <param name="y" brief="The position on the y-axis." />
        <param name="cx" brief="The x-position of the image section (top-left)." />
        <param name="cy" brief="The y-position of the image section (top-left)." />
        <param name="w" brief="The width of the image section." />
		<param name="h" brief="The height of the image section." />
		<example name="Draw a subsprite of an Image.">
		  image = love.graphics.newImage("image.png") -- this image is 200x200 pixels big
		  
		  love.graphics.draws(image, 50, 50, 0, 0, 50, 50) -- top left corner (50x50 pixels)
		  love.graphics.draws(image, 50, 50, 0, 100, 200, 100) -- bottom half
		  love.graphics.draws(image, 50, 50, 50, 50, 100, 100) -- center crop (100x100 pixels)
		</example>
      </function>
	  
	  <function name="draws" brief="Draws a rotated subsprite of an Image.">
	    Note: Will not work with Animation objects.
        <param name="sprite" brief="An Image object." />
        <param name="x" brief="The position on the x-axis." />
        <param name="y" brief="The position on the y-axis." />
        <param name="cx" brief="The x-position of the image section (top-left)." />
        <param name="cy" brief="The y-position of the image section (top-left)." />
        <param name="w" brief="The width of the image section." />
		<param name="h" brief="The height of the image section." />
		<param name="angle" brief="The angle of rotation (in degrees)." />
		<example name="Draw a rotated subsprite of an Image.">
		  image = love.graphics.newImage("image.png") -- this image is 200x200 pixels big
		  love.graphics.draws(image, 50, 50, 50, 50, 100, 100, 20) -- center crop (100x100 pixels) rotated
		</example>
      </function>

	  <function name="draws" brief="Draws a rotated/scaled subsprite of an Image.">
	    Note: Will not work with Animation objects.
        <param name="sprite" brief="An Image object." />
        <param name="x" brief="The position on the x-axis." />
        <param name="y" brief="The position on the y-axis." />
        <param name="cx" brief="The x-position of the image section (top-left)." />
        <param name="cy" brief="The y-position of the image section (top-left)." />
        <param name="w" brief="The width of the image section." />
		<param name="h" brief="The height of the image section." />
		<param name="angle" brief="The angle of rotation (in degrees)." />
		<param name="s" brief="The scale factor." />
		<example name="Draw a subsprite of an Image.">
		  image = love.graphics.newImage("image.png") -- this image is 200x200 pixels big
		  love.graphics.draws(image, 50, 50, 50, 50, 100, 100, 0, 2) -- center crop (100x100 pixels) resized to be same size as original image
		</example>
      </function>
	  
	  <function name="draws" brief="Draws a rotated/scaled subsprite of an Image.">
	    Note: Will not work with Animation objects.
        <param name="sprite" brief="An Image object." />
        <param name="x" brief="The position on the x-axis." />
        <param name="y" brief="The position on the y-axis." />
        <param name="cx" brief="The x-position of the image section (top-left)." />
        <param name="cy" brief="The y-position of the image section (top-left)." />
        <param name="w" brief="The width of the image section." />
		<param name="h" brief="The height of the image section." />
		<param name="angle" brief="The angle of rotation (in degrees)." />
		<param name="sx" brief="The scale factor along the x-axis." />
        <param name="sy" brief="The scale factor along the y-axis." />
		<example name="Draw a subsprite of an Image.">
		  image = love.graphics.newImage("image.png") -- this image is 200x200 pixels big
		  
		  love.graphics.draws(image, 50, 50, 0, 0, 50, 50, 20, 2, 1) -- top left corner (50x50 pixels) made wide and rotated
		  love.graphics.draws(image, 50, 50, 0, 100, 200, 100, 0, 1, 2) -- bottom half made tall
		  love.graphics.draws(image, 50, 50, 50, 50, 100, 100, 0, 0.5, 0.5) -- center crop (100x100 pixels) scaled down by half
		</example>
      </function>
	  
	  <function name="draws" brief="Draws a rotated/scaled subsprite of an Image, rotating around a different center.">
	    Note: Will not work with Animation objects.
        <param name="sprite" brief="An Image object." />
        <param name="x" brief="The position on the x-axis." />
        <param name="y" brief="The position on the y-axis." />
        <param name="cx" brief="The x-position of the image section (top-left)." />
        <param name="cy" brief="The y-position of the image section (top-left)." />
        <param name="w" brief="The width of the image section." />
		<param name="h" brief="The height of the image section." />
		<param name="angle" brief="The angle of rotation (in degrees)." />
		<param name="sx" brief="The scale factor along the x-axis." />
        <param name="sy" brief="The scale factor along the y-axis." />
		<param name="ox" brief="The x-coordinate of the center." />
        <param name="oy" brief="The y-coordinate of the center." />
		<example name="Draw a subsprite of an Image.">
		  image = love.graphics.newImage("image.png") -- this image is 200x200 pixels big
		  love.graphics.draws(image, 50, 50, 50, 50, 100, 100, 20, 2, 2, 0, 0) -- center crop (100x100 pixels) scaled to twice the size and rotated around the top left corner
		</example>
      </function>

      <separator />

      <function name="line" brief="Draws a line from (x1,y1) to (x2,y2).">
        <param name="x1" brief="First x-coordinate." />
        <param name="y1" brief="First y-coordinate." />
        <param name="x2" brief="Second x-coordinate." />
        <param name="y2" brief="Second y-coordinate." />
		<example name="Draw a horizontal and a slanted line.">
		  love.graphics.line(100,100, 300,100) -- horizontal
		  love.graphics.line(100,100, 300,300) -- diagonal
		</example>
      </function>

      <function name="triangle" brief="Draws a triangle usign the passed coordinates.">
        Note: When drawing a filled triangle, the coordinates must be passed in a counter-clockwise order.
        <param name="type" brief="The type of triangle (outline/filled)." />
        <param name="x1" brief="First x-coordinate." />
        <param name="y1" brief="First y-coordinate." />
        <param name="x2" brief="Second x-coordinate." />
        <param name="y2" brief="Second y-coordinate." />
        <param name="x3" brief="Third x-coordinate." />
        <param name="y3" brief="Third y-coordinate." />
		<example name="Draw two triangles.">
		  love.graphics.triangle(love.draw_line, 200,200, 200,400, 500,300) -- outline
		  love.graphics.triangle(love.draw_fill, 200,200, 200,400, 500,300) -- filled
		</example>
      </function>

      <function name="quad" brief="Draws a quadrilateral usign the passed coordinates.">
        Note: When drawing a filled quadrilateral, the coordinates must be passed in a counter-clockwise order.
        <param name="type" brief="The type of quad (outline/filled)." />
        <param name="x1" brief="First x-coordinate." />
        <param name="y1" brief="First y-coordinate." />
        <param name="x2" brief="Second x-coordinate." />
        <param name="y2" brief="Second y-coordinate." />
        <param name="x3" brief="Third x-coordinate." />
        <param name="y3" brief="Third y-coordinate." />
        <param name="x4" brief="Fourth x-coordinate." />
        <param name="y4" brief="Fourht y-coordinate." />
		<example name="Draw two quads.">
		  love.graphics.quad(love.draw_line, 200,200, 200,400, 500,300, 500,100) -- outline
		  love.graphics.quad(love.draw_fill, 200,200, 200,400, 500,300, 500,100) -- filled
		</example>
      </function>

      <function name="circle" brief="Draws a circle usign the passed information.">
        <param name="type" brief="The type of circle (outline/filled)." />
		<param name="x" brief="The position on the x-axis." />
        <param name="y" brief="The position on the y-axis." />
		<param name="radius" brief="Radius of the circle." />
		<example name="Draw two circles.">
		  love.graphics.circle(love.draw_line, 200,200, 50) -- outline
		  love.graphics.circle(love.draw_fill, 200,200, 50) -- filled
		</example>
      </function>

      <function name="circle" brief="Draws a circle usign the passed information.">
        <param name="type" brief="The type of circle (outline/filled)." />
		<param name="x" brief="The position on the x-axis." />
        <param name="y" brief="The position on the y-axis." />
		<param name="radius" brief="Radius of the circle." />
		<param name="points" brief="The amount of points to use to draw the circle." />
		<example name="Draw two circles.">
		  love.graphics.circle(love.draw_fill, 200,200, 50, 5) -- pentagram
		  love.graphics.circle(love.draw_fill, 400,200, 50, 60) -- detailed circle
		</example>
      </function>

    </device>

    <device name="love.audio" brief="Device for playing audio objects (Music or Sound).">

      <function name="newSound" brief="Loads a sound file.">
        <param name="filename" brief="The filepath to the sound file." />
        <returns type="Sound" brief="A Sound object containing the audio data." />
        <example name="Add some sounds.">
          blaster = love.audio.newSound("blast.wav")
          explosion = love.audio.newSound("boom.wav")
        </example>
      </function>

      <function name="newMusic" brief="Loads a music file.">
        <param name="filename" brief="The filepath to the music file." />
        <returns type="Music" brief="A Music object containing the audio data." />
        <example name="Add some music.">
          muzik = love.audio.newMusic("totally_awesome.mp3")
        </example>
      </function>

      <separator />


      <function name="play" brief="Plays a sound.">
        <param name="sound" brief="The sound to play." />
        The Sound is played a single time, on the first available channel.
		<example name="Play a sound.">
		  blaster = love.audio.newSound("blast.wav");
		  love.audio.play(blaster)
		</example>
      </function>

      <function name="play" brief="Plays/loops a sound.">
        <param name="sound" brief="The sound to play." />
        <param name="loop" brief="The number of times to loop. (1 = play once, 0 = forever)." />
		<example name="Play a sound forever.">
		  blaster = love.audio.newSound("blast.wav");
		  love.audio.play(blaster, 0)
		</example>
      </function>

      <separator />

      <function name="play" brief="Plays music.">
        <param name="music" brief="The Music object to play." />
        Remember that only one Music can play at any time. (See love.audio).
		<example name="Play some music.">
          muzik = love.audio.newMusic("totally_awesome.mp3")
		  love.audio.play(muzik)
        </example>
      </function>

      <function name="play" brief="Plays/loops music.">
        <param name="music" brief="The Music object to play." />
        <param name="loop" brief="The number of times to loop. (1 = play once, 0 = forever)." />
        Remember that only one Music can play at any time. (See love.audio).
		<example name="Play some music forever.">
          muzik = love.audio.newMusic("totally_awesome.mp3")
		  love.audio.play(muzik, 0)
        </example>
      </function>

      <separator />

      <function name="pause" brief="Pauses all audio playback.">
	    <example name="Check if any audio is playing.">
		  love.audio.play(music_track)
		  love.audio.pause() -- pauses the music
		  love.audio.resume() -- resumes the music
		</example>
      </function>

      <function name="resume" brief="Resumes all audio playback.">
	    <example name="Check if any audio is playing.">
		  love.audio.play(music_track)
		  love.audio.pause() -- pauses the music
		  love.audio.resume() -- resumes the music
		</example>
      </function>

      <function name="stop" brief="Stops all audio playback.">
	    <example name="Check if any audio is playing.">
		  love.audio.play(music_track)
		  love.audio.stop() -- stops the music
		  love.audio.resume() -- resumes the music
		</example>
      </function>

      <separator />

      <function name="isPlaying" brief="Checks whether (any) audio is playing or not.">
        <returns type="boolean" brief="True if audio is playing, false otherwise" />
		<example name="Check if any audio is playing.">
		  love.audio.play(music_track)
		  value = love.audio.isPlaying() -- true
		  love.audio.stop()
		  value = love.audio.isPlaying() -- false
		</example>
      </function>

      <function name="isPaused" brief="Checks whether audio playback is paused or not.">
        <returns type="boolean" brief="True if audio is paused, false otherwise." />
		<example name="Check if any audio is playing.">
		  love.audio.play(music_track)
		  value = love.audio.isPaused() -- false
		  love.audio.pause()
		  value = love.audio.isPlaying() -- true
		</example>
      </function>

      <separator />

      <function name="setVolume" brief="Changes the master volume.">
        <param name="volume" brief="A number between 0 (min) and 1 (max)." />
		<example name="Sets the volume of the currently playing music track.">
		  love.audio.play(music_track)
		  love.audio.setVolume(0.5) -- half volume
		</example>
      </function>

      <see name="Sound" />
      <see name="Music" />

    </device>

    <device name="love.keyboard" brief="Keeps track of the state of the keyboard.">

      Keeps track of the state of the keyboard.

      <function name="isDown" brief="Checks whether a certain key is down.">
        Checks whether a certain key is down.
        <param name="key" brief="The key in question." />
        <returns type="boolean" brief="Whether the passed key is pressed down." />
        <example name="Common use of the keyboard.">
          -- Say we have a player table like so:
          player = { x = 200, y = 200 }

          function update(dt)
          [tab /]-- We then check each key, and move the player
          [tab /]-- accordingly (100px/second).
          [tab /]if love.keyboard.isDown(love.key_left) then
          [tab /][tab /]player.x = player.x - 100 * dt
          [tab /]end
          [tab /]if love.keyboard.isDown(love.key_right) then
          [tab /][tab /]player.x = player.x + 100 * dt
          [tab /]end
          [tab /]if love.keyboard.isDown(love.key_up) then
          [tab /][tab /]player.y = player.y - 100 * dt
          [tab /]end
          [tab /]if love.keyboard.isDown(love.key_down) then
          [tab /][tab /]player.y = player.y + 100 * dt
          [tab /]end
          end
        </example>
      </function>

    </device>

    <device name="love.mouse" brief="Keeps track of the state of the mouse.">

      Keeps track of the state of the mouse.

      <function name="getX" brief="Gets the current x-position of the mouse.">
        Gets the current x-position of the mouse.
        <returns type="number" brief="Current x-position." />
        <example name="Getting the position of the mouse.">
          function draw()
          [tab /]local x = love.mouse.getX()
          [tab /]local y = love.mouse.getY()
          [tab /]love.graphics.draw("Mouse is at: (" .. x .. "," .. y .. ")", 100, 100)
          end
        </example>
      </function>

      <function name="getY" brief="Gets the current y-position of the mouse.">
        Gets the current y-position of the mouse.
        <returns type="number" brief="Current y-position." />
        <example name="Getting the position of the mouse.">
          function draw()
          [tab /]local x = love.mouse.getX()
          [tab /]local y = love.mouse.getY()
          [tab /]love.graphics.draw("Mouse is at: (" .. x .. "," .. y .. ")", 100, 100)
          end
        </example>
      </function>

      <separator />

      <function name="setPosition" brief="Sets the current position of the mouse.">
        Sets the current position of the mouse. Note that this generates a mousemoved event.
        <param name="x" brief="The new x-position." />
        <param name="y" brief="The new y-position." />
        <example name="Moving the mouse to the center of the screen.">
          function load()
          [tab /]local w = love.graphics.getWidth()
          [tab /]local h = love.graphics.getHeight()
          [tab /]love.mouse.setPosition(w/2, h/2)
          end
        </example>
      </function>

      <separator />

      <function name="isDown" brief="Checks whether a certain button is down.">
        Checks whether a certain button is down.
        <param name="button" brief="A mouse button." />
        <returns type="boolean" brief="Whether the button is down." />
        <example name="Using mouse buttons.">
          function draw()
          [tab /]if love.mouse.isDown(love.mouse_left) then
          [tab /][tab /]love.graphics.draw("The left mouse button is being pressed ^.^", 100, 100);
          [tab /]end
          end

        </example>
      </function>

      <separator />

      <function name="setVisible" brief="Controls cursor visbility.">
        Controls cursor visbility.
        <param name="visible" brief="true = visible, false = invisible." />
        <example name="Hiding the mouse.">
          function load()
          [tab /]-- Hide the mouse.
          [tab /]love.mouse.setVisible(false)
          end
        </example>
      </function>

      <function name="isVisible" brief="Checks cursor visbility.">
        Checks cursor visbility.
        <returns type="boolean" brief="true = visible, false = invisible." />
        <example name="Cursor visibility status">
          function load()
          [tab /]if love.mouse.isVisible() then
          [tab /][tab /]print("The mouse cursor is visible.")
          [tab /]end
          end
        </example>
      </function>

    </device>

    <device name="love.filesystem" brief="Handles interactions with the filesystem.">

      This module provides access to Files in two places, and two places only:
      [ul]
      [li]The root folder of the .love-file. (Alternatively a directory).[/li]
      [li]The root folder of the save directory.[/li]
      [/ul]
      Each game is granted a single diretory on the user system where files can be saved.
      Full access to normal file I/O is no longer present due to security concerns.
      The directories will typically be something like:
      [ul]
      [li]C:\Documents and Settings\user\.love\game[/li]
      [li]/home/user/.love/game[/li]
      [/ul]
      Files that are opened for write or append will always be created in the
      save directory. The same goes for other operations that involve writing to
      the filesystem, like mkdir.
      [p]
      Files that are opened for read will be looked for in the game root folder, and then
      the save directory (in that order). So if a file with a certain filename (and
      path) exist in both the .love-file and the save folder, the one in the .love-file takes precedence.
     [/p]
      <function name="newFile" brief="Creates a new File for reading.">
        <param name="filename" brief="The filename of the File." />
        <returns type="File" brief="The newly created file." />
        <example name="Creating a new file.">
          function load()
          [tab /]file = love.filesystem.newFile("data.dat")
          [tab /]love.filesystem.open(file)
          [tab /]-- Read from file.
          [tab /]love.filesystem.close(file)
          end
        </example>
      </function>
      <function name="newFile" brief="Creates a new File.">
        <param name="filename" brief="The filename of the File." />
        <param name="mode" brief="love.file_read, love.file_write or love.file_append." />
        <returns type="File" brief="The newly created file." />
        <example name="Creating a new file.">
          function load()
          [tab /]file = love.filesystem.newFile("data.dat", love.file_write)
          [tab /]love.filesystem.open(file)
          [tab /]-- Yaay, we can write to file.
          [tab /]love.filesystem.close(file)
          end
        </example>
      </function>

      <separator />

      <function name="require" brief="Includes and runs a Lua file (once).">
        It is safe to include the same file more than once. LÖVE keeps track of included
        files to prevent reparsing. (If you want the same file to be included multiple
        times, take a look at love.filesystem.include( filename ).
        <param name="filename" brief="The filename of the file to read." />
        <example name="Including files.">
          -- main.lua (this file)

          -- File that contains "other_var"
          love.filesystem.require("other.lua")

          -- At this point, stuff from other.lua can be used.
          function load()
          [tab /]print(other_var)
          end
        </example>
      </function>

      <function name="include" brief="Includes and runs a Lua file.">
        Includes and runs a Lua file every time the function is called. (Does not
        check if the file is included already).
        <param name="filename" brief="The filename of the file to read." />
        <example name="Simple highscore.">
          function save_highscore()
          [tab /]local file = love.filesystem.newFile("highscore.lua", love.file_write)
          [tab /]love.filesystem.open(file)
          [tab /]love.filesystem.write(file, "highscore = { bob = 5, tom = 200, jane = 4000 }")
          [tab /]love.filesystem.close(file)
          end

          function load_highscore()
          [tab /]love.filesystem.include("highscore.lua")
          [tab /]-- Table "highscore" is now available.
          [tab /]print("Jane totally got: " .. highscore.jane)
          end

        </example>
      </function>

      <separator />

      <function name="exists" brief="Checks if a file (or directory) exists.">
        <param name="filename" brief="The name of the file (or directory)." />
        <returns type="boolean" brief="True if a file (or directory) exists, false otherwise." />
      </function>
      <function name="isDirectory" brief="Checks to see if a file really is a directory.">
        <param name="filename" brief="The name of the file (or directory)." />
        <returns type="boolean" brief="True if the file is a directory." />
      </function>
      <function name="isFile" brief="Checks to see if a file really is a file.">
        <param name="filename" brief="The name of the file (or directory)." />
        <returns type="boolean" brief="True if the file really is a file (and not a directory), false otherwise." />
      </function>

      <separator />

      <function name="mkdir" brief="Creates a directory.">
        <param name="filename" brief="The name of the directory." />
        <returns type="boolean" brief="True if the operation was successful." />
      </function>
      <function name="remove" brief="Deletes a file or directory.">
        <param name="filename" brief="The name of the file or directory." />
        <returns type="boolean" brief="True if the operation was successful." />
      </function>

      <separator />
      <function name="open" brief="Opens a file.">
        Opens a file for reading, writing or appending. (Depending on chosen mode
        when File was created).
        <param name="file" brief="The File to open." />
        <returns type="boolean" brief="True if the operation was successful." />
      </function>
      <function name="close" brief="Closes a file.">
        Closes a file.
        <param name="file" brief="The File to close." />
        <returns type="boolean" brief="True if the operation was successful." />
      </function>
      <function name="read" brief="Reads all data from an open File.">
        Reads all data from an open File.
        <param name="file" brief="The File to read data from." />
        <returns type="string" brief="The contents of the file." />
      </function>
      <function name="read" brief="Reads data from an open File.">
        Reads data from an open File.
        <param name="file" brief="The File to read data from." />
        <param name="count" brief="The number of bytes to read." />
        <returns type="string" brief="The read bytes." />
      </function>
      <function name="write" brief="Writes data to an open File.">
        Writes data to an open File.
        <param name="file" brief="The File to write to." />
        <param name="data" brief="The data to write." />
        <returns type="boolean" brief="True if the operation was successful." />
        <example name="Writing data to files.">
          function save_highscore()
          [tab /]local file = love.filesystem.newFile("highscore.lua", love.file_write)
          [tab /]love.filesystem.open(file)
          [tab /]love.filesystem.write(file, "highscore = { bob = 5, tom = 200, jane = 4000 }")
          [tab /]love.filesystem.close(file)
          end
        </example>
      </function>
      <separator />
      <function name="seek" brief="Seeks to a specified position in the file.">
        <param name="file" brief="The File to seek in." />
        <param name="pos" brief="The file position." />
        <returns type="boolean" brief="True if the operation was successful." />
      </function>
      <function name="tell" brief="Gets the current pen position in a File.">
        <param name="file" brief="The File get the pen position." />
        <returns type="number" brief="The current pen position." />
      </function>
      <function name="eof" brief="Checks if end of file is reached.">
        <param name="file" brief="The File in question." />
        <returns type="boolean" brief="True if end of file is reached, false otherwise." />
      </function>

    </device>

    <device name="love.timer" brief="Keeps track of time between frames.">

      The timer module does very little so far; it keeps track of time between frames,
      so that we can update game object accordingly, and records the average FPS over
      the course of one second.

      <function name="getFPS" brief="Gets the current FPS.">
        Returns the "current" framerate. (The average FPS over the last second).
        <returns type="number" brief="The FPS." />
        <example name="Displaying the FPS. (Full)">
          function load()
          [tab /]local font = love.graphics.newFont(love.default_font, 12)
          [tab /]love.graphics.setFont(font)
          end

          function draw()
          [tab /]local fps = love.timer.getFPS()
          [tab /]love.graphics.draw("Average FPS: " .. fps, 100, 100)
          end
        </example>
      </function>
      <function name="getDelta" brief="Returns the current timestep.">
        Returns the time (in seconds) since last frame. This is the same value that is
        passed with the update-callback each frame, so you should't really need to
        use this function. Ever.
        <returns type="number" brief="The current timestep." />
        <example name="Getting the time step.">
          function update(dt)
          [tab /]if dt == love.timer.getDelta() then
          [tab /][tab /]print("My God! They're equal!")
          [tab /]else
          [tab /][tab /]print("... should not be possible.")
          [tab /]end
          end

          function draw()
          [tab /]-- But we can also get the delta here, if we
          [tab /]-- really want to.
          [tab /]local dt = love.timer.getDelta()
          end
        </example>
      </function>
      <function name="sleep" brief="Delays exection for an amount of time.">
        <param name="ms" brief="The amount of milliseconds." />
        Delays execution for the specified amount of milliseconds. Tragically,
        the precision varies from system to system, and is generally not very good.
        Do not expect to get better precision than the nearest 10ms.
        <example name="Saving CPU time by sleeping.">
          function update(dt)

          [tab /]mygame:do_stuff()

          [tab /]-- Sleep 10 ms.
          [tab /]love.timer.sleep(10)
          end
        </example>
      </function>
    </device>


  </section>

  <section name="Types" has="List of types">

    <!-- :::::::::::::::::::::::::: ANIMATION :::::::::::::::::::::::::: -->

    <type name="Animation" brief="Represents a frame-by-frame animation.">
      Remember that Animations must be updated each frame. (See example)

      <method name="addFrame" brief="Adds a single frame to the Animation.">
        <param name="x" brief="The position of the frame along the x-axis." />
        <param name="y" brief="The position of the frame along the y-axis." />
        <param name="w" brief="The width of the frame." />
        <param name="h" brief="The height of the frame." />
        <param name="delay" brief="The delay in seconds after the frame. " />
      </method>

      <method name="setMode" brief="Sets the animation mode.">
        <param name="mode" brief="The animation mode." />
      </method>

      <separator />

      <method name="play" brief="Starts the Animation.">
      </method>

      <method name="stop" brief="Stops the Animation">
      </method>

      <method name="reset" brief="Sets the current frame to the first frame and resets timer." >

      </method>

      <separator />

      <method name="seek" brief="Sets the current frame.">
        <param name="frame" brief="The frame number. (0 = first)" />
      </method>

      <method name="getCurrentFrame" brief="Gets the current frame number">
        <returns type="number" brief="The frame number, where 0 is the first frame."/>
      </method>

      <separator />

      <method name="setDelay" brief="Sets the delay of a specific frame." >
        <param name="frame" brief="The frame number." />
        <param name="delay" brief="The new delay for the frame." />
      </method>

      <separator />

      <method name="setSpeed" brief="Sets the overall speed of the Animation.">
        <param name="speed" brief="Speed factor, where a value of 1 means normal speed." />
      </method>

      <method name="getSpeed" brief="Returns the current speed of the Animation.">
        <returns type="number" brief="The speed factor, where a value of 1 means normal speed." />
      </method>

      <separator />

      <method name="getWidth" brief="Gets the width of the current frame.">
        <returns type="number">The width of the current frame in pixels.</returns>
      </method>

      <method name="getHeight" brief="Gets the height of the current frame.">
        <returns type="number">The height of the current frame in pixels.</returns>
      </method>

      <separator />

      <method name="setCenter" brief="Changes the center of the Animation.">

        For instance, a 128x64 animation (assuming all frames have equal size), will have a default center at [64,32] (the actual
        center). If you want the animation to rotate around its top-left corner, you set
        the center to [0,0].

        <param name="x" brief="The position of the center along the x-axis." />
        <param name="y" brief="The position of the center along the y-axis." />
      </method>

      <separator />

      <method name="update" brief="Updates the Animation">
        Note that this must be called every frame for the Animation to run. See the example.
        <param name="dt" brief="The time since last update." />
      </method>

      <example>
        function load()
        [tab /]src = love.graphics.newImage("source.png")
        [tab /]anim = love.graphics.newAnimation(src, 32, 32, 0.1, 0)
        [tab /]anim:play()
        end

        function update(dt)
        [tab /]anim:update(dt)
        end

        function draw()
        [tab /]love.graphics.draw(anim, 50, 50)
        end
      </example>
    </type>

    <!-- :::::::::::::::::::::::::: COLOR :::::::::::::::::::::::::: -->

    <type name="Color" brief="An object containing color information.">
      A Color object is created by calling any of the [b]love.graphics.newColor()[/b] functions.
      <see name="love.graphics.newColor( red, green, blue, alpha )" />
      <see name="love.graphics.newColor( red, green, blue )" />
	  
	  <method name="setRed" brief="Sets the amount of red in the color.">
	    <param name="red" brief="The amount of red." />
	  </method>
	  
	  <method name="setGreen" brief="Sets the amount of green in the color.">
	    <param name="green" brief="The amount of green." />
	  </method>
	  
	  <method name="setBlue" brief="Sets the amount of blue in the color.">
	    <param name="blue" brief="The amount of blue." />
	  </method>
	  
	  <method name="setAlpha" brief="Sets the amount of alpha in the color.">
	    <param name="alpha" brief="The amount of alpha." />
	  </method>
	  
	  <separator />

      <method name="getRed" brief="Gets the amount of red in the color.">
        <returns type="number">The amount of red.</returns>
      </method>

      <method name="getGreen" brief="Gets the amount of green in the color.">
        <returns type="number">The amount of green.</returns>
      </method>

      <method name="getBlue" brief="Gets the amount of blue in the color.">
        <returns type="number">The amount of blue.</returns>
      </method>

      <method name="getAlpha" brief="Gets the amount of alpha in the color.">
        <returns type="number">The amount of alpha.</returns>
      </method>

    </type>

    <!-- :::::::::::::::::::::::::: FONT :::::::::::::::::::::::::: -->

    <type name="Font" brief="Represents a font.">
      A Font object is created by calling any of the [b]love.graphics.newFont()[/b] functions.[br /]
      <see name="love.graphics.newFont( filename, size )" />
      <see name="love.graphics.newImageFont( filename, glyphs )" />
      <see name="love.graphics.newImageFont( filename, glyphs, spacing )" />
      <see name="love.graphics.setFont( font )" />

      <method name="getHeight" brief="Returns the height of the font.">
        The height of the font is the size including any spacing; the height which it will need.
        <returns type="number" brief="The height of the font." />
      </method>

      <method name="getWidth" brief="Returns the width of the line.">
        Determines the line length. Does not support line-breaks.
        <param name="line" brief="A line of text." />
        <returns type="number" brief="The width of the font." />
      </method>

      <method name="setLineHeight" brief="Sets the line height of the font.">
        When rendering the font in lines the actual height will be determined by the line height multiplied by the height of the font. The default is 1.0
        <param name="height" brief="The new line height." />
      </method>

      <method name="getLineHeight" brief="Returns the line height.">
        <returns type="number" brief="The line height." />
      </method>

    </type>


    <type name="File" brief="A file that can be read from or written to.">
      A File should only be needed in these situations:
      [ul]
      [li]You need to read data directly from a file.[/li]
      [li]You need to write to a file.[/li]
      [/ul]
      In other cases, you can (and must) specify filenames directly when creating objects
      such as Image, Font and Sound.
      <method name="getSize" brief="Gets the size of the file in bytes.">
        Gets the size of the file in bytes. This requires that the File was created
        for reading, otherwise this functioin will return 0.
        <returns type="number" brief="The size of the file." />
      </method>
      <see name="love.filesystem" />
    </type>

    <!-- :::::::::::::::::::::::::: IMAGE :::::::::::::::::::::::::: -->

    <type name="Image" brief="Contains image data. Typically loaded from an image file such as png, gif or jpg.">
      Images are created and drawn on screen using functions in love.graphics. Images do currently not exist in memory after they are created as GPU textures, thus methods
      for reading single pixel colors and similar are not available.[br /]
      [br /]Supported image formats:
      [ul]
      [li]PNG[/li]
      [li]BMP[/li]
      [li]GIF[/li]
      [li]JPEG[/li]
      [li]LBM[/li]
      [li]PCX[/li]
      [li]PNM[/li]
      [li]TGA[/li]
      [li]XCF[/li]
      [li]XPM[/li]
      [li]XV[/li]
      [li](And probably not TIFF)[/li]
      [/ul]
      <see name="love.graphics.newImage( filename )" />

      <method name="getWidth" brief="Gets the width of the image.">
        <returns type="number">The width of the Image in pixels.</returns>
      </method>

      <method name="getHeight" brief="Gets the height of the image.">
        <returns type="number">The height of the Image in pixels.</returns>
      </method>

      <method name="setCenter" brief="Changes the center of the Image.">

        For instance, a 128x64 image, will have a default center at [64,32] (the actual
        center). If you want the image to rotate around its top-left corner, you set
        the center to [0,0].

        <param name="x" brief="The position of the center along the x-axis." />
        <param name="y" brief="The position of the center along the y-axis." />
      </method>
    </type>


    <!-- :::::::::::::::::::::::::: MUSIC :::::::::::::::::::::::::: -->

    <type name="Music" brief="Contains compressed sound data.">

      Can load the following formats: MP3, OGG, MIDI, XM, MOD,
      and a variety of other tracker formats.

      Music, unlike Sound, isn't fully decoded and expanded into
      memory when the game loads; decoding takes place during run-time.[br /]
      [br /]
      Note that the Music object itself has no functions; it is only used as a handle.

      <see name="Sound" />
      <see name="love.audio" />
      <see name="love.audio.newMusic( filename )" />

    </type>


    <!-- :::::::::::::::::::::::::: SOUND :::::::::::::::::::::::::: -->

    <type name="Sound" brief="Contains sound data. Loaded from a sample file.">
      Can load the following formats: WAVE, OGG, AIFF, RIFF and VOC. Sound is fully
      expanded into memory when the game loads. This means that if you load a
      5MB compressed .ogg file as a sound, it would consume ~50MB RAM when fully
      decompressed. Consider using Music in such cases.[br /]
      [br /]
      Note that the Sound object does not contain functions to play itself back;
      this happens via functions in love.audio.


      <method name="setVolume" brief="Sets the volume the sound should be played at.">
        <param name="volume" brief="The volume (a number between 0 and 1.0)." />
      </method>

      <see name="Music" />
      <see name="love.audio" />
      <see name="love.audio.newSound( filename )" />


    </type>


  </section>

  <section name="Callbacks" has="List of callbacks">
    <callback name="load" brief="Called when the game should load.">
      This function is called exacly once at the beginning of the game. This is where
      resources such as images and sounds should be loaded.
      <example>
        function load()
        [tab /]-- Load stuff here.
        [tab /]image = love.graphics.newImage("image.png");
        [tab /]sound = love.audio.newSound("effect.wav");
        end
      </example>
    </callback>

    <callback name="update" brief="Called each timestep when the game should be updated.">
      This function should update the state of the game according to the time value dt.
      <param name="dt" brief="The time since last update in seconds." />
      <example name="Moving stuff">
        player = { x = 100, y = 100 }

        function update(dt)
        [tab /]-- Move the player horizontally by +200px/second.
        [tab /]player.x = player.x + 200 * dt
        end
      </example>
    </callback>
    <callback name="draw" brief="Called each timestep right after update.">
      This is where you should draw things onto the screen.
      <example name="Drawing stuff on screen">

        function load()
        [tab /]-- Set font.
        [tab /]font = love.graphics.newFont(love.default_font, 10)
        [tab /]love.graphics.setFont(font)
        end

        function draw()
        [tab /]-- Draw a message on screen.
        [tab /]love.graphics.draw("Hello LOVE", 100, 100)
        end
      </example>
    </callback>
    <callback name="mousepressed" brief="Called when the mouse is pressed.">
      <param name="x" brief="The position of the mouse on the x-axis." />
      <param name="y" brief="The position of the mouse on the y-axis." />
      <param name="button" brief="Which button is pressed." />
      <example>
        function mousepressed(x, y, button)
        [tab /]if button == love.mouse_left then
        [tab /][tab /]print("Left mouse button was pressed")
        [tab /]end
        end
      </example>
    </callback>
    <callback name="mousereleased" brief="Called when the mouse is released.">
      <param name="x" brief="The position of the mouse on the x-axis." />
      <param name="y" brief="The position of the mouse on the y-axis." />
      <param name="button" brief="Which button is released." />
      <example>
        function mousereleased(x, y, button)
        [tab /]if button == love.mouse_left then
        [tab /][tab /]print("Left mouse button was released")
        [tab /]end
        end
      </example>
    </callback>
    <callback name="keypressed" brief="Called when a key is pressed.">
      <param name="key" brief="The key code of the pressed key." />
      <example>
        function keypressed(key)
        [tab /]if key == love.key_enter then
        [tab /][tab /]print("Enter was pressed")
        [tab /]end
        end
      </example>
    </callback>
    <callback name="keyreleased" brief="Called when a key is released.">
      <param name="key" brief="The key code of the released key." />
      <example>
        function keyreleased(key)
        [tab /]if key == love.key_enter then
        [tab /][tab /]print("Enter was released")
        [tab /]end
        end
      </example>
    </callback>
  </section>


  <section name="Miscellaneous" has="List of topics">
    <constants name="Constants" brief="List of all constants." has="List of constants">

      This is the complete list of constants available in LOVE.

      <constant name="love.key_unknown" brief="Represents an unknown key" />
      <constant name="love.key_first" />
      <constant name="love.key_backspace" brief="Backspace key" />
      <constant name="love.key_tab" brief="Tab key" />
      <constant name="love.key_clear" />
      <constant name="love.key_return" brief="Carriage return key" />
      <constant name="love.key_pause" brief="Pause key" />
      <constant name="love.key_escape" brief="Escape key" />
      <constant name="love.key_space" brief="Spacebar key" />
      <constant name="love.key_exclaim" brief="! key" />
      <constant name="love.key_quotedbl" />
      <constant name="love.key_hash" brief="# key" />
      <constant name="love.key_dollar" brief="$ key" />
      <constant name="love.key_ampersand" brief="&amp; key" />
      <constant name="love.key_quote" brief='" key' />
      <constant name="love.key_leftparen" brief="( key" />
      <constant name="love.key_rightparen" brief=") key" />
      <constant name="love.key_asterisk" brief="* key" />
      <constant name="love.key_plus" brief="+ key" />
      <constant name="love.key_comma" brief=", key" />
      <constant name="love.key_minus" brief="- key" />
      <constant name="love.key_period" brief=". key" />
      <constant name="love.key_slash" brief="/ key" />
      <constant name="love.key_0" brief="0 key" />
      <constant name="love.key_1" brief="1 key" />
      <constant name="love.key_2" brief="2 key" />
      <constant name="love.key_3" brief="3 key" />
      <constant name="love.key_4" brief="4 key" />
      <constant name="love.key_5" brief="5 key" />
      <constant name="love.key_6" brief="6 key" />
      <constant name="love.key_7" brief="7 key" />
      <constant name="love.key_8" brief="8 key" />
      <constant name="love.key_9" brief="9 key" />
      <constant name="love.key_colon" brief=": key" />
      <constant name="love.key_semicolon" brief="; key" />
      <constant name="love.key_less" brief="&lt; key" />
      <constant name="love.key_equals" brief="= key" />
      <constant name="love.key_greater" brief="&gt; key" />
      <constant name="love.key_question" brief="? key" />
      <constant name="love.key_at" brief="@ key" />
      <separator />
      <constant name="love.key_leftbracket" brief="[ key" />
      <constant name="love.key_backslash" brief="\ key" />
      <constant name="love.key_rightbracket" brief="] key" />
      <constant name="love.key_caret" brief="^ key" />
      <constant name="love.key_underscore" brief="_ key" />
      <constant name="love.key_backquote" brief=" key" />
      <constant name="love.key_a" brief="A key" />
      <constant name="love.key_b" brief="B key" />
      <constant name="love.key_c" brief="C key" />
      <constant name="love.key_d" brief="D key" />
      <constant name="love.key_e" brief="E key" />
      <constant name="love.key_f" brief="F key" />
      <constant name="love.key_g" brief="G key" />
      <constant name="love.key_h" brief="H key" />
      <constant name="love.key_i" brief="I key" />
      <constant name="love.key_j" brief="J key" />
      <constant name="love.key_k" brief="K key" />
      <constant name="love.key_l" brief="L key" />
      <constant name="love.key_m" brief="M key" />
      <constant name="love.key_n" brief="N key" />
      <constant name="love.key_o" brief="O key" />
      <constant name="love.key_p" brief="P key" />
      <constant name="love.key_q" brief="Q key" />
      <constant name="love.key_r" brief="R key" />
      <constant name="love.key_s" brief="S key" />
      <constant name="love.key_t" brief="T key" />
      <constant name="love.key_u" brief="U key" />
      <constant name="love.key_v" brief="V key" />
      <constant name="love.key_w" brief="W key" />
      <constant name="love.key_x" brief="X key" />
      <constant name="love.key_y" brief="Y key" />
      <constant name="love.key_z" brief="Z key" />
      <constant name="love.key_delete" brief="Delete key" />
      <separator />
      <constant name="love.key_kp0" brief="Keypad 0" />
      <constant name="love.key_kp1" brief="Keypad 1" />
      <constant name="love.key_kp2" brief="Keypad 2" />
      <constant name="love.key_kp3" brief="Keypad 3" />
      <constant name="love.key_kp4" brief="Keypad 4" />
      <constant name="love.key_kp5" brief="Keypad 5" />
      <constant name="love.key_kp6" brief="Keypad 6" />
      <constant name="love.key_kp7" brief="Keypad 7" />
      <constant name="love.key_kp8" brief="Keypad 8" />
      <constant name="love.key_kp9" brief="Keypad 9" />
      <constant name="love.key_kp_period" brief="Keypad ." />
      <constant name="love.key_kp_divide" brief="Keypad /" />
      <constant name="love.key_kp_multiply" brief="Keypad *" />
      <constant name="love.key_kp_minus" brief="Keypad -" />
      <constant name="love.key_kp_plus" brief="Keypad +" />
      <constant name="love.key_kp_enter" brief="Keypad enter" />
      <constant name="love.key_kp_equals" brief="Keypad =" />
      <separator />
      <constant name="love.key_up" brief="Up key" />
      <constant name="love.key_down" brief="Down key" />
      <constant name="love.key_right" brief="Right key" />
      <constant name="love.key_left" brief="Left key" />
      <constant name="love.key_insert" brief="Insert key" />
      <constant name="love.key_home" brief="Home key" />
      <constant name="love.key_end" brief="End key" />
      <constant name="love.key_pageup" brief="Page Up key" />
      <constant name="love.key_pagedown" brief="Page Down key" />
      <separator />
      <constant name="love.key_f1" brief="F1 key" />
      <constant name="love.key_f2" brief="F2 key" />
      <constant name="love.key_f3" brief="F3 key" />
      <constant name="love.key_f4" brief="F4 key" />
      <constant name="love.key_f5" brief="F5 key" />
      <constant name="love.key_f6" brief="F6 key" />
      <constant name="love.key_f7" brief="F7 key" />
      <constant name="love.key_f8" brief="F8 key" />
      <constant name="love.key_f9" brief="F9 key" />
      <constant name="love.key_f10" brief="F10 key" />
      <constant name="love.key_f11" brief="F11 key" />
      <constant name="love.key_f12" brief="F12 key" />
      <constant name="love.key_f13" brief="F13 key" />
      <constant name="love.key_f14" brief="F14 key" />
      <constant name="love.key_f15" brief="F15 key" />
      <separator />
      <constant name="love.key_numlock" brief="Num lock key" />
      <constant name="love.key_capslock" brief="Caps lock key" />
      <constant name="love.key_scrollock" brief="Scroll lock key" />
      <constant name="love.key_rshift" brief="Right shift key" />
      <constant name="love.key_lshift" brief="Left shift key" />
      <constant name="love.key_rctrl" brief="Right control key" />
      <constant name="love.key_lctrl" brief="Left control key" />
      <constant name="love.key_ralt" brief="Right alt key" />
      <constant name="love.key_lalt" brief="Left alt key" />
      <constant name="love.key_rmeta" brief="Right meta key" />
      <constant name="love.key_lmeta" brief="Left meta key" />
      <constant name="love.key_rsuper" brief="Right super key" />
      <constant name="love.key_lsuper" brief="Left super key" />
      <constant name="love.key_mode" brief="Mode key" />
      <constant name="love.key_compose" brief="Compose key" />
      <separator />
      <constant name="love.key_help" brief="Help key" />
      <constant name="love.key_print" brief="Print key" />
      <constant name="love.key_sysreq" brief="System request key" />
      <constant name="love.key_break" brief="Break key" />
      <constant name="love.key_menu" brief="Menu key" />
      <constant name="love.key_power" brief="Power key" />
      <constant name="love.key_euro" brief="€ key" />
      <constant name="love.key_undo" brief="Undo key" />
      <separator />
      <constant name="love.mouse_left" brief="The left mouse button." />
      <constant name="love.mouse_middle" brief="The middle mouse button."  />
      <constant name="love.mouse_right" brief="The right mouse button."  />
      <constant name="love.mouse_wheelup" brief="Mouse wheel scrolled upwards."  />
      <constant name="love.mouse_wheeldown" brief="Mouse wheel scrolled downwards."  />
      <separator />
      <constant name="love.align_left" brief="Align to the left side." />
      <constant name="love.align_center" brief="Align in the center (vertically or horizontally)." />
      <constant name="love.align_right" brief="Align to the right side." />
      <constant name="love.align_top" brief="Align to the top." />
      <constant name="love.align_bottom" brief="Align to the bottom." />
      <separator />
      <constant name="love.mode_loop" brief="Loops continuesly." />
      <constant name="love.mode_once" brief="Plays once." />
      <constant name="love.mode_bounce" brief="Bounces back and forth." />
      <separator />
      <constant name="love.event_message" brief="A message event." />
      <constant name="love.event_gui" brief="A GUI event." />
      <separator />
      <constant name="love.blend_normal" brief="Normal blendig mode." />
      <constant name="love.blend_additive" brief="Additive blending mode." />
      <constant name="love.color_normal" brief="Normal color mode." />
      <constant name="love.color_modulate" brief="Modulation color mode." />
      <separator />
      <constant name="love.default_font" brief="The default font (Vera)." />
      <separator />
      <constant name="love.draw_line" brief="Draws the primitive using lines." />
      <constant name="love.draw_fill" brief="Draws a filled primitive." />
      <separator />
      <constant name="love.line_smooth" brief="Sets the lines as smooth." />
      <constant name="love.line_rough" brief="Sets the lines as rough (best when drawing straight 1px wide lines)." />
    </constants>

    <constants name="Config files" brief="How to create config files." has="List of attributes">

      Each game should have a config file that specifies game title, author, version, etc. The name of
      this file must be "game.conf".
      A full listing of available attributes is presented below. [br /]
      [br /]
      All values are optional, but it is highly recommended to at least include title and author.

      <constant name="title" type="string" brief="The game title."/>
      <constant name="author" type="string" brief="The author of the game."/>
      <separator />
      <constant name="width" brief="Display resolution width."/>
      <constant name="height" brief="Display resolution height."/>
      <separator />
      <constant name="love_version" brief="The LOVE-version this game was made for."/>

      <example name="Standard config file.">
        # Title / author
        title = "Epic Quest III"
        author = "Awesome Games"

        # Display resolution
        width = 800
        height = 600
        
        # Was made for this version of LOVE:
        love_version = "0.2.1"
      </example>

    </constants>

    <page name="Keyboard shortcuts">

      [div class="subchapter"]
      [div class="title"]
      Keyboard shortcuts
      [/div]
      [div class="text"]
      At the moment there are a grand whopping two shortcuts:

      [ul]
      [li]Alt+F4 - Exits LÖVE immediately.[/li]
      [li]Ctrl+R - Reloads the current game.[/li]
      [/ul]

      [/div]
      [/div]


    </page>

  </section>
</document>
