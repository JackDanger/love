<?xml version='1.0' ?>
<document version="Version 0.2.0" >

  <section name="LÖVE Documentation" refer="index">

    <page name="Overview" sym="index">


      [div class="subchapter"]
      [div class="title"]
      Welcome
      [/div]
      [div class="text"]




      Welcome to the official LÖVE documentation page. Here we have explanations of all the types and objects available for the Lua scripting.
      This does not describe the inner-workings of the engine itself (but we do have an SVN repository available on SourceForge if that's what you're looking for).
      To understand anything that's going on it is recommended that you have a little bit of programming experience, but hopefully LÖVE is straight-forward and simple
      enough for even novices to get into game creation.
      [br /][br /]
      We believe that thorough documentation is important for the survival of a program so if there is something missing or incorrect, please
      [a href="http://love.sourceforge.net/?page=contact"]contact us[/a].
      [/div]
      [div class="break"][/div]
      [/div]

      [div class="subchapter"]
      [div class="title"]
      Tutorials
      [/div]
      [div class="text"]
      This page has the bare documentation and, except for the simple examples, contain no actual tutorials.
      Tutorials are available from the tutorial page on the [a href="http://love.sourceforge.net/?page=documentation"]LÖVE website[/a].
      [/div]
      [/div]


    </page>
    <page name="Licence">


      [div class="subchapter"]
      [div class="title"]Summary
      [/div]
      [div class="text"]

      LÖVE is licenced under the terms of the ZLIB licence. This is a short licence to begin with,
      but for the lazy, here's a summary:

      [ul]
      [li]Do not claim that you made this software.[/li]
      [li]Do not make an altered version and claim that it is the original software.[/li]
      [li]Otherwise, feel free to use this software in any situation, including commercial.[/li]
      [/ul]
      [/div]
      [/div]

      [div class="subchapter"]
      [div class="title"]
      ZLIB licence (full)
      [/div]
      [div class="text"]

      Copyright © 2006-2008 LÖVE Development Team[br /]
      [br /]
      This software is provided 'as-is', without any express or implied
      warranty. In no event will the authors be held liable for any damages
      arising from the use of this software.[br /]
      [br /]
      Permission is granted to anyone to use this software for any purpose,
      including commercial applications, and to alter it and redistribute it
      freely, subject to the following restrictions:[br /]
      [br /]
      1. The origin of this software must not be misrepresented; you must not
      claim that you wrote the original software. If you use this software
      in a product, an acknowledgment in the product documentation would be
      appreciated but is not required.[br /]
      [br /]
      2. Altered source versions must be plainly marked as such, and must not be
      misrepresented as being the original software.[br /]
      [br /]
      3. This notice may not be removed or altered from any source
      distribution.[br /]

      [/div]
      [/div]

      <!-- Subchapter start -->
      [div class="subchapter"]
      [div class="title"]
      External libraries
      [/div]
      [div class="text"]
      LOVE uses many libraries, such as SDL, DevIL and FreeType. These all have their own licences.
      An overview is presented here.

      [ul]
      [li]SDL ([a href="http://www.opensource.org/licenses/lgpl-license.php"]LGPL[/a])[/li]
      [li]SDL_mixer ([a href="http://www.opensource.org/licenses/lgpl-license.php"]LGPL[/a])[/li]
      [li]DevIL ([a href="http://www.opensource.org/licenses/lgpl-license.php"]LGPL[/a])[/li]
      [li]FreeType 2 ([a href="http://www.freetype.org/FTL.TXT"]FTL[/a])[/li]
      [li]PhysFS ([a href="http://www.opensource.org/licenses/zlib-license.php"]ZLIB[/a])[/li]
      [li]Lua ([a href="http://www.opensource.org/licenses/mit-license.html"]MIT[/a])[/li]
      [/ul]

      [/div]
      <!-- Subchapter end -->


      [/div]


    </page>
    <page name="Credits">
      [div class="subchapter"]
      [div class="title"]
      Creators
      [/div]
      [div class="text"]
      LÖVE is created by:[br /]
      [ul]
      [li]Anders Ruud[/li]
      [li]Michael Enger[/li]
	[li]Tommy Nguyen[/li]
      [/ul]
      [/div]
      [/div]

      <!-- Subchapter start -->
      [div class="subchapter"]
      [div class="title"]
      Libraries
      [/div]
      [div class="text"]
      LÖVE is built around these libraries, presented here in no particular order:

      [ul]
      [li][a href="http://libsdl.org/"]SDL[/a] - OS abstraction, mouse input, keyboard input.[/li]
      [li][a href="http://lua.org/"]Lua[/a] - Scripting.[/li]
      [li][a href="http://opengl.org/"]OpenGL[/a] - Hardware accelerated graphics.[/li]
      [li][a href="http://openil.sourceforge.net/"]DevIL[/a] - Image loading.[/li]
      [li][a href="http://www.freetype.org/"]FreeType 2[/a] - Font loading and rasterization.[/li]
      [li][a href="http://www.libsdl.org/projects/SDL_mixer/"]SDL_mixer[/a] - Sound loading/playing.[/li]
      [li][a href="http://icculus.org/physfs/"]PhysicsFS[/a] - Generic file loading + support for archive files.[/li]

      [/ul]

      A behemothic thanks to all of these.

      [/div]
      [/div]
      <!-- Subchapter end -->


    </page>
    <page name="Getting started">
      [div class="subchapter"]
      [div class="title"]
      Basics
      [/div]
      [div class="text"]
      Download LÖVE from [a href="http://love.sf.net"]http://love.sf.net[/a] and install.[br /]
      [br /]
      Create a new directory somewhere, and create two files:

      [ul]
      [li]main.lua - main file containing the game code.[/li]
      [li]game.conf - optional (but recommended) support file that info about your game.[/li]
      [/ul]

      Write the following into the game.conf file:
      [code]
      author = "Your Name"[br /]
      title = "My Awesome Game"
      [/code]

      [br /]
      And write the following into the main.lua file:
      [lua]
      function load()
      [tab /]message = "Yharrr, Why hello thaarrrr!"
      end

      function render()
      [tab /]love.graphics:draw(message, 100, 100)
      end
      [/lua]

      [br /]

      After saving, simply drag the directory you created onto the executable
      (Windows: love.exe), and the the game will start. You should see your
      message on the screen.
      [/div]
      [/div]


      [div class="subchapter"]
      [div class="title"]
      Further reading
      [/div]
      [div class="text"]
      For more information, check out the [a href="http://love.sourceforge.net/?page=documentation"]tutorials[/a].
      [/div]
      [/div]


    </page>

  </section>

  <section name="Devices" has="List of devices">

    <device name="love.objects" brief="An interface for creating objects within the game engine such as images or music.">

      <function name="newImage" brief="Loads an image.">
        <param name="filename" brief="The filepath to the image file." />
        <returns type="Image" brief="An Image object containing the display data." />
        <example name="Add an image.">
          picture = love.objects:newImage("picture.jpg");
        </example>
      </function>

      <separator />

      <function name="newSound" brief="Loads a sound file.">
        <param name="filename" brief="The filepath to the sound file." />
        <returns type="Sound" brief="A Sound object containing the audio data." />
        <example name="Add some sounds.">
          blaster = love.objects:newSound("blast.wav");
          explosion = love.objects:newSound("boom.wav");
        </example>
      </function>

      <separator />
      
      <function name="newMusic" brief="Loads a music file.">
        <param name="filename" brief="The filepath to the music file." />
        <returns type="Music" brief="A Music object containing the audio data." />
        <example name="Add some music.">
          muzik = love.objects:newMusic("totally_awesome.mp3");
        </example>
      </function>


      <separator />

      <function name="newColor" brief="Creates a color.">
        <param name="red" brief="The amount of red." />
        <param name="green" brief="The amount of green." />
        <param name="blue" brief="The amount of blue." />
        <param name="alpha" brief="The amount of alpha." />
        <returns type="Color" brief="A Color object containing the color data." />
        <example name="Add a color.">
          transparent_pink = love.objects:newColor(246, 9, 104, 150);
        </example>
      </function>

      <function name="newColor" brief="Creates a color.">
        <param name="red" brief="The amount of red." />
        <param name="green" brief="The amount of green." />
        <param name="blue" brief="The amount of blue." />
        <returns type="Color" brief="A Color object containing the color data." />
        <example name="Add a color.">
          opaque_pink = love.objects:newColor(246, 9, 104); -- the default alpha value (255) will be used
        </example>
      </function>

      <separator />

      <function name="newFont" brief="Creates a new font by loading the font file.">
        Fonts loaded with [a href="http://freetype.sourceforge.net/"]FreeType[/a].
        <param name="filename" brief="The filepath to the font file." />
        <param name="size" brief="The size of the font." />
        <returns type="Font" brief="A Font object containing the font data." />
        <example name="Add some fonts.">
          big = love.objects:newFont("Vera.ttf", 40);
          small = love.objects:newFont("SomeAwesomeZeldaFont.ttf", 8);
        </example>
      </function>
	 
	 <function name="newImageFont" brief="Creates a new font by loading a specifically formatted image.">
	   An image font is created by having a series of characters set next to each other in a horizontal row.
	   Between all the characters and on the left and right sides should be a dividing line consisting of a single color
	   (which is not found in the actual characters themselves).[br /]
	   This [a href="gfx/imagefont.png"]example image[/a] is consiting of black and white glyphs on a pink background (background can be transparent)
	   where they are separated by yellow lines. The yellow will be used in determining where each character begins and ends.
	   <param name="filename" brief="The filepath to the image file." />
        <param name="glyphs" brief="A list of the characters as they are in the image." />
	   <returns type="Font" brief="A Font object containing the font data." />
	   <example name="Add the example font.">
		example = love.objects:newImageFont("imagefont.png", " abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789.,!?-+/():;%&amp;`'*#=[]&quot;");
	   </example>
      </function>

    </device>

    <device name="love.graphics" brief="Device for drawing all the graphical elements in the game.">

      <function name="setColor" brief="Sets the current color.">
        <param name="color" brief="A Color object." />
        <example name="Set the current color as red.">
          red = love.objects:newColor(255, 0, 0);
          love.graphics:setColor(red);
        </example>
      </function>
	  
	  <function name="setColor" brief="Sets the current color.">
        <param name="red" brief="The amount of red." />
        <param name="green" brief="The amount of green." />
        <param name="blue" brief="The amount of blue." />
        <example name="Set the current color as blue.">
          love.graphics:setColor(10, 10, 255); -- the default alpha value (255) will be used
        </example>
      </function>

      <function name="setColor" brief="Sets the current color.">
        <param name="red" brief="The amount of red." />
        <param name="green" brief="The amount of green." />
        <param name="blue" brief="The amount of blue." />
        <param name="alpha" brief="The amount of alpha." />
        <example name="Set the current color as transparent red.">
          love.graphics:setColor(255, 10, 10, 150);
        </example>
      </function>

      <function name="setBackgroundColor" brief="Sets the background color.">
        Note: The alpha value of the Color will be ignored as the background cannot be transparent.
        <param name="color" brief="A Color object." />
        <example name="Set the background color as red.">
          red = love.objects:newColor(255, 0, 0);
          love.graphics:setBackground(red);
        </example>
      </function>

      <function name="setBackgroundColor" brief="Sets the background color.">
        No alpha value is present as the background cannot be transparent.
        <param name="red" brief="The amount of red." />
        <param name="green" brief="The amount of green." />
        <param name="blue" brief="The amount of blue." />
        <example name="Set the current color as red, then blue.">
          love.graphics:setBackground(255, 10, 10);
          love.graphics:setBackground(10, 10, 255);
        </example>
      </function>

      <function name="setFont" brief="Sets the current font.">
        <param name="font" brief="A Font object." />
        <example name="Create and set a large font.">
          big_text = love.objects:newFont("Vera.tff", 30);
          love.graphics:setFont(big_text);
        </example>
      </function>

      <separator />

      <function name="draw" brief="Draws text on screen.">
        Draws text in the current color.
        <param name="string" brief="A text string." />
        <param name="x" brief="The position on the x-axis." />
        <param name="y" brief="The position on the y-axis." />
      </function>

      <function name="draw" brief="Draws an Image on screen.">
        <param name="image" brief="An Image object." />
        <param name="x" brief="The position on the x-axis." />
        <param name="y" brief="The position on the y-axis." />
      </function>

      <function name="draw" brief="Draws a rotated Image on screen.">
        <param name="image" brief="An Image object." />
        <param name="x" brief="The position on the x-axis." />
        <param name="y" brief="The position on the y-axis." />
        <param name="angle" brief="The angle of rotation." />
      </function>

      <function name="draw" brief="Draws a rotated/scaled Image on screen.">
        <param name="image" brief="An Image object." />
        <param name="x" brief="The position on the x-axis." />
        <param name="y" brief="The position on the y-axis." />
        <param name="angle" brief="The angle of rotation." />
        <param name="s" brief="The scale factor." />
      </function>

      <function name="draw" brief="Draws a rotated/scaled Image on screen.">
        <param name="image" brief="An Image object." />
        <param name="x" brief="The position on the x-axis." />
        <param name="y" brief="The position on the y-axis." />
        <param name="angle" brief="The angle of rotation." />
        <param name="sx" brief="The scale factor along the x-axis." />
        <param name="sy" brief="The scale factor along the y-axis." />
      </function>
	 
      <separator />

      <function name="drawLine" brief="Draws a line from the point (x1,y1) to the point (x2,y2).">
        The xpos and ypos coordinates denote the absolute position of the shape on the screen whereas the (x1,y1) and (x2,y2) coordinates are relative to that position.
        <param name="xpos" brief="The position on the x-axis." />
        <param name="ypos" brief="The position on the y-axis." />
        <param name="x1" brief="The first relative x-coordinate." />
        <param name="y1" brief="The first relative y-coordinate." />
        <param name="x2" brief="The second relative x-coordinate." />
        <param name="y2" brief="The second relative y-coordinate." />
        <example name="Draws a horizontal line.">
          love.graphics:drawLine(100, 100, -50, 0, 50, 0);
        </example>
      </function>

      <function name="drawLine" brief="Draws a line from the point (x1,y1) to the point (x2,y2) with a certain thickness.">
        The xpos and ypos coordinates denote the absolute position of the shape on the screen whereas the (x1,y1) and (x2,y2) coordinates are relative to that position.
        <param name="xpos" brief="The position on the x-axis." />
        <param name="ypos" brief="The position on the y-axis." />
        <param name="x1" brief="The first relative x-coordinate." />
        <param name="y1" brief="The first relative y-coordinate." />
        <param name="x2" brief="The second relative x-coordinate." />
        <param name="y2" brief="The second relative y-coordinate." />
        <param name="width" brief="The width of the drawn line (minimum: 1)." />
        <example name="Draws a thick horizontal line.">
          love.graphics:drawLine(100, 100, -50, 0, 50, 0, 5); -- very thick
        </example>
        <example name="Draws a slightly thick diagonal line.">
          love.graphics:drawLine(100, 100, -50, -50, 50, 50, 2); -- slightly thick
        </example>
      </function>

      <separator />

      <function name="drawTriangle" brief="Draws a triangle using lines between the points (x1,y1), (x2,y2) and (x3, y3).">
        The xpos and ypos coordinates denote the absolute position of the shape on the screen whereas the other coordinates are relative to that position.
        <param name="xpos" brief="The position on the x-axis." />
        <param name="ypos" brief="The position on the y-axis." />
        <param name="x1" brief="The first relative x-coordinate." />
        <param name="y1" brief="The first relative y-coordinate." />
        <param name="x2" brief="The second relative x-coordinate." />
        <param name="y2" brief="The second relative y-coordinate." />
        <param name="x3" brief="The third relative x-coordinate." />
        <param name="y3" brief="The third relative y-coordinate." />
        <example name="Draws a triangle.">
          love.graphics:drawTriangle(100, 100, -50, 50, 50, 50, 0, -50);
        </example>
      </function>

      <function name="drawTriangle" brief="Draws a triangle using lines of a determined thickness between the points (x1,y1), (x2,y2) and (x3, y3).">
        The xpos and ypos coordinates denote the absolute position of the shape on the screen whereas the other coordinates are relative to that position.
        <param name="xpos" brief="The position on the x-axis." />
        <param name="ypos" brief="The position on the y-axis." />
        <param name="x1" brief="The first relative x-coordinate." />
        <param name="y1" brief="The first relative y-coordinate." />
        <param name="x2" brief="The second relative x-coordinate." />
        <param name="y2" brief="The second relative y-coordinate." />
        <param name="x3" brief="The third relative x-coordinate." />
        <param name="y3" brief="The third relative y-coordinate." />
        <param name="width" brief="The width of the drawn lines (minimum: 1)." />
        <example name="Draws a triangle.">
          love.graphics:drawTriangle(100, 100, -50, 50, 50, 50, 0, -50, 2); -- slightly thick lines
        </example>
      </function>

      <function name="fillTriangle" brief="Draws a filled triangle determined by the points (x1,y1), (x2,y2) and (x3, y3).">
        The xpos and ypos coordinates denote the absolute position of the shape on the screen whereas the other coordinates are relative to that position.[br /]
        [b]WARNING:[/b] The points must be set in a counter-clockwise order or the shape will not be drawn.
        <param name="xpos" brief="The position on the x-axis." />
        <param name="ypos" brief="The position on the y-axis." />
        <param name="x1" brief="The first relative x-coordinate." />
        <param name="y1" brief="The first relative y-coordinate." />
        <param name="x2" brief="The second relative x-coordinate." />
        <param name="y2" brief="The second relative y-coordinate." />
        <param name="x3" brief="The third relative x-coordinate." />
        <param name="y3" brief="The third relative y-coordinate." />
        <example name="Draws a triangle.">
          love.graphics:fillTriangle(100, 100, -50, 50, 50, 50, 0, -50);
        </example>
      </function>

      <separator />

      <function name="drawQuad" brief="Draws a quadrilateral using lines between the points (x1,y1), (x2,y2), (x3, y3) and (x4, y4).">
        The xpos and ypos coordinates denote the absolute position of the shape on the screen whereas the other coordinates are relative to that position.
        <param name="xpos" brief="The position on the x-axis." />
        <param name="ypos" brief="The position on the y-axis." />
        <param name="x1" brief="The first relative x-coordinate." />
        <param name="y1" brief="The first relative y-coordinate." />
        <param name="x2" brief="The second relative x-coordinate." />
        <param name="y2" brief="The second relative y-coordinate." />
        <param name="x3" brief="The third relative x-coordinate." />
        <param name="y3" brief="The third relative y-coordinate." />
        <param name="x4" brief="The fourth relative x-coordinate." />
        <param name="y4" brief="The fourth relative y-coordinate." />
        <example name="Draws a rectangle.">
          love.graphics:drawQuad(100, 100, -50, 50, -50, -50, 50, -50, 50, 50);
        </example>
      </function>

      <function name="drawQuad" brief="Draws a quadrilateral using lines of a determined thickness between the points (x1,y1), (x2,y2), (x3, y3) and (x4, y4).">
        The xpos and ypos coordinates denote the absolute position of the shape on the screen whereas the other coordinates are relative to that position.
        <param name="xpos" brief="The position on the x-axis." />
        <param name="ypos" brief="The position on the y-axis." />
        <param name="x1" brief="The first relative x-coordinate." />
        <param name="y1" brief="The first relative y-coordinate." />
        <param name="x2" brief="The second relative x-coordinate." />
        <param name="y2" brief="The second relative y-coordinate." />
        <param name="x3" brief="The third relative x-coordinate." />
        <param name="y3" brief="The third relative y-coordinate." />
        <param name="x4" brief="The fourth relative x-coordinate." />
        <param name="y4" brief="The fourth relative y-coordinate." />
        <param name="width" brief="The width of the drawn lines (minimum: 1)." />
        <example name="Draws a rectangle with slightly thick lines.">
          love.graphics:drawQuad(100, 100, -50, 50, -50, -50, 50, -50, 50, 50, 3); -- slightly thick lines
        </example>
      </function>

      <function name="fillQuad" brief="Draws a filled quadrilateral determined by the the points (x1,y1), (x2,y2), (x3, y3) and (x4, y4).">
        The xpos and ypos coordinates denote the absolute position of the shape on the screen whereas the other coordinates are relative to that position.
        [b]WARNING:[/b] The points must be set in a counter-clockwise order or the shape will not be drawn.
        <param name="xpos" brief="The position on the x-axis." />
        <param name="ypos" brief="The position on the y-axis." />
        <param name="x1" brief="The first relative x-coordinate." />
        <param name="y1" brief="The first relative y-coordinate." />
        <param name="x2" brief="The second relative x-coordinate." />
        <param name="y2" brief="The second relative y-coordinate." />
        <param name="x3" brief="The third relative x-coordinate." />
        <param name="y3" brief="The third relative y-coordinate." />
        <param name="x4" brief="The fourth relative x-coordinate." />
        <param name="y4" brief="The fourth relative y-coordinate." />
        <example name="Draws a rectangle.">
          love.graphics:fillQuad(100, 100, -50, 50, -50, -50, 50, -50, 50, 50);
        </example>
      </function>

      <separator />

      <function name="drawCircle" brief="Draws a circle using lines around the point (xpos, ypos).">
        [i]Note:[/i] The circle will be drawn using 10 points.
        <param name="xpos" brief="The position on the x-axis." />
        <param name="ypos" brief="The position on the y-axis." />
        <param name="radius" brief="The radius of the circle." />
        <example name="Draws a circle.">
          love.graphics:drawCircle(100, 100, 50);
        </example>
      </function>

      <function name="drawCircle" brief="Draws a circle using lines around the point (xpos, ypos).">
        <param name="xpos" brief="The position on the x-axis." />
        <param name="ypos" brief="The position on the y-axis." />
        <param name="radius" brief="The radius of the circle." />
        <param name="points" brief="The amount of points to use when drawing the circle." />
        <example name="Draws a smooth circle.">
          love.graphics:drawCircle(100, 100, 50, 30);
        </example>
      </function>

      <function name="drawCircle" brief="Draws a circle using lines around the point (xpos, ypos).">
        <param name="xpos" brief="The position on the x-axis." />
        <param name="ypos" brief="The position on the y-axis." />
        <param name="radius" brief="The radius of the circle." />
        <param name="points" brief="The amount of points to use when drawing the circle." />
        <param name="width" brief="The width of the drawn lines (minimum: 1)." />
        <example name="Draws a smooth circle with thick lines.">
          love.graphics:drawCircle(100, 100, 50, 30, 4); -- thick lines
        </example>
      </function>

      <function name="fillCircle" brief="Draws a filled circle around the point (xpos, ypos).">
        [i]Note:[/i] The circle will be drawn using 10 points.
        <param name="xpos" brief="The position on the x-axis." />
        <param name="ypos" brief="The position on the y-axis." />
        <param name="radius" brief="The radius of the circle." />
        <example name="Draws a circle.">
          love.graphics:fillCircle(100, 100, 50);
        </example>
      </function>

      <function name="fillCircle" brief="Draws a filled circle around the point (xpos, ypos).">
        <param name="xpos" brief="The position on the x-axis." />
        <param name="ypos" brief="The position on the y-axis." />
        <param name="radius" brief="The radius of the circle." />
        <param name="points" brief="The amount of points to use when drawing the circle." />
        <example name="Draws a smooth circle.">
          love.graphics:fillCircle(100, 100, 50, 30);
        </example>
      </function>

    </device>

    <device name="love.audio" brief="Device for playing audio objects (Music or Sound).">

      <function name="play" brief="Plays a sound.">
        <param name="sound" brief="The sound to play." />
        The Sound is played a single time, on the first available channel.
      </function>

      <function name="play" brief="Plays/loops a sound.">
        <param name="sound" brief="The sound to play." />
        <param name="loop" brief="The number of times to loop. (1 = play once, 0 = forever)." />
      </function>
      
      <separator />

      <function name="play" brief="Plays music.">
        <param name="music" brief="The Music object to play." />
        Remember that only one Music can play
        at any time. (See love.audio).
      </function>

      <function name="play" brief="Plays/loops music.">
        <param name="music" brief="The Music object to play." />
        <param name="loop" brief="The number of times to loop. (1 = play once, 0 = forever)." />
        Remember that only one Music can play
        at any time. (See love.audio).
      </function>

      <separator />

      <function name="pause" brief="Pauses all audio playback.">
      </function>

      <function name="resume" brief="Resumes all audio playback.">
      </function>

      <function name="stop" brief="Stops all audio playback.">
      </function>

      <separator />

      <function name="isPlaying" brief="Checks whether (any) audio is playing or not.">
        <returns type="boolean" brief="True if audio is playing, false otherwise" />
      </function>

      <function name="isPaused" brief="Checks whether audio playback is paused or not.">
        <returns type="boolean" brief="True if audio is paused, false otherwise." />
      </function>

      <separator />

      <function name="setVolume" brief="Changes the master volume.">
        <param name="volume" brief="A number from 0 (min) to 100 (max)." />
      </function>

      <see name="Sound" />
      <see name="Music" />

    </device>

    <device name="love.keyboard" brief="Keeps track of the state of the keyboard.">

      <function name="isDown" brief="Checks whether a certain key is down.">
        <param name="key" brief="The key in question." />
        <returns type="boolean" brief="Whether the passed key is pressed down." />
        <example>
          if love.keyboard:isDown(love.key_x) then
          [tab /]print("X is down!");
          end
        </example>
      </function>

    </device>

    <device name="love.mouse" brief="Keeps track of the state of the mouse.">

      <function name="getX" brief="Gets the current x-position of the mouse.">
        <returns type="number" brief="Current x-position." />
        <example>
          love.graphics:draw("mouse is at: " .. love.mouse:getX() .. "x" .. love.mouse:getY(), 100, 100);
        </example>
      </function>

      <function name="getY" brief="Gets the current y-position of the mouse.">
        <returns type="number" brief="Current y-position." />
        <example>
          love.graphics:draw("mouse is at: " .. love.mouse:getX() .. "x" .. love.mouse:getY(), 100, 100);
        </example>
      </function>

      <separator />

      <function name="isDown" brief="Checks whether a certain button is down.">
        <param name="button" brief="A mouse button." />
        <returns type="boolean" brief="Whether the button is down." />
        <example>
          if love.mouse:mouse:isDown(love.mouse_left) then
          [tab /]love.graphics:draw("the left mouse button is being pressed ^.^", 100, 100);
          end
        </example>
      </function>

      <separator />

      <function name="setVisible" brief="Constrols mouse visbility.">
        <param name="visible" brief="true = visible, false = invisible." />
        <example name="Hiding the mouse.">
          function load()
          [tab /] -- Hide the mouse.
          [tab /] love.mouse:setVisible(false)
          end
        </example>
      </function>

      <function name="isVisible" brief="Checks mouse visbility.">
        <returns type="boolean" brief="true = visible, false = invisible." />
      </function>
      
    </device>

    <device name="love.filesystem" brief="Handles interactions with the filesystem.">

      <function name="include" brief="Includes and runs a Lua file.">
        It is safe to include the same file more than once. LÖVE keeps track of included
        files, to prevent reparsing.
        <param name="filename" brief="The filename of the file to read." />
        <example name="Including files.">
          -- main.lua (this file)

          love.filesystem:include("other.lua")
          
          -- At this point, stuff from other.lua can be used.
          function load()
          [tab /]print(other_var)
          end
        </example>
      </function>



    </device>

    <device name="love.timer" brief="Keeps track of time between frames.">
      <function name="getFps" brief="Gets the current FPS.">
        The FPS is updated each second.
        <returns type="number" brief="The FPS."/>
      </function>
    </device> 
    
    <!-- <device name="love.gui">
      Does that mean this device does not officially exist for first release?
    </device>
    <device name="love.filesystem">

      <function name="include" brief="Reads and runs Lua code from a file." >
        <param name="filename" brief="The filename/path to the Lua-file." />
      </function>

      <separator />

      <function name="open" brief="Opens a file for reading/writing." >
        <param name="filename" brief="The filename of the file to open." />
        <param name="mode" brief="A string indicating access level. &quot;r&quot; for read, &quot;w&quot; for write. " />
        <returns type="File" brief="A File object, or nil if unsuccessful." />
      </function>
      <function name="close" brief="Closes an open file.">
        <param name="file" brief="The File object to close." />
      </function>

    </device> -->

  </section>

  <section name="Types" has="List of types">

    <!-- :::::::::::::::::::::::::: COLOR :::::::::::::::::::::::::: -->

    <type name="Color" brief="An object containing color information.">
      A Color object is created by calling any of the [b]love.objects:newColor()[/b] functions.
      <see name="love.objects:newColor( red, green, blue, alpha )" />
      <see name="love.objects:newColor( red, green, blue )" />
      
      <function name="getRed" brief="Gets the amount of red in the color.">
        <returns type="number">The amount of red.</returns>
      </function>

      <function name="getGreen" brief="Gets the amount of green in the color.">
        <returns type="number">The amount of green.</returns>
      </function>

      <function name="getBlue" brief="Gets the amount of blue in the color.">
        <returns type="number">The amount of blue.</returns>
      </function>

      <function name="getAlpha" brief="Gets the amount of alpha in the color.">
        <returns type="number">The amount of alpha.</returns>
      </function>

    </type>

    <!-- :::::::::::::::::::::::::: FONT :::::::::::::::::::::::::: -->

    <type name="Font" brief="Represents a font.">
      A Font object is created by calling any of the [b]love.objects:newFont()[/b] functions.[br /]
      <see name="love.objects:newFont( filename, size )" />
      <see name="love.graphics:setFont( font )" />

      <function name="getHeight" brief="Returns the height of the font.">
        The height of the font is the size including any spacing; the height which it will need.
        <returns type="number" brief="The height of the font." />
      </function>

      <function name="getWidth" brief="Returns the width of the line.">
        Determines the line length. Does not support line-breaks.
        <param name="line" brief="A line of text." />
        <returns type="number" brief="The width of the font." />
      </function>
    </type>



    <!-- :::::::::::::::::::::::::: IMAGE :::::::::::::::::::::::::: -->

    <type name="Image" brief="Contains image data. Typically loaded from an image file such as png, gif or jpg.">
      Images are created using functions in love.objects, and drawn on screen using functions in love.graphics. Images do currently not exist in memory after they are created as GPU textures, thus methods
      for reading single pixel colors and similar are not available.[br /]
      [br /]Supported image formats:
      [ul]
      [li]PNG[/li]
      [li]BMP[/li]
      [li]GIF[/li]
      [li]JPEG[/li]
      [li]LBM[/li]
      [li]PCX[/li]
      [li]PNM[/li]
      [li]TGA[/li]
      [li]XCF[/li]
      [li]XPM[/li]
      [li]XV[/li]
      [li](And probably not TIFF)[/li]
      [/ul]
      <see name="love.objects:newImage( filename )" />

      <function name="getWidth" brief="Gets the width of the image.">
        <returns type="number">The width of the Image in pixels.</returns>
      </function>

      <function name="getHeight" brief="Gets the height of the image.">
        <returns type="number">The height of the Image in pixels.</returns>
      </function>

      <function name="setCenter" brief="Changes the center of the Image.">
        
        For instance, a 128x64 image, will have a default center at [64,32] (the actual 
        center). If you want the image to rotate around its top-left corner, you set
        the center to [0,0].
        
        <param name="x" brief="The position of the center along the x-axis." />
        <param name="y" brief="The position of the center along the y-axis." />
      </function>
    </type>


    <!-- :::::::::::::::::::::::::: MUSIC :::::::::::::::::::::::::: -->

    <type name="Music" brief="Contains compressed sound data.">

      Can load the following formats: MP3, OGG, MIDI, XM, MOD,
      and a variety of other tracker formats.

      Music, unlike Sound, isn't fully decoded and expanded into
      memory when the game loads; decoding takes place during run-time.[br /]
      [br /]
      Note that the Music object itself has no functions; it is only used as a handle.
      love.objects is used to create the Music objects, and love.audio is used to play
      it.

      <see name="Sound" />
      <see name="love.audio" />
      <see name="love.objects" />
      <see name="love.objects:newMusic( filename )" />

    </type>


    <!-- :::::::::::::::::::::::::: SOUND :::::::::::::::::::::::::: -->

    <type name="Sound" brief="Contains sound data. Loaded from a sample file.">
      Can load the following formats: WAVE, OGG, AIFF, RIFF and VOC. Sound is fully
      expanded into memory when the game loads. This means that if you load a
      5MB compressed .ogg file as a sound, it would consume ~50MB RAM when fully
      decompressed. Consider using Music in such cases.[br /]
      [br /]
      Note that the Sound object does not contain functions to play itself back;
      this happens via functions in love.audio.


      <function name="setVolume" brief="Sets the volume the sound should be played at.">
        <param name="volume" brief="The volume (from 0 to 100)." />
      </function>

      <see name="Music" />
      <see name="love.audio" />
      <see name="love.objects" />
      <see name="love.objects:newSound( filename )" />


    </type>


  </section>

  <section name="Callbacks" has="List of callbacks">
    <function name="load" brief="Called when the game should load.">
      This function is called exacly once at the beginning of the game. This is where
      resources such as images and sounds should be loaded.
      <example>
        function load()
        [tab /]-- Load stuff here.
        [tab /]image = love.objects:newImage("image.png");
        [tab /]sound = love.objects:newSound("effect.wav");
        end
      </example>
    </function>

    <function name="update" brief="Called each timestep when the game should be updated.">
      This function should update the state of the game according to the time value dt.
      <param name="dt" brief="The time since last update in seconds." />
      <example name="Moving stuff">
        player = { x = 100, y = 100 }

        function update(dt)
        [tab /]-- Move the player horizontally by +200px/second.
        [tab /]player.x = player.x + 200 * dt
        end
      </example>
    </function>
    <function name="render" brief="Called each timestep right after update.">
      This is where you should draw things onto the screen.
      <example name="Drawing stuff on screen">
        function render()
        [tab /]-- Draw a message on screen.
        [tab /]love.graphics:draw("Hello LOVE", 100, 100)
        end
      </example>
    </function>
    <function name="mousepressed" brief="Called when the mouse is pressed.">
      <param name="x" brief="The position of the mouse on the x-axis." />
      <param name="y" brief="The position of the mouse on the y-axis." />
      <param name="button" brief="Which button is pressed." />
      <example>
        function mousepressed(x, y, button)
        [tab /]if button == love.mouse_left then
        [tab /][tab /]print("Left mouse button was pressed")
        [tab /]end
        end
      </example>
    </function>
    <function name="mousereleased" brief="Called when the mouse is released.">
      <param name="x" brief="The position of the mouse on the x-axis." />
      <param name="y" brief="The position of the mouse on the y-axis." />
      <param name="button" brief="Which button is released." />
      <example>
        function mousereleased(x, y, button)
        [tab /]if button == love.mouse_left then
        [tab /][tab /]print("Left mouse button was released")
        [tab /]end
        end
      </example>
    </function>
    <function name="keypressed" brief="Called when a key is pressed.">
      <param name="key" brief="The key code of the pressed key." />
      <example>
        function keypressed(key)
        [tab /]if key == love.key_enter then
        [tab /][tab /]print("Enter was pressed")
        [tab /]end
        end
      </example>
    </function>
    <function name="keyreleased" brief="Called when a key is released.">
      <param name="key" brief="The key code of the released key." />
      <example>
        function keyreleased(key)
        [tab /]if key == love.key_enter then
        [tab /][tab /]print("Enter was released")
        [tab /]end
        end
      </example>
    </function>
  </section>


  <section name="Miscellaneous" has="List of topics">
    <constants name="Constants" brief="List of all constants." has="List of constants">

      This is the complete list of constants available in LOVE.

      <constant name="love.key_unknown" brief="Represents an unknown key" />
      <constant name="love.key_first" />
      <constant name="love.key_backspace" brief="Backspace key" />
      <constant name="love.key_tab" brief="Tab key" />
      <constant name="love.key_clear" />
      <constant name="love.key_return" brief="Carriage return key" />
      <constant name="love.key_pause" brief="Pause key" />
      <constant name="love.key_escape" brief="Escape key" />
      <constant name="love.key_space" brief="Spacebar key" />
      <constant name="love.key_exclaim" brief="! key" />
      <constant name="love.key_quotedbl" />
      <constant name="love.key_hash" brief="# key" />
      <constant name="love.key_dollar" brief="$ key" />
      <constant name="love.key_ampersand" brief="&amp; key" />
      <constant name="love.key_quote" brief='" key' />
      <constant name="love.key_leftparen" brief="( key" />
      <constant name="love.key_rightparen" brief=") key" />
      <constant name="love.key_asterisk" brief="* key" />
      <constant name="love.key_plus" brief="+ key" />
      <constant name="love.key_comma" brief=", key" />
      <constant name="love.key_minus" brief="- key" />
      <constant name="love.key_period" brief=". key" />
      <constant name="love.key_slash" brief="/ key" />
      <constant name="love.key_0" brief="0 key" />
      <constant name="love.key_1" brief="1 key" />
      <constant name="love.key_2" brief="2 key" />
      <constant name="love.key_3" brief="3 key" />
      <constant name="love.key_4" brief="4 key" />
      <constant name="love.key_5" brief="5 key" />
      <constant name="love.key_6" brief="6 key" />
      <constant name="love.key_7" brief="7 key" />
      <constant name="love.key_8" brief="8 key" />
      <constant name="love.key_9" brief="9 key" />
      <constant name="love.key_colon" brief=": key" />
      <constant name="love.key_semicolon" brief="; key" />
      <constant name="love.key_less" brief="&lt; key" />
      <constant name="love.key_equals" brief="= key" />
      <constant name="love.key_greater" brief="&gt; key" />
      <constant name="love.key_question" brief="? key" />
      <constant name="love.key_at" brief="@ key" />
      <separator />
      <constant name="love.key_leftbracket" brief="[ key" />
      <constant name="love.key_backslash" brief="\ key" />
      <constant name="love.key_rightbracket" brief="] key" />
      <constant name="love.key_caret" brief="^ key" />
      <constant name="love.key_underscore" brief="_ key" />
      <constant name="love.key_backquote" brief=" key" />
      <constant name="love.key_a" brief="A key" />
      <constant name="love.key_b" brief="B key" />
      <constant name="love.key_c" brief="C key" />
      <constant name="love.key_d" brief="D key" />
      <constant name="love.key_e" brief="E key" />
      <constant name="love.key_f" brief="F key" />
      <constant name="love.key_g" brief="G key" />
      <constant name="love.key_h" brief="H key" />
      <constant name="love.key_i" brief="I key" />
      <constant name="love.key_j" brief="J key" />
      <constant name="love.key_k" brief="K key" />
      <constant name="love.key_l" brief="L key" />
      <constant name="love.key_m" brief="M key" />
      <constant name="love.key_n" brief="N key" />
      <constant name="love.key_o" brief="O key" />
      <constant name="love.key_p" brief="P key" />
      <constant name="love.key_q" brief="Q key" />
      <constant name="love.key_r" brief="R key" />
      <constant name="love.key_s" brief="S key" />
      <constant name="love.key_t" brief="T key" />
      <constant name="love.key_u" brief="U key" />
      <constant name="love.key_v" brief="V key" />
      <constant name="love.key_w" brief="W key" />
      <constant name="love.key_x" brief="X key" />
      <constant name="love.key_y" brief="Y key" />
      <constant name="love.key_z" brief="Z key" />
      <constant name="love.key_delete" brief="Delete key" />
      <separator />
      <constant name="love.key_kp0" brief="Keypad 0" />
      <constant name="love.key_kp1" brief="Keypad 1" />
      <constant name="love.key_kp2" brief="Keypad 2" />
      <constant name="love.key_kp3" brief="Keypad 3" />
      <constant name="love.key_kp4" brief="Keypad 4" />
      <constant name="love.key_kp5" brief="Keypad 5" />
      <constant name="love.key_kp6" brief="Keypad 6" />
      <constant name="love.key_kp7" brief="Keypad 7" />
      <constant name="love.key_kp8" brief="Keypad 8" />
      <constant name="love.key_kp9" brief="Keypad 9" />
      <constant name="love.key_kp_period" brief="Keypad ." />
      <constant name="love.key_kp_divide" brief="Keypad /" />
      <constant name="love.key_kp_multiply" brief="Keypad *" />
      <constant name="love.key_kp_minus" brief="Keypad -" />
      <constant name="love.key_kp_plus" brief="Keypad +" />
      <constant name="love.key_kp_enter" brief="Keypad enter" />
      <constant name="love.key_kp_equals" brief="Keypad =" />
      <separator />
      <constant name="love.key_up" brief="Up key" />
      <constant name="love.key_down" brief="Down key" />
      <constant name="love.key_right" brief="Right key" />
      <constant name="love.key_left" brief="Left key" />
      <constant name="love.key_insert" brief="Insert key" />
      <constant name="love.key_home" brief="Home key" />
      <constant name="love.key_end" brief="End key" />
      <constant name="love.key_pageup" brief="Page Up key" />
      <constant name="love.key_pagedown" brief="Page Down key" />
      <separator />
      <constant name="love.key_f1" brief="F1 key" />
      <constant name="love.key_f2" brief="F2 key" />
      <constant name="love.key_f3" brief="F3 key" />
      <constant name="love.key_f4" brief="F4 key" />
      <constant name="love.key_f5" brief="F5 key" />
      <constant name="love.key_f6" brief="F6 key" />
      <constant name="love.key_f7" brief="F7 key" />
      <constant name="love.key_f8" brief="F8 key" />
      <constant name="love.key_f9" brief="F9 key" />
      <constant name="love.key_f10" brief="F10 key" />
      <constant name="love.key_f11" brief="F11 key" />
      <constant name="love.key_f12" brief="F12 key" />
      <constant name="love.key_f13" brief="F13 key" />
      <constant name="love.key_f14" brief="F14 key" />
      <constant name="love.key_f15" brief="F15 key" />
      <separator />
      <constant name="love.key_numlock" brief="Num lock key" />
      <constant name="love.key_capslock" brief="Caps lock key" />
      <constant name="love.key_scrollock" brief="Scroll lock key" />
      <constant name="love.key_rshift" brief="Right shift key" />
      <constant name="love.key_lshift" brief="Left shift key" />
      <constant name="love.key_rctrl" brief="Right control key" />
      <constant name="love.key_lctrl" brief="Left control key" />
      <constant name="love.key_ralt" brief="Right alt key" />
      <constant name="love.key_lalt" brief="Left alt key" />
      <constant name="love.key_rmeta" brief="Right meta key" />
      <constant name="love.key_lmeta" brief="Left meta key" />
      <constant name="love.key_rsuper" brief="Right super key" />
      <constant name="love.key_lsuper" brief="Left super key" />
      <constant name="love.key_mode" brief="Mode key" />
      <constant name="love.key_compose" brief="Compose key" />
      <separator />
      <constant name="love.key_help" brief="Help key" />
      <constant name="love.key_print" brief="Print key" />
      <constant name="love.key_sysreq" brief="System request key" />
      <constant name="love.key_break" brief="Break key" />
      <constant name="love.key_menu" brief="Menu key" />
      <constant name="love.key_power" brief="Power key" />
      <constant name="love.key_euro" brief="€ key" />
      <constant name="love.key_undo" brief="Undo key" />
      <separator />
      <constant name="love.mouse_left" brief="The left mouse button." />
      <constant name="love.mouse_middle" brief="The middle mouse button."  />
      <constant name="love.mouse_right" brief="The right mouse button."  />
      <constant name="love.mouse_wheelup" brief="Mouse wheel scrolled upwards."  />
      <constant name="love.mouse_wheeldown" brief="Mouse wheel scrolled downwards."  />
      <separator />
      <constant name="love.align_left" brief="Align to the left side." />
      <constant name="love.align_center" brief="Align in the center (vertically or horizontally)." />
      <constant name="love.align_right" brief="Align to the right side." />
      <constant name="love.align_top" brief="Align to the top." />
      <constant name="love.align_bottom" brief="Align to the bottom." />
      <separator />
      <constant name="love.mode_loop" brief="Loops continuesly." />
      <constant name="love.mode_once" brief="Plays once." />
      <constant name="love.mode_bounce" brief="Bounces back and forth." />
      <separator />
      <constant name="love.event_message" brief="A message event." />
      <constant name="love.event_gui" brief="A GUI event." />
    </constants>

    <constants name="Config files" brief="How to create config files." has="List of attributes">

      Each game should have a config file that specifies game title, author, version, etc. The name of
      this file must be "game.conf".
      A full listing of available attributes is presented below. [br /]
      [br /]
      All values are optional, but it is highly recommended to at least include title and author.

      <constant name="title" type="string" brief="The game title."/>
      <constant name="author" type="string" brief="The author of the game."/>
      <separator />
      <constant name="width" brief="Display resolution width."/>
      <constant name="height" brief="Display resolution height."/>

      <example name="Standard config file.">
        # Title / author
        title = "Epic Quest III"
        author = "Awesome Games"

        # Display resolution
        width = 800
        height = 600
      </example>

    </constants>

  </section>
</document>
