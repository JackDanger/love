<?xml version='1.0' ?>
<documentation version="Version 0.x">


  <globals>
    <global name="Overview" url="index.html">

      [img src="gfx/mega-sun.png" alt="sun" style="float: right;"/]

      [div class="subchapter"]
      [div class="title"]
      Welcome
      [/div]
      [div class="text"]

      Welcome to the official LOVE documentation page. Here we have explanations of all the types and objects available for the Lua scripting. This does not describe the inner-workings of the engine itself (but we do have an SVN repository available on SourceForge if that's what you're looking for). To understand anything that's going on it is recommended that you have a little bit of programming experience, but hopefully LOVE is straight-forward and simple enough for even novices to get into game creation.
      [br /]
      We believe that thorough documentation is important for the survival of a program so if there is something missing or incorrect, please [a href="http://love.sourceforge.net/?page=contact"]contact us[/a].

      [/div]
      [/div]


      [div class="subchapter"]
      [div class="title"]
      Design
      [/div]
      [div class="text"]
      LOVE is created around the principle of a pseudo-symbiotic environment.[br /]
	  That's basically a fancy way of saying that LOVE reads the Lua code to generate a working game and Lua calls LOVE functions to generate a working game. It works like this:
      [br /]
      [img src="gfx/love-rel.png" alt="LOVE Design" /]
      
      [/div]
      [/div]


      [div class="subchapter"]
      [div class="title"]
      Tutorials
      [/div]
      [div class="text"]
      This page has the bare documentation and, except for the simple examples, contain no actual tutorials. Tutorials are available from the tutorial page on the [a href="http://love.sourceforge.net/?page=documentation"]LOVE website[/a].
      [/div]
      [/div]


    </global>
    <global name="Licence" url="licence.html">


      [div class="subchapter"]
      [div class="title"]Summary
      [/div]
      [div class="text"]

      LOVE is licenced under the terms of the ZLIB licence. This is a short licence to begin with,
      but for the lazy, here's a summary:

      [ul]
      [li]Do not claim that you made this software.[/li]
      [li]Do not make an altered version and claim that it is the original software.[/li]
      [li]Otherwise, feel free to use this software in any situation, including commercial.[/li]
      [/ul]
      [/div]
      [/div]

      [div class="subchapter"]
      [div class="title"]
      ZLIB licence (full)
      [/div]
      [div class="text"]

      Copyright Â© 2007 LOVE Development Team[br /]
      [br /]
      This software is provided 'as-is', without any express or implied
      warranty. In no event will the authors be held liable for any damages
      arising from the use of this software.[br /]
      [br /]
      Permission is granted to anyone to use this software for any purpose,
      including commercial applications, and to alter it and redistribute it
      freely, subject to the following restrictions:[br /]
      [br /]
      1. The origin of this software must not be misrepresented; you must not
      claim that you wrote the original software. If you use this software
      in a product, an acknowledgment in the product documentation would be
      appreciated but is not required.[br /]
      [br /]
      2. Altered source versions must be plainly marked as such, and must not be
      misrepresented as being the original software.[br /]
      [br /]
      3. This notice may not be removed or altered from any source
      distribution.[br /]

      [/div]
      [/div]

      <!-- Subchapter start -->
      [div class="subchapter"]
      [div class="title"]
      External libraries
      [/div]
      [div class="text"]
      LOVE uses many libraries, such as SDL, DevIL and FreeType. These all have their own licences.
      An overview is presented here.

      [ul]
      [li]SDL ([a href="http://www.opensource.org/licenses/lgpl-license.php"]LGPL[/a])[/li]
      [li]SDL_mixer ([a href="http://www.opensource.org/licenses/lgpl-license.php"]LGPL[/a])[/li]
      [li]DevIL ([a href="http://www.opensource.org/licenses/lgpl-license.php"]LGPL[/a])[/li]
      [li]FreeType 2 ([a href="http://www.freetype.org/FTL.TXT"]FTL[/a])[/li]
      [li]PhysFS ([a href="http://www.opensource.org/licenses/zlib-license.php"]ZLIB[/a])[/li]
      [li]Lua ([a href="http://www.opensource.org/licenses/mit-license.html"]MIT[/a])[/li]
      [/ul]

      [/div]
      <!-- Subchapter end -->
      
      
      [/div]


    </global>
    <global name="Credits" url="credits.html">
      [div class="subchapter"]
      [div class="title"]
      Creators
      [/div]
      [div class="text"]
      LOVE is created by:[br /]
      [ul]
      [li]Anders Ruud[/li]
      [li]Michael Enger[/li]
      [/ul]
      [/div]
      [/div]

      <!-- Subchapter start -->
      [div class="subchapter"]
      [div class="title"]
      Libraries
      [/div]
      [div class="text"]
      LOVE is built around these libraries, presented here in no particular order:

      [ul]
      [li][a href="http://libsdl.org/"]SDL[/a] - OS abstraction, mouse input, keyboard input.[/li]
      [li][a href="http://lua.org/"]Lua[/a] - Scripting.[/li]
      [li][a href="http://opengl.org/"]OpenGL[/a] - Hardware accelerated graphics.[/li]
      [li][a href="http://openil.sourceforge.net/"]DevIL[/a] - Image loading.[/li]
      [li][a href="http://www.freetype.org/"]FreeType 2[/a] - Font loading and rasterization.[/li]
      [li][a href="http://www.libsdl.org/projects/SDL_mixer/"]SDL_mixer[/a] - Sound loading/playing.[/li]
      [li][a href="http://icculus.org/physfs/"]PhysicsFS[/a] - Generic file loading + support for archive files.[/li]

      [/ul]
      
      A behemothic thanks to all of these.

      [/div]
      <!-- Subchapter end -->
      
      
    </global>
    
    
  </globals>
  
  

  <types>
	
	<!-- :::::::::::::::::::::::::: ACTOR :::::::::::::::::::::::::: -->

    <!-- <type name="Actor" brief="Todo"></type> -->
	
	<!-- :::::::::::::::::::::::::: ACTORSTATE :::::::::::::::::::::::::: -->
	
    <!-- <type name="ActorState" brief="Todo"></type> -->
	
	<!-- :::::::::::::::::::::::::: COLOR :::::::::::::::::::::::::: -->
	
    <type name="Color" brief="An object containing color information.">
	 A Color object is created by calling any of the [b]love.objects:newColor()[/b] functions.
	 <see name="love.objects:newColor( red, green, blue, alpha )" url="TODO" />
	 <see name="love.objects:newColor( hex, alpha )" url="TODO" />
	 
	 <function name="setColor" brief="Sets the current color.">
	  <param name="red" brief="The amount of red." />
	  <param name="green" brief="The amount of green." />
	  <param name="blue" brief="The amount of blue." />
	  <param name="alpha" brief="The amount of alpha." />
	 </function>
	 
	 <function name="setColor" brief="Sets the current color.">
	  <param name="red" brief="The amount of red." />
	  <param name="green" brief="The amount of green." />
	  <param name="blue" brief="The amount of blue." />
	 </function>
	 
	 <separator />
	 
	 <function name="setRed" brief="Sets the amount of red in the color.">
	  <param name="red" brief="The amount of red." />
	 </function>
	 
	 <function name="setGreen" brief="Sets the amount of green in the color.">
	  <param name="green" brief="The amount of green." />
	 </function>
	 
	 <function name="setBlue" brief="Sets the amount of blue in the color.">
	  <param name="blue" brief="The amount of blue." />
	 </function>
	 
	 <function name="setAlpha" brief="Sets the amount of alpha in the color.">
	  <param name="alpha" brief="The amount of alpha." />
	 </function>
	 
	 <separator />
	 
	 <function name="getRed" brief="Gets the amount of red in the color.">
	  <returns type="number">The amount of red.</returns>
	 </function>
	 
	 <function name="getGreen" brief="Gets the amount of green in the color.">
	  <returns type="number">The amount of green.</returns>
	 </function>
	 
	 <function name="getBlue" brief="Gets the amount of blue in the color.">
	  <returns type="number">The amount of blue.</returns>
	 </function>
	 
	 <function name="getAlpha" brief="Gets the amount of alpha in the color.">
	  <returns type="number">The amount of alpha.</returns>
	 </function>
	 
	 <separator />
	 
	 <function name="getGradient" brief="Gets a gradient between this color and another.">
	  <param name="other" brief="A pointer to the other Color object." />
	  <param name="amount" brief="How much to gradient (0 is this color, 1 is other color)." />
	  <returns type="color">A pointer to the gradient color.</returns>
	  <example>
red = love.objects:newColor(255, 0, 0);
blue = love.objects:newColor(0, 0, 255);

purple = red:getGradient(blue, 0.5);
veryred = red:getGradient(blue, 0.1);
veryblue = red:getGradient(blue, 0.9);
	  </example>
	 </function>
	 
	</type>
	
	<!-- :::::::::::::::::::::::::: FONT :::::::::::::::::::::::::: -->
	
    <type name="Font" brief="Represents a font.">
	 A Font object is created by calling any of the [b]love.objects:newFont()[/b] functions.[br /]
	 Note: Using the print methods in a font file directly is not recommended and the [b]love.graphics:drawText()[/b] function is the best solution for printing text.
	 <see name="love.objects:newDefaultFont( size )" url="TODO" />
	 <see name="love.objects:newFont( filename, size )" url="TODO" />
	 <see name="love.graphics" url="TODO" />
	 
	 <function name="print" brief="Prints some text at the current location.">
	  Does not support line-breaks. It is suggested that you use [b]text:print()[/b] instead.
	  <see name="text:print()" url="TODO" />
	  <param name="text" brief="A line of text." />
	 </function>
	 
	 <function name="print" brief="Prints some text at the coordinates.">
	  Does not support line-breaks. It is suggested that you use [b]text:print()[/b] instead.
	  <see name="text:print()" url="TODO" />
	  <param name="text" brief="A line of text." />
	  <param name="x" brief="x-coordinate" />
	  <param name="y" brief="y-coordinate" />
	 </function>
	 
	 <function name="print" brief="Prints a character at the current location.">
	  <param name="character" brief="A single character." />
	 </function>
	 
	 <function name="print" brief="Prints a character at the coordinates.">
	  <param name="character" brief="A single character." />
	  <param name="x" brief="x-coordinate" />
	  <param name="y" brief="y-coordinate" />
	 </function> 
	 
	 <separator />
	 
	 <function name="getLineHeight" brief="Returns the height of the font.">
	  The height of the font is the size including any spacing; the height which it will need.
	 </function>
	 
	 <function name="getLineWidth" brief="Returns the width of the line.">
	  Determines the line length. Does not support line-breaks.
	  <param name="line" brief="A line of text." />
	 </function> 
	</type>
	
	<!-- :::::::::::::::::::::::::: ANIMATION :::::::::::::::::::::::::: -->
	
	<type name="Animation" brief="Contains the data for an animated image.">
	 Created by calling any of the [b]love.objects:newAnimation()[/b] functions.
	 <see name="love.objects:newAnimation( image )" url="TODO" />
	 <see name="love.objects:newAnimation( image, xFrames, yFrames, frameWidth, frameHeight, delay )" url="TODO" />
	 
	 <function name="addFrame" brief="Adds a frame by extracting a frame of the assigned image.">
	  <param name="x" brief="x-coordinate within the image." />
	  <param name="y" brief="y-coordinate within the image." />
	  <param name="width" brief="Width of the frame." />
	  <param name="height" brief="Height of the frame." />
	  <param name="delay" brief="Delay after this frame (in seconds)." />
	  <example>
-- Loads a sprite sheet and designates it as the frame-animation's source image
-- We'll assume that this image is 600x40 pixels
sonicanimation = love.objects:newAnimation(love.objects:newImage("sonic.png"));

-- Creates the first animation frame by creating a sub-image of the source image
-- In this case a 40x40 square starting from the top left corner
-- And with 0.1 seconds of delay
sonicanimation:addFrame(0,0,40,40,0.1);

-- Now we take a smaller frame from somewhere in the middle of the image
sonicanimation:addFrame(420,20,40,20,0.1);
	  </example>
	 </function>
	 
	 <function name="addFrames" brief="Automatically adds frames from the source image.">
	  This assumes that all the frames are of the same size and placed in a logical grid and correctly spaced apart.
	  <param name="sizex" brief="How many frames there are per row." />
	  <param name="sizey" brief="The amount of rows." />
	  <param name="width" brief="The width of each frame." />
	  <param name="height" brief="The height of each frame." />
	  <param name="delay" brief="The delay after each frame (in seconds)." />
	  <example>
-- Takes an image of an explosion and creates a frame animation with that as its source
explosion = love.objects:newAnimation(love.objects:newImage("explosion.png"));

-- Adds the frames by designating that each of them are 96x96 pixels in size and are arranged
-- with 5 frames per rown in 3 rows, giving each frame a 0.17 seconds delay.
explosion:addFrames(5, 3, 96, 96, 0.17);
	  </example>
	 </function>
	 
	 <separator />
	 
	 <function name="start" brief="Starts the animation.">
	 </function>
	 
	 <function name="stop" brief="Stops the animation.">
	 </function>
	 
	 <function name="delay" brief="Delays the animation.">
	  <param name="t" brief="The amount of seconds to delay the animation." />
	 </function>
	 
	 <separator />
	 
	 <function name="render" brief="Renders the current frame at the current location."></function>
	 
	 <function name="render" brief="Renders the current frame at the specified coordinates.">
	  <param name="x" brief="x-coordinate" />
	  <param name="y" brief="y-coordinate" />
	 </function>
	 
	 <function name="render" brief="Renders a sub-image of the current frame at the current coordinates.">
	  <param name="x" brief="x-coordinate within the frame" />
	  <param name="y" brief="y-coordinate within the frame" />
	  <param name="width" brief="The width of the sub-image." />
	  <param name="height" brief="The height of the sub-image." />
	 </function>
	 
	 <separator />
	 
	</type>
	
	<!-- :::::::::::::::::::::::::: IMAGE :::::::::::::::::::::::::: -->
	
	<type name="Image" brief="Contains image data. Typically loaded from an image file such as png, gif or jpg.">
	 An image is created with the [b]love.objects:newImage()[/b] function.
	 <see name="love.objects:newImage( filepath )" url="TODO" />
	 
	 <function name="render" brief="Renders the image at the current location."></function>
	 
	 <function name="render" brief="Renders the image at the specified location.">
	  The coordinates denote the top left corner of the image.
	  <param name="x" brief="x-coordinate" />
	  <param name="y" brief="y-coordinate" />
	 </function>
	 
	 <function name="render" brief="Renders a sub-image starting at the specified location within the image.">
	  <param name="x" brief="x-coordinate within image" />
	  <param name="y" brief="y-coordinate within image" />
	  <param name="width" brief="Width of the subimage." />
	  <param name="height" brief="Height of the subimage." />
	  <example>
-- The size of this image is 64x64 pixles
sixtyfour = love.objects:newImage("sixtyfour.png");

-- This renders a 32x32 square of the image, starting from the top left
sixtyfour:render(0,0,32,32);

-- This renders a 20x12 rectangle from the middle of the image
sixtyfour:render(22,26,20,12);
	  </example>
	 </function>
	 
	 <separator />
	 
	 <function name="getWidth" brief="Gets the width of the image.">
      <returns type="number">The width of the Image in pixels.</returns>
     </function>
	  
     <function name="getHeight" brief="Gets the height of the image.">
      <returns type="number">The height of the Image in pixels.</returns>
     </function>
    </type>
	
	<!-- :::::::::::::::::::::::::: SOUND :::::::::::::::::::::::::: -->
	
    <type name="Sound" brief="Contains sound data. Loaded from a sample file.">
	 Can play the following types of files: WAVE, AIFF, RIFF, OGG and VOC. Created with [b]love.objects:newSound()[/b].
	 
	 <see name="love.objects:newSound( filepath )" url="TODO" />
	 
	 <function name="play" brief="Plays the designated sound."></function>
	 
	 <separator />
	 
	 <function name="setVolume" brief="Sets the volume the sound should be played at.">
	  <param name="volume" brief="The volume (from 0 to 128)." />
	 </function>
	 
	 <function name="getVolume" brief="Returns the volume that the sound will be played at.">
	  <returns type="number" brief="The volume (from 0 to 128)." />
	 </function>
	</type>
	
	<!-- :::::::::::::::::::::::::: MUSIC :::::::::::::::::::::::::: -->
	
    <type name="Music" brief="Contains compressed sound data.">
	 Can load and play the following formats: MP3, OGG, MIDI, XM and MOD. The difference between Music and Sound is that music is decoded in real-time, while sound is exanded fully in memory. Only a single channel of music is allowed at the same time. (On slower computers, decoding many samples at once is not feasible).
	 
	 <see name="love.objects:newMusic( filepath )" url="TODO" />
	 	 
	</type>
	
	<type name="Menu" brief=""> </type>
	<type name="Button" brief=""> </type>
	<type name="Label" brief=""> </type>
	<type name="MultilineLabel" brief=""> </type>
	<type name="TextBox" brief=""> </type>
	<type name="ListBox" brief=""> </type>
	<type name="DropDown" brief=""> </type>
	<type name="Slider" brief=""> </type>
	<type name="RadioButton" brief=""> </type>
	<type name="CheckBox" brief=""> </type>
	
	<!-- :::::::::::::::::::::::::: SPRITE :::::::::::::::::::::::::: -->

    <!-- <type name="Sprite" brief="Todo"></type> -->

  </types>

  <objects>
  
    <!-- :::::::::::::::::::::::::::::::: love.objects ::::::::::::::::::::::::::::: -->
	<object name="love.objects" brief="Creates objects.">
	
	  <function name="newImage" brief="Loads an image.">
	   <param name="filename" brief="The filepath to the image file. Relative to the game's folder or .love file." />
	   <example name="Add an image.">
picture = love.objects:newImage("picture.jpg");
	   </example>
	  </function>
	  
	  <separator />
	  
	  <function name="newAnimation" brief="Creates an animation from an image file.">
	   <param name="image" brief="A loaded image file." />
	   <example name="Add an animation.">
picture = love.objects:newImage("animated_picture.jpg");
animation = love.objects:newAnimation(picture);
	   </example>
	  </function>
	  
	  <function name="newAnimation" brief="Creates an animation from an image file.">
	   Takes an image consisting of a grid of frames for the animation.
	   <param name="image" brief="A loaded image file." />
	   <param name="xFrames" brief="The amount of frames per row." />
	   <param name="yFrames" brief="The amount of frames per column." />
	   <param name="frameWidth" brief="The width of each frame." />
	   <param name="frameHeight" brief="The height of each frame." />
	   <param name="delay" brief="The amount of time between each frame (in seconds)." />
	   <example name="Add an animation.">
picture = love.objects:newImage("animated_picture.jpg");
animation = love.objects:newAnimation(picture, 4, 3, 100, 75, 0.25);
	   </example>
	   <see name="Example Image" url="TODO" />
	  </function>
	  
	  <separator />
	  
	  <function name="newMusic" brief="Loads a music file.">
	   <param name="filename" brief="The filepath to the music file. Relative to the game's folder or .love file." />
	   <example name="Add some music.">
muzik = love.objects:newMusic("totally_awesome.mp3");
	   </example>
	  </function>
	  
	  <function name="newSound" brief="Loads a sound file.">
	   <param name="filename" brief="The filepath to the sound file. Relative to the game's folder or .love file." />
	   <example name="Add some sounds.">
blaster = love.objects:newSound("blast.wav");
explosion = love.objects:newSount("boom.wav");
	   </example>
	  </function>
	  
	  <separator />
	  
	  <function name="newColor" brief="Creates a color.">
	   <param name="r" brief="The amount of red." />
	   <param name="g" brief="The amount of green." />
	   <param name="b" brief="The amount of blue." />
	   <param name="a" brief="The amount of alpha (default: 255)." />
	   <example name="Add some colors.">
transparent_pink = love.objects:newColor(246, 9, 104, 150);
opaque_pink = love.objects:newColor(246, 9, 104); -- the default alpha value (255) will be used
	   </example>
	  </function>
	  
	  <function name="newColor" brief="Creates a color.">
	   <param name="code" brief="A 6-character hexadecimal color code." />
	   <param name="a" brief="The amount of alpha (default: 255)." />
	   <example name="Add some colors.">
transparent_pink = love.objects:newColor(0xF60968, 150);
opaque_pink = love.objects:newColor(0xF60968); -- the default alpha value (255) will be used
	   </example>
	  </function>
	  
	  <separator />
	  
	  <function name="newDefaultFont" brief="Creates a new font based on the default font.">
	   The default font is FreeSans.
	   <param name="size" brief="The size of the font." />
	   <example name="Add some fonts.">
big = love.objects:newDefaultFont(40);
small = love.objects:newDefaultFont(8);
	   </example>
	  </function>
	  
	  <function name="newFont" brief="Creates a new font by loading the font file.">
	   Fonts loaded with [url="http://freetype.sourceforge.net/"]FreeType[/url].
	   <param name="filename" brief="The filepath to the font file. Relative to the game's folder or .love file." />
	   <param name="size" brief="The size of the font." />
	   <example name="Add some fonts.">
big = love.objects:newFont("Arial.ttf", 40);
small = love.objects:newFont("SomeAwesomeZeldaFont.ttf", 8);
	   </example>
	  </function>
	  
	  <separator />
	  
	  <function name="newParticleSystem" brief="Creates a new particle system.">
	   This is currenly in BETA. Please do not kill.
	  </function>
	  
	  <separator />
	  
	  <function name="newBezier" brief="Creates a BÃ©zier curve.">
	   This is currenly in BETA. Please do not kill.
	  </function>
	  
	  <function name="newBezier" brief="Creates a BÃ©zier curve.">
	   This is currenly in BETA. Please do not kill.
	   <param name="x1" brief="First x-coordinate." />
	   <param name="y1" brief="First y-coordinate." />
	   <param name="x2" brief="Second x-coordinate." />
	   <param name="y2" brief="Second y-coordinate." />
	   <param name="x3" brief="Third x-coordinate." />
	   <param name="y3" brief="Third y-coordinate." />
	   <param name="x4" brief="Fourth x-coordinate." />
	   <param name="y4" brief="Fourth y-coordinate." />
	  </function>
	  
	  <separator />
	  
	  <function name="newMenu" breif="Creates a new GUI item.">
	   <param name="type" brief="The type of menu setup (default: vertical)." />
	  </function>
	  
	</object>
	
	 <!-- :::::::::::::::::::::::::::::::: love.graphics ::::::::::::::::::::::::::::: -->
	<object name="love.graphics" brief="Deals with the rendering of graphics and text.">
	
	  <function name="setColor" brief="Sets the current color.">
	   <param name="color" brief="A Color object." />
	   <example name="Set the current color as red.">
red = love.objects:newColor(0xFF1111);
love.graphics:setColor(red);
	   </example>
	  </function>
	  
	  <function name="setColor" brief="Sets the current color.">
	   <param name="r" brief="The amount of red." />
	   <param name="g" brief="The amount of green." />
	   <param name="b" brief="The amount of blue." />
	   <param name="a" brief="The amount of alpha (default: 255)." />
	   <example name="Set the current color as  transparent red and then blue.">
love.graphics:setColor(255, 10, 10, 150);
love.graphics:setColor(10, 10, 255); -- the default alpha value (255) will be used
	   </example>
	  </function>
	  
	  <function name="setBackground" brief="Sets the background color.">
	   <param name="color" brief="A Color object." />
	   <example name="Set the background color as red.">
red = love.objects:newColor(0xFF1111);
love.graphics:setBackground(red);
	   </example>
	  </function>
	  
	  <function name="setBackground" brief="Sets the background color.">
	   <param name="r" brief="The amount of red." />
	   <param name="g" brief="The amount of green." />
	   <param name="b" brief="The amount of blue." />
	   <example name="Set the current color as  transparent red and then blue.">
love.graphics:setBackground(255, 10, 10);
love.graphics:setBackground(10, 10, 255);
	   </example>
	  </function>
	  
	  <function name="setFont" brief="Sets the current font.">
	   <param name="font" brief="A font object." />
	   <example name="Create and set a large font.">
big_text = love.objects:newDefaultFont(40);
love.graphics:setFont(big_text);
	   </example>
	  </function>
	  
	  <separator />
	  
	  <function name="drawSprite" brief="Draws an image, sprite or animation on screen.">
	   <param name="sprite" brief="An Image, Sprite or FrameAnimation object." />
	   <example name="Draw an image and an animation.">
picture = love.objects:newImage("picture.jpg");
animation = love.objects:newAnimation(love.objects:newImage("animation.jpg"));

love.graphics:drawSprite(picture);
love.graphics:drawSprite(animation);
	   </example>
	  </function>
	  
	  <function name="drawSprite" brief="Draws an image, sprite or animation at the specified coordinates.">
	   <param name="sprite" brief="An Image, Sprite or FrameAnimation object." />
	   <param name="x" brief="The x-coordinate." />
	   <param name="y" brief="The y-coordinate." />
	   <example name="Draw an image and an animation.">
picture = love.objects:newImage("picture.jpg");
animation = love.objects:newAnimation(love.objects:newImage("animation.jpg"));

love.graphics:drawSprite(picture, 100, 100);
love.graphics:drawSprite(animation, 200, 100);
	   </example>
	  </function>
	  
	  <function name="drawSprite" brief="Draws a scaled image, sprite or animation at the specified coordinates.">
	   <param name="sprite" brief="An Image, Sprite or FrameAnimation object." />
	   <param name="x" brief="The x-coordinate." />
	   <param name="y" brief="The y-coordinate." />
	   <param name="width" brief="The amount to scale the width by." />
	   <param name="height" brief="The amount to scale the height by." />
	   <example name="Draw an image and an animation.">
picture = love.objects:newImage("picture.jpg");
animation = love.objects:newAnimation(love.objects:newImage("animation.jpg"));

love.graphics:drawSprite(picture, 100, 100, 2.0, 2.0); -- twice as big
love.graphics:drawSprite(animation, 200, 100, 0.5, 1.0); -- the width is half of the original size
	   </example>
	  </function>
	  
	  <function name="drawSprite" brief="Draws a piece of an image, sprite or animation at the specified coordinates.">
	   <param name="sprite" brief="An Image, Sprite or FrameAnimation object." />
	   <param name="x" brief="The x-coordinate of the position." />
	   <param name="y" brief="The y-coordinate of the position." />
	   <param name="x1" brief="The x-coordinate of the top left corner." />
	   <param name="y1" brief="The y-coordinate of the top left corner." />
	   <param name="x2" brief="The x-coordinate of the bottom left corner." />
	   <param name="y2" brief="The y-coordinate of the bottom left corner." />
	   <param name="x3" brief="The x-coordinate of the bottom right corner." />
	   <param name="y3" brief="The y-coordinate of the bottom right corner." />
	   <param name="x4" brief="The x-coordinate of the top right corner." />
	   <param name="y4" brief="The y-coordinate of the top right corner." />
	   <example name="Draw part of an image.">
picture = love.objects:newImage("picture.jpg"); -- this image is 200x200 pixels in size

-- this draws only a 100x100 pixels cut from the center of the image
love.graphics:drawSprite(picture, 100, 100, 50, 50, 50, 150, 150, 150, 150, 50);
	   </example>
	  </function>
	  
	  <function name="drawSubSprite" brief="Draws a small portion of an image, sprite or animation.">
	   <param name="sprite" brief="An Image, Sprite or FrameAnimation object." />
	   <param name="x" brief="The x-coordinate of the subsprite." />
	   <param name="y" brief="The y-coordinate of the subsprite." />
	   <param name="width" brief="The width of the subsprite." />
	   <param name="height" brief="The height of the subsprite." />
	   <example name="Draw part of an image.">
picture = love.objects:newImage("picture.jpg"); -- this image is 200x200 pixels in size

-- this draws only a 100x100 pixels cut from the center of the image
love.graphics:drawSprite(animation, 50, 50, 100, 100);
	   </example>
	  </function>
	  
	  <separator />
	  
	  <function name="drawParticleSystem" brief="Draws a particle system.">
	   <param name="sprite" brief="A ParticleSystem object." />
	  </function>
	  
	  <function name="drawBezier" brief="Draws a BÃ©zier curve at the specified position.">
	   <param name="bezier" brief="A Bezier object." />
	   <param name="x" brief="The x-coordinate." />
	   <param name="y" brief="The y-coordinate." />
	   <param name="precision" brief="The amount of points to draw (default: 20)." />
	   <param name="lineWidth" brief="The width of the line used to draw the Bezier (default: 2.0)." />
	  </function>
	  
	  <separator />
	  
	  <function name="drawString" brief="Draws a string at the specified position.">
	   <param name="str" brief="A string." />
	   <param name="x" brief="The x-coordinate." />
	   <param name="y" brief="The y-coordinate." />
	   <example name="HelloWorld">
	    love.graphics:drawString("Hello World!", 100, 100);
	   </example>
	  </function>
	  
	  <function name="drawText" brief="Draws a formatted string (including alignment, line-breaks and word wrap) at the specified position.">
	   <param name="str" brief="A string." />
	   <param name="x" brief="The x-coordinate." />
	   <param name="y" brief="The y-coordinate." />
	   <param name="limit" brief="The max length of each line (default: 0)." />
	   <param name="align" brief="The text alignment (default: LOVE_ALIGN_LEFT)." />
	   <example name="HelloWorld and Lorem Ipsum">
	    love.graphics:drawText("Hello\nWorld!", 100, 100, 0, LOVE_ALIGN_CENTER);
		
		love.graphics:drawText("Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Morbi non augue vel lacus ornare vehicula. Proin aliquam.", 100, 100, 50);
	   </example>
	  </function>
	  
	  <separator />
	  
	  <function name="drawLine" brief="Draws a line from [x1,y1] to [x2,y2].">
	   <param name="x1" brief="The first x-coordinate." />
	   <param name="y1" brief="The first y-coordinate." />
	   <param name="x2" brief="The second x-coordinate." />
	   <param name="y2" brief="The second y-coordinate." />
	   <param name="rotation" brief="The rotation of the line (default: 0)." />
	   <param name="lineWidth" brief="The width of the line (default: 1)." />
	   <example name="Draw some lines.">
love.graphics:drawLine(100, 100, 200, 100);
love.graphics:drawLine(200, 200, 200, 100, 0, 2);
love.graphics:drawLine(200, 200, 100, 100, 45);
	   </example>
	  </function>
	  
	  <function name="drawTriangle" brief="Draws a triangle at the specified coordinates.">
	   <param name="x" brief="The x-coordinate." />
	   <param name="y" brief="The y-coordinate." />
	   <param name="width" brief="The width of the triangle." />
	   <param name="height" brief="The height of the triangle." />
	   <param name="rotation" brief="The rotation of the triangle (default: 0)." />
	   <param name="lineWidth" brief="The width of the lines (default: 1)." />
	   <example name="Draw some triangles.">
love.graphics:drawTriangle(100, 100, 200, 100);
love.graphics:drawTriangle(200, 200, 200, 100, 0, 2);
love.graphics:drawTriangle(200, 200, 100, 100, 45);
	   </example>
	  </function>
	  
	  <function name="drawRectangle" brief="Draws a rectangle at the specified coordinates.">
	   <param name="x" brief="The x-coordinate." />
	   <param name="y" brief="The y-coordinate." />
	   <param name="width" brief="The width of the rectangle." />
	   <param name="height" brief="The height of the rectangle." />
	   <param name="rotation" brief="The rotation of the rectangle (default: 0)." />
	   <param name="lineWidth" brief="The width of the lines (default: 1)." />
	   <example name="Draw some rectangles.">
love.graphics:drawRectangle(100, 100, 200, 100);
love.graphics:drawRectangle(200, 200, 200, 100, 0, 2);
love.graphics:drawRectangle(200, 200, 100, 100, 45);
	   </example>
	  </function>
	  
	  <function name="drawCircle" brief="Draws a circle at the specified coordinates.">
	   <param name="x" brief="The x-coordinate." />
	   <param name="y" brief="The y-coordinate." />
	   <param name="radius" brief="The radius of the circle." />
	   <param name="points" brief="The amount of points that make up the circle (default: 10)." />
	   <param name="rotation" brief="The rotation of the circle (default: 0)." />
	   <param name="lineWidth" brief="The width of the lines (default: 1)." />
	   <example name="Draw some circles.">
love.graphics:drawCircle(100, 100, 100);
love.graphics:drawCircle(100, 300, 100, 60, 0, 2);
love.graphics:drawCircle(100, 500, 100, 60, 45);
	   </example>
	  </function>
	  
	  <separator />
	  
	  <function name="fillTriangle" brief="Draws a filled triangle at the specified coordinates.">
	   <param name="x" brief="The x-coordinate." />
	   <param name="y" brief="The y-coordinate." />
	   <param name="width" brief="The width of the triangle." />
	   <param name="height" brief="The height of the triangle." />
	   <param name="rotation" brief="The rotation of the triangle (default: 0)." />
	   <example name="Draw some triangles.">
love.graphics:fillTriangle(100, 100, 200, 100);
love.graphics:fillTriangle(200, 200, 200, 100, 0, 2);
love.graphics:fillTriangle(200, 200, 100, 100, 45);
	   </example>
	  </function>
	  
	  <function name="fillRectangle" brief="Draws a filled rectangle at the specified coordinates.">
	   <param name="x" brief="The x-coordinate." />
	   <param name="y" brief="The y-coordinate." />
	   <param name="width" brief="The width of the rectangle." />
	   <param name="height" brief="The height of the rectangle." />
	   <param name="rotation" brief="The rotation of the rectangle (default: 0)." />
	   <example name="Draw some rectangles.">
love.graphics:fillRectangle(100, 100, 200, 100);
love.graphics:fillRectangle(200, 200, 200, 100, 0, 2);
love.graphics:fillRectangle(200, 200, 100, 100, 45);
	   </example>
	  </function>
	  
	  <function name="fillCircle" brief="Draws a filled circle at the specified coordinates.">
	   <param name="x" brief="The x-coordinate." />
	   <param name="y" brief="The y-coordinate." />
	   <param name="radius" brief="The radius of the circle." />
	   <param name="points" brief="The amount of points that make up the circle (default: 10)." />
	   <param name="rotation" brief="The rotation of the circle (default: 0)." />
	   <example name="Draw some circles.">
love.graphics:fillCircle(100, 100, 100);
love.graphics:fillCircle(100, 300, 100, 60, 0, 2);
love.graphics:fillCircle(100, 500, 100, 60, 45);
	   </example>
	  </function>
	  
	</object>
	
	
	<!-- :::::::::::::::::::::::::: AUDIO :::::::::::::::::::::::::: -->
	
	<object name="love.audio" brief="Contains methods for controlling audio.">
	</object>
	
	<!-- :::::::::::::::::::::::::: GUI :::::::::::::::::::::::::: -->
	
	<object name="love.gui" brief="Handles graphical user interfaces.">
	</object>
	
	<!-- :::::::::::::::::::::::::: FILESYSTEM :::::::::::::::::::::::::: -->
	
	<object name="love.filesystem" brief="Contains methods for file input/output.">
	</object>
    

	<!-- :::::::::::::::::::::::::: MOUSE :::::::::::::::::::::::::: -->
	
    <object name="love.mouse" brief="Keeps track of the state of the mouse.">
	
	 <function name="getX" brief="Gets the current x-position of the mouse.">
	  <returns type="number" brief="Current x-position." />
	  <example>
text:print(100, 100, "mouse is at: " .. mouse:getX() .. "x" .. mouse:getY());
	  </example>
	 </function>
	 
	 <function name="getY" brief="Gets the current y-position of the mouse.">
	  <returns type="number" brief="Current y-position." />
	   <example>
text:print(100, 100, "mouse is at: " .. mouse:getX() .. "x" .. mouse:getY());
	  </example>
	 </function>
	 
	 <separator />
	 
	 <function name="isDown" brief="Checks whether a certain button is down.">
	  <param name="button" brief="A mouse button." />
	  <returns type="boolean" brief="Whether the button is down." />
	   <example>
if mouse:isDown(LOVE_MOUSE_LEFT) then
	text:print(100, 100, "the left mouse button is being pressed ^.^");
end
	  </example>
	 </function>
	
	</object>
	
	<!-- :::::::::::::::::::::::::: KEYBOARD :::::::::::::::::::::::::: -->
	
    <object name="love.keyboard" brief="Keeps track of the state of the keyboard.">
	 
	 <function name="isDown" brief="Checks whether a certain key is down.">
	  <param name="key" brief="The key in question." />
	  <returns type="boolean" brief="Whether the passed key is pressed down." />
	  <example>
if keyboard:isDown('x') then
	print("x is down");
end
	  </example>
	 </function>
	 
	</object>
	
  </objects>
  
</documentation>