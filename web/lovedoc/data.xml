<?xml version='1.0' ?>
<documentation version="Version 0.x">


  <globals>
    <global name="Overview" url="index.html">

      [img src="gfx/mega-sun.png" alt="sun" style="float: right;"/]

      [div class="subchapter"]
      [div class="title"]
      Welcome
      [/div]
      [div class="text"]

      Welcome to the official LOVE documentation page. Here we have explanations of all the types and objects available for the Lua scripting. This does not describe the inner-workings of the engine itself (but we do have an SVN repository available on SourceForge if that's what you're looking for). To understand anything that's going on it is recommended that you have a little bit of programming experience, but hopefully LOVE is straight-forward and simple enough for even novices to get into game creation.
      [br /]
      We believe that thorough documentation is important for the survival of a program so if there is something missing or incorrect, please [a href="http://love.sourceforge.net/?page=contact"]contact us[/a].

      [/div]
      [/div]


      [div class="subchapter"]
      [div class="title"]
      Design
      [/div]
      [div class="text"]
      LOVE is created around the principle of a pseudo-symbiotic environment.[br /]
	  That's basically a fancy way of saying that LOVE reads the Lua code to generate a working game and Lua calls LOVE functions to generate a working game. It works like this:
      [br /]
      [img src="gfx/love-rel.png" alt="LOVE Design" /]
      
      [/div]
      [/div]


      [div class="subchapter"]
      [div class="title"]
      Tutorials
      [/div]
      [div class="text"]
      This page has the bare documentation and, except for the simple examples, contain no actual tutorials. Tutorials are available from the tutorial page on the [a href="http://love.sourceforge.net/?page=documentation"]LOVE website[/a].
      [/div]
      [/div]


    </global>
    <global name="Licence" url="licence.html">


      [div class="subchapter"]
      [div class="title"]Summary
      [/div]
      [div class="text"]

      LOVE is licenced under the terms of the ZLIB licence. This is a short licence to begin with,
      but for the lazy, here's a summary:

      [ul]
      [li]Do not claim that you made this software.[/li]
      [li]Do not make an altered version and claim that it is the original software.[/li]
      [li]Otherwise, feel free to use this software in any situation, including commercial.[/li]
      [/ul]
      [/div]
      [/div]

      [div class="subchapter"]
      [div class="title"]
      ZLIB licence (full)
      [/div]
      [div class="text"]

      Copyright Â© 2007 LOVE Development Team[br /]
      [br /]
      This software is provided 'as-is', without any express or implied
      warranty. In no event will the authors be held liable for any damages
      arising from the use of this software.[br /]
      [br /]
      Permission is granted to anyone to use this software for any purpose,
      including commercial applications, and to alter it and redistribute it
      freely, subject to the following restrictions:[br /]
      [br /]
      1. The origin of this software must not be misrepresented; you must not
      claim that you wrote the original software. If you use this software
      in a product, an acknowledgment in the product documentation would be
      appreciated but is not required.[br /]
      [br /]
      2. Altered source versions must be plainly marked as such, and must not be
      misrepresented as being the original software.[br /]
      [br /]
      3. This notice may not be removed or altered from any source
      distribution.[br /]

      [/div]
      [/div]

      <!-- Subchapter start -->
      [div class="subchapter"]
      [div class="title"]
      External libraries
      [/div]
      [div class="text"]
      LOVE uses many libraries, such as SDL, DevIL and FreeType. These all have their own licences.
      An overview is presented here.

      [ul]
      [li]SDL ([a href="http://www.opensource.org/licenses/lgpl-license.php"]LGPL[/a])[/li]
      [li]SDL_mixer ([a href="http://www.opensource.org/licenses/lgpl-license.php"]LGPL[/a])[/li]
      [li]DevIL ([a href="http://www.opensource.org/licenses/lgpl-license.php"]LGPL[/a])[/li]
      [li]FreeType 2 ([a href="http://www.freetype.org/FTL.TXT"]FTL[/a])[/li]
      [li]PhysFS ([a href="http://www.opensource.org/licenses/zlib-license.php"]ZLIB[/a])[/li]
      [li]Lua ([a href="http://www.opensource.org/licenses/mit-license.html"]MIT[/a])[/li]
      [/ul]

      [/div]
      <!-- Subchapter end -->
      
      
      [/div]


    </global>
    <global name="Credits" url="credits.html">
      [div class="subchapter"]
      [div class="title"]
      Creators
      [/div]
      [div class="text"]
      LOVE is created by:[br /]
      [ul]
      [li]Anders Ruud[/li]
      [li]Michael Enger[/li]
      [/ul]
      [/div]
      [/div]

      <!-- Subchapter start -->
      [div class="subchapter"]
      [div class="title"]
      Libraries
      [/div]
      [div class="text"]
      LOVE is built around these libraries, presented here in no particular order:

      [ul]
      [li][a href="http://libsdl.org/"]SDL[/a] - OS abstraction, mouse input, keyboard input.[/li]
      [li][a href="http://lua.org/"]Lua[/a] - Scripting.[/li]
      [li][a href="http://opengl.org/"]OpenGL[/a] - Hardware accelerated graphics.[/li]
      [li][a href="http://openil.sourceforge.net/"]DevIL[/a] - Image loading.[/li]
      [li][a href="http://www.freetype.org/"]FreeType 2[/a] - Font loading and rasterization.[/li]
      [li][a href="http://www.libsdl.org/projects/SDL_mixer/"]SDL_mixer[/a] - Sound loading/playing.[/li]
      [li][a href="http://icculus.org/physfs/"]PhysicsFS[/a] - Generic file loading + support for archive files.[/li]

      [/ul]
      
      A behemothic thanks to all of these.

      [/div]
      <!-- Subchapter end -->
      
      
    </global>
    
    
  </globals>
  
  

  <types>



  <!-- LEFT HERE FOR THE PURPOSE OF  GREAT ARCHIVING (AND TESTING, IF NEEDED) -->
    <type name="Universe" brief="Represents the physical universe.">

      [br /]
      [br /]

      Yeah, you can say that [b]again[/b].

      [ul]
      [li]LOL[/li]
      [li]FAG[/li]
      [li]NOOB[/li]
      [li]ROFL[/li]
      [/ul]

      [code]

      game:addImage("image-flower", "flower.gif");

      [/code]


      <function name="anvilOnFetus" brief="Destroys mankind.">

        Multiline description goes here! This function will TOTALLY destroy mankind.

        <param name="name" brief="Desc"/>
        <param name="x"  brief="Desc"/>
        <param name="y"  brief="Desc"/>
        <returns type="boolean">True if mankind was destroyed, false otherwise.</returns>

        <example name="Adding a universe to the game.">
          main = { LOL FUNCTIOn!
          init = function()
          {
          -- Add a Universe to the game.
          game:addUniverse("universe-kawaii");
          }
          }
          fetuys
        </example>

        <see name="game" url="objectgame" />
        <see name="fetus" url="objectgame" />
        <see name="hest" url="objectgame" />

      </function>

      <function name="phallae" brief="Destroys asdfasdfjkl."> asdfasdfjkl </function>
      <function name="get" brief="Destroys asdfasdfjkl."> asdfasdfjkl </function>

      <separator />

      <function name="set" brief="Destroys asdfasdfjkl."> asdfasdfjkl </function>
      <function name="kill" brief="Destroys asdfasdfjkl."> asdfasdfjkl </function>

      <separator />

      <function name="set" brief="Destroys asdfasdfjkl.">
        <param name="x" brief="x-pos lol" />
        <see name="game" url="objectgame" />

      </function>

      <function name="kill" brief="Destroys asdfasdfjkl.">
        asdfasdfjkl
        <param name="all" brief="True to kill all, false to just kill some." />
      </function>

      <see name="Image" url="typeImage" />
      <see name="Image:getWidth()" url="functionImagegetWidth" />

      <example name="Adding a universe to the game.">
main = {
  init = function()
    -- Add a Universe to the game.
    game:addUniverse("universe-kawaii");
  end
}
      </example>

      <example name="Adding a universe to the game, and using the returned pointer to destroy mankind.">
main = {
  init = function()
    -- Create a new Universe
    myuni = game:addUniverse("universe-kawaii");

    -- Destroy mankind
    myuni:anivilOnFetus("joe", 13, 37);
  end
}
      </example>

    </type>
	
	<!-- :::::::::::::::::::::::::: ACTOR :::::::::::::::::::::::::: -->

    <!-- <type name="Actor" brief="Todo"></type> -->
	
	<!-- :::::::::::::::::::::::::: ACTORSTATE :::::::::::::::::::::::::: -->
	
    <!-- <type name="ActorState" brief="Todo"></type> -->
	
	<!-- :::::::::::::::::::::::::: COLOR :::::::::::::::::::::::::: -->
	
    <type name="Color" brief="An object containing color information.">
	 A Color object is created by calling any of the [b]game:addColor()[/b] functions.
	 <see name="game:addColor( name, red, green, blue, alpha )" url="TODO" />
	 <see name="game:addColor( name, hex )" url="TODO" />
	 
	 <function name="setColor" brief="Sets the current color.">
	  <param name="red" brief="The amount of red." />
	  <param name="green" brief="The amount of green." />
	  <param name="blue" brief="The amount of blue." />
	  <param name="alpha" brief="The amount of alpha." />
	 </function>
	 
	 <function name="setColor" brief="Sets the current color.">
	  <param name="red" brief="The amount of red." />
	  <param name="green" brief="The amount of green." />
	  <param name="blue" brief="The amount of blue." />
	 </function>
	 
	 <separator />
	 
	 <function name="setRed" brief="Sets the amount of red in the color.">
	  <param name="red" brief="The amount of red." />
	 </function>
	 
	 <function name="setGreen" brief="Sets the amount of green in the color.">
	  <param name="green" brief="The amount of green." />
	 </function>
	 
	 <function name="setBlue" brief="Sets the amount of blue in the color.">
	  <param name="blue" brief="The amount of blue." />
	 </function>
	 
	 <function name="setAlpha" brief="Sets the amount of alpha in the color.">
	  <param name="alpha" brief="The amount of alpha." />
	 </function>
	 
	 <separator />
	 
	 <function name="getRed" brief="Gets the amount of red in the color.">
	  <returns type="number">The amount of red.</returns>
	 </function>
	 
	 <function name="getGreen" brief="Gets the amount of green in the color.">
	  <returns type="number">The amount of green.</returns>
	 </function>
	 
	 <function name="getBlue" brief="Gets the amount of blue in the color.">
	  <returns type="number">The amount of blue.</returns>
	 </function>
	 
	 <function name="getAlpha" brief="Gets the amount of alpha in the color.">
	  <returns type="number">The amount of alpha.</returns>
	 </function>
	 
	 <separator />
	 
	 <function name="getGradient" brief="Gets a gradient between this color and another.">
	  <param name="other" brief="A pointer to the other Color object." />
	  <param name="amount" brief="How much to gradient (0 is this color, 1 is other color)." />
	  <returns type="color">A pointer to the gradient color.</returns>
	  <example>
red = game:addColor("basic red", 255, 0, 0);
blue = game:addColor("basic blue", 0, 0, 255);

purple = red:getGradient(blue, 0.5);
veryred = red:getGradient(blue, 0.1);
veryblue = red:getGradient(blue, 0.9);
	  </example>
	 </function>
	 
	</type>
	
	<!-- :::::::::::::::::::::::::: FONT :::::::::::::::::::::::::: -->
	
    <type name="Font" brief="Represents a font.">
	 A Font object is created by calling any of the [b]game:addFont()[/b] functions.
	 <see name="game:addFont( name, size )" url="TODO" />
	 <see name="game:addFont( name, filepath, size )" url="TODO" />
	 
	 <function name="print" brief="Prints some text at the current location.">
	  Does not support line-breaks. It is suggested that you use [b]text:print()[/b] instead.
	  <see name="text:print()" url="TODO" />
	  <param name="text" brief="A line of text." />
	 </function>
	 
	 <function name="print" brief="Prints some text at the coordinates.">
	  Does not support line-breaks. It is suggested that you use [b]text:print()[/b] instead.
	  <see name="text:print()" url="TODO" />
	  <param name="text" brief="A line of text." />
	  <param name="x" brief="x-coordinate" />
	  <param name="y" brief="y-coordinate" />
	 </function>
	 
	 <function name="print" brief="Prints a character at the current location.">
	  <param name="character" brief="A single character." />
	 </function>
	 
	 <function name="print" brief="Prints a character at the coordinates.">
	  <param name="character" brief="A single character." />
	  <param name="x" brief="x-coordinate" />
	  <param name="y" brief="y-coordinate" />
	 </function> 
	 
	 <separator />
	 
	 <function name="getLineHeight" brief="Returns the height of the font.">
	  The height of the font is the size including any spacing; the height which it will need.
	 </function>
	 
	 <function name="getLineWidth" brief="Returns the width of the line.">
	  Determines the line length. Does not support line-breaks.
	  <param name="line" brief="A line of text." />
	 </function> 
	</type>
	
	<!-- :::::::::::::::::::::::::: FRAME ANIMATION :::::::::::::::::::::::::: -->
	
	<type name="FrameAnimation" brief="Contains the data for an animated image.">
	 Created by calling any of the [b]game:addFrameAnimation()[/b] functions.
	 <see name="game:addFrameAnimation( name, image_name )" url="TODO" />
	 <see name="game:addFrameAnimation( name, image )" url="TODO" />
	 
	 <function name="addFrame" brief="Adds a frame by extracting a frame of the assigned image.">
	  <param name="x" brief="x-coordinate within the image." />
	  <param name="y" brief="y-coordinate within the image." />
	  <param name="width" brief="Width of the frame." />
	  <param name="height" brief="Height of the frame." />
	  <param name="delay" brief="Delay after this frame (in seconds)." />
	  <example>
-- Loads a sprite sheet and designates it as the frame-animation's source image
-- We'll assume that this image is 600x40 pixels
sonicanimation = game:addFrameAnimation("sonic", game:addImage("sonic running", "sonic.png"));

-- Creates the first animation frame by creating a sub-image of the source image
-- In this case a 40x40 square starting from the top left corner
-- And with 0.1 seconds of delay
sonicanimation:addFrame(0,0,40,40,0.1);

-- Now we take a smaller frame from somewhere in the middle of the image
sonicanimation:addFrame(420,20,40,20,0.1);
	  </example>
	 </function>
	 
	 <function name="addFrames" brief="Automatically adds frames from the source image.">
	  This assumes that all the frames are of the same size and placed in a logical grid and correctly spaced apart.
	  <param name="sizex" brief="How many frames there are per row." />
	  <param name="sizey" brief="The amount of rows." />
	  <param name="width" brief="The width of each frame." />
	  <param name="height" brief="The height of each frame." />
	  <param name="delay" brief="The delay after each frame (in seconds)." />
	  <example>
-- Takes an image of an explosion and creates a frame animation with that as its source
explosion = game:addFrameAnimation("explosion", game:addImage("explosion_source", "explosion.png"));

-- Adds the frames by designating that each of them are 96x96 pixels in size and are arranged
-- with 5 frames per rown in 3 rows, giving each frame a 0.17 seconds delay.
explosion:addFrames(5, 3, 96, 96, 0.17);
	  </example>
	 </function>
	 
	 <separator />
	 
	 <function name="start" brief="Starts the animation.">
	 </function>
	 
	 <function name="stop" brief="Stops the animation.">
	 </function>
	 
	 <function name="delay" brief="Delays the animation.">
	  <param name="t" brief="The amount of seconds to delay the animation." />
	 </function>
	 
	 <separator />
	 
	 <function name="render" brief="Renders the current frame at the current location."></function>
	 
	 <function name="render" brief="Renders the current frame at the specified coordinates.">
	  <param name="x" brief="x-coordinate" />
	  <param name="y" brief="y-coordinate" />
	 </function>
	 
	 <function name="render" brief="Renders a sub-image of the current frame at the current coordinates.">
	  <param name="x" brief="x-coordinate within the frame" />
	  <param name="y" brief="y-coordinate within the frame" />
	  <param name="width" brief="The width of the sub-image." />
	  <param name="height" brief="The height of the sub-image." />
	 </function>
	 
	 <separator />
	 
	</type>
	
	<!-- :::::::::::::::::::::::::: IMAGE :::::::::::::::::::::::::: -->
	
	<type name="Image" brief="Contains image data. Typically loaded from an image file such as png, gif or jpg.">
	 An image is created with the [b]game:addImage()[/b] function.
	 <see name="game:addImage( name, filepath )" url="TODO" />
	 
	 <function name="render" brief="Renders the image at the current location."></function>
	 
	 <function name="render" brief="Renders the image at the specified location.">
	  The coordinates denote the top left corner of the image.
	  <param name="x" brief="x-coordinate" />
	  <param name="y" brief="y-coordinate" />
	 </function>
	 
	 <function name="render" brief="Renders a sub-image starting at the specified location within the image.">
	  <param name="x" brief="x-coordinate within image" />
	  <param name="y" brief="y-coordinate within image" />
	  <param name="width" brief="Width of the subimage." />
	  <param name="height" brief="Height of the subimage." />
	  <example>
-- The size of this image is 64x64 pixles
sixtyfour = game:addImage("64 by 64", "sixtyfour.png");

-- This renders a 32x32 square of the image, starting from the top left
sixtyfour:render(0,0,32,32);

-- This renders a 20x12 rectangle from the middle of the image
sixtyfour:render(22,26,20,12);
	  </example>
	 </function>
	 
	 <separator />
	 
	 <function name="getWidth" brief="Gets the width of the image.">
      <returns type="number">The width of the Image in pixels.</returns>
     </function>
	  
     <function name="getHeight" brief="Gets the height of the image.">
      <returns type="number">The height of the Image in pixels.</returns>
     </function>
    </type>
	
	<!-- :::::::::::::::::::::::::: SOUND :::::::::::::::::::::::::: -->
	
    <type name="Sound" brief="Contains sound data. Loaded from a sample file.">
	 Can play the following types of files: WAVE, AIFF, RIFF, OGG and VOC. Created with [b]game:addSound()[/b].
	 
	 <see name="game:addSound( name, filepath, volume )" url="TODO" />
	 
	 <function name="play" brief="Plays the designated sound."></function>
	 
	 <separator />
	 
	 <function name="setVolume" brief="Sets the volume the sound should be played at.">
	  <param name="volume" brief="The volume (from 0 to 128)." />
	 </function>
	 
	 <function name="getVolume" brief="Returns the volume that the sound will be played at.">
	  <returns type="number" brief="The volume (from 0 to 128)." />
	 </function>
	</type>
	
	<!-- :::::::::::::::::::::::::: SPRITE :::::::::::::::::::::::::: -->

    <!-- <type name="Sprite" brief="Todo"></type> -->

  </types>

  <objects>
    
	<!-- :::::::::::::::::::::::::: GAME :::::::::::::::::::::::::: -->
  
    <object name="game" brief="Represents the game.">

      Most of the interaction will be done via this object.

      <function name="addFile" brief="Adds a Lua file.">
        Note: The Lua file is parsed immediately after it is added.
        <param name="filename" brief="The filename of the Lua file." />
        <example name="Adding a Lua file to the game.">
-- In entry.lua
main = {

  init = function()
  
    -- Add file with more Lua code.
    game:addFile("my_code/flower.lua");
    
    -- Code from flower.lua is now available.
    -- (Suppose num_flowers is a global variable in flower.lua)
    game:print("Number of flowers: " .. num_flowers);
    
  end
  
}
        </example>
      </function>
	  
	  <function name="include" brief="Adds a Lua file. This function checks if the file has been added already.">
	   Note: The Lua file is parsed immediately after it is added.
	   <param name="filename" brief="The filename of the Lua file." />
	   <example name="Adding a Lua file to the game.">
-- In entry.lua
main = {

  init = function()
  
    -- Add file with more Lua code.
    game:include("my_code/flower.lua");
    
    -- Code from flower.lua is now available.
    -- (Suppose num_flowers is a global variable in flower.lua)
    game:print("Number of flowers: " .. num_flowers);
    
  end
  
}
	   </example>
	  </function>
	  
	<!-- states -->
	
	  <separator />
	
	  <function name="addState" brief="Adds a state to the game.">
	   Note: The init function of the state will be called immediately as it is added.
	   <param name="name" brief="The name of the state." />
	   <example name="Adding a state to the game.">
main = {

  init = function()
  
    -- Add a state
    game:addState("firstlevel");
    
  end
  
}

-- The state itself
firstlevel = {

	init = function()
	
		-- Things happen here
	
	end

}
	   </example>
	  </function>
	  
	  <function name="removeState" brief="Removes a state from the game.">
	   <param name="name" brief="The name of the state." />
	   <example name="Removing a state from the game.">
main = {

  init = function()
  
    -- Add a state
    game:addState("firstlevel");
	-- And then remove it
	game:removeState("firstlevel");
    
  end
  
}

-- The state itself
firstlevel = {

	init = function()
	
		-- Things happen here
	
	end

}
	   </example>
	  </function>
	  
	  <function name="setState" brief="Sets a state as the current one.">
	   <param name="name" brief="The name of the state." />
	   <example name="Setting a state.">
main = {

  init = function()
  
    -- Add a state
    game:addState("firstlevel");
	-- Then set it as the current one
	game:setState("firstlevel");
    
  end
  
}

-- The state itself
firstlevel = {

	render = function()
	
		text:print(100,100,"You can see this now!");
	
	end

}
	   </example>
	  </function>

      <!-- 
      **********************************************************
      game : image
      ********************************************************** 
      -->

      <separator />

      <function name="addImage" brief="Adds an image to the game.">
        Remember that the Image will not be loaded until [b]after[/b] init has completed.
        <param name="name" brief="The name of the Image." />
        <param name="filepath" brief="The file from which to load the image." />
        <returns type="image" brief="A pointer to the added image." />
        <example name="Adding an Image to the game.">
main = {

  init = function()
  
    -- Adds an image to the game, and stores the returned pointer
    -- in the variable "flower".
    flower = game:addImage("image-flower", "flower.png");
    
  end
  
}
        </example>
      </function>

      <function name="getImage" brief="Gets a pointer to the image.">
        <param name="name" brief="The name of the image." />
        <returns type="image" brief="A pointer to the image with the specified name." />
        <example name="Getting an image pointer from the game.">
main = {

  init = function()
  
    -- Gets a pointer to the image with name "image-flower".
    flower = game:getImage("image-flower");
  
  end
  
}
        </example>
      </function>
	  
	  <function name="removeImage" brief="Deletes an image.">
        <param name="name" brief="The name of the image." />
        <example name="Deleting an image.">
-- Add an image
flower = game:addImage("image-flower", "flower.png");

-- Remove it
game:removeImage("image-flower");
        </example>
      </function>

      <function name="isImage" brief="Checks if an image with the specified name exists.">
        <param name="name" brief="The name of the image." />
        <returns type="boolean" brief="True if an image with the specified name exists, false otherwise." />

        <example name="Checking for existence">
main = {

  init = function()

    -- Checks if an image with the name "image-flower" exists.
    flower_exists = game:isImage("image-flower");

    if flower_exists then
      game:print("Flowers!");
    end

  end

}
        </example>

      </function>


      <!-- 
      **********************************************************
      game : frameAnimation
      ********************************************************** 
      -->

      <separator />
      
      
      <function name="addFrameAnimation" brief="Adds a FrameAnimation to the game.">
        <param name="name" brief="The name of the FrameAnimation."/>
        <param name="image_name" brief="The name of the Image from which to create the FrameAnimation."/>
        <returns type="frameAnimation" brief="A pointer to the added frameAnimation." />
        <example name="Adding a frameAnimation to the game.">
main = {

  init = function()

    -- Adds an image to the game, and stores the returned pointer
    -- in the variable "flower".
    game:addImage("image-flower", "flower.png");

    -- Adds a frameAnimation to the game, and stores the returned pointer
    -- in the variable "flower_growing".
    -- Note that the previously added image "image-flower" is used as the second 
    -- parameter.
    game:addFrameAnimation("anim-flower-growing", "image-flower");

  end

}
        </example>
      </function>

      <function name="addFrameAnimation" brief="Adds a FrameAnimation to the game.">
        <param name="name" brief="The name of the FrameAnimation."/>
        <param name="image" brief="A pointer to the Image from which to create the FrameAnimation."/>
        <returns type="frameAnimation" brief="A pointer to the added frameAnimation." />
        <example name="Adding a frameAnimation to the game.">
main = {

  init = function()

    -- Adds an image to the game, and stores the returned pointer
    -- in the variable "flower".
    flower = game:addImage("image-flower", "flower.png");

    -- Adds a frameAnimation to the game, and stores the returned pointer
    -- in the variable "flower_growing".
    -- Note that the second parameter is the pointer to the previously created 
    -- image "image-flower".
    flower_growing = game:addFrameAnimation("anim-flower-growing", flower);

  end

}
        </example>
      </function>


      <function name="getFrameAnimation" brief="Gets a pointer to the FrameAnimation.">
        <param name="name" brief="The name of the frameAnimation." />
        <returns type="frameAnimation" brief="A pointer to the frameAnimation with the specified name" />
      </function>

      <function name="removeFrameAnimation" brief="Removes a frameAnimation from the game.">
        <param name="name" brief="The name of the frameAnimation." />
      </function>

      <function name="isFrameAnimation" brief="Checks if a frameAnimation with the specified name exists." >
        <param name="name" brief="The name of the frameAnimation." />
        <returns type="frameAnimation" brief="A pointer to the frameAnimation with the specified name." />
      </function>


      

      <separator />
	  
	  <!--
	  *****
	  * COLOR
	  ***** -->
	  
	  <separator />
	  
	  <function name="addColor" brief="Adds a new Color.">
	   If a color already exists with that name it overwrites it with this new one.
	   <param name="name" brief="The name of the color." />
	   <param name="red" brief="The amount of red (from 0 to 255)." />
	   <param name="green" brief="The amount of green (from 0 to 255)." />
	   <param name="blue" brief="The amount of blue (from 0 to 255)." />
	   <param name="alpha" brief="The amount of alpha (from 0 to 255)." />
	   <returns type="color" brief="A pointer to the newly created Color object." />
	   <example>
transparentpink = game:addColor("transparent pink", 246, 9, 104, 150);
opaquepink = game:addColor("opaque pink", 246, 9, 104);
	   </example>
	  </function>
	  
	  <!-- <function name="addColor" brief="Adds a new Color.">
	   If a color already exists with that name it overwrites it with this new one.
	   <param name="name" brief="The name of the color." />
	   <param name="red" brief="The amount of red (from 0 to 255)." />
	   <param name="green" brief="The amount of green (from 0 to 255)." />
	   <param name="blue" brief="The amount of blue (from 0 to 255)." />
	   <returns type="color" brief="A pointer to the newly created Color object." />
	   <example>
pink = game:addColor("pink", 246, 9, 104);
	   </example>
	  </function> -->
	  
	  <function name="addColor" brief="Adds a new Color.">
	   If a color already exists with that name it overwrites it with this new one.
	   <param name="name" brief="The name of the color." />
	   <param name="hex" brief="A 6-character hexadecimal color value." />
	   <returns type="color" brief="A pointer to the newly created Color object." />
	   <example>
pink = game:addColor("pink", 0xF60968);
	   </example>
	  </function>
	  
	  <function name="getColor" brief="Gets an already existing Color.">
	   <param name="name" brief="The name of the color." />
	   <returns type="color" brief="A pointer to the Color object." />
	   <example>
game:addColor("pink", 0xF60968);
pink = game:getColor("pink");
	   </example>
	  </function>
	  
	  <function name="setColor" brief="Sets the color for the game objects.">
	   <param name="color" brief="A pointer to a Color object." />
	   <example>
pink = game:addColor("pink", 0xF60968);
game:setColor(pink);
	   </example>
	  </function>
	  
	  <function name="setColor" brief="Sets the color for the game objects.">
	   <param name="name" brief="The name of the color." />
	   <example>
game:addColor("pink", 0xF60968);
game:setColor("pink");
	   </example>
	  </function>
	  
	  <function name="setBackground" brief="Sets the background color for the game.">
	   <param name="color" brief="A pointer to a Color object." />
	   <example>
pink = game:addColor("pink", 0xF60968);
game:setBackground(pink);
	   </example>
	  </function>
	  
	  <function name="setBackground" brief="Sets the background color for the game.">
	   <param name="name" brief="The name of the color." />
	   <example>
game:addColor("pink", 0xF60968);
game:setBackground("pink");
	   </example>
	  </function>
	  
	  <!--
	  *****
	  * FONT
	  *****
	  -->
	  
	  <separator />
	  
	  <function name="addFont" brief="Adds a new variation of the default font.">
	   If a font already exists with that name it overwrites it with this new one. The default font is FreeSans size 14.
	   <param name="name" brief="The name of the font." />
	   <param name="size" brief="The size of the new font." />
	   <returns type="font" brief="A pointer to the newly created Font object." />
	   <example>
small = game:addFont("small", 8);
big = game:addFont("big", 30);
	   </example>
	  </function>
	  
	  <function name="addFont" brief="Adds a new Font.">
	   If a font already exists with that name it overwrites it with this new one.
	   <param name="name" brief="The name of the font." />
	   <param name="filepath" brief="The filepath to the font within the folder/file of the game." />
	   <param name="size" brief="The size of the new font." />
	   <returns type="font" brief="A pointer to the newly created Font object." />
	   <example>
customfont = game:addFont("custom font", "Awesomeo.ttf", 12); -- this font is found in the game folder itself
customfoot = game:addFont("custom foot", "resources/graphical/fonts/free fonts/Footfont.ttf", 42); -- this is a few subfolders
	   </example>
	  </function>
	  
	  <function name="getFont" brief="Gets a previously added Font.">
	   <param name="name" brief="The name of the font." />
	   <returns type="font" brief="A pointer to the Font object." />
	   <example>
game:addFont("tiny font", "FreeSans.ttf", 8);
tinyfont = game:getFont("tiny font");
	   </example>
	  </function>
	  
	  <function name="setFont" brief="Sets a Font as the current one.">
	   Note: The font set with this function will only be used if the game:print or game:drawString functions are called. It is recommend that you use the text functions instead.
	   <param name="font" brief="A pointer to a font object." />
	   <example>
tinyfont = game:addFont("tiny font", "FreeSans.ttf", 8);
game:setFont(tinyfont);
	   </example>
	   <see name="text:setFont( font )" url="TODO" />
	  </function>
	  
	  <function name="setFont" brief="Sets a Font as the current one.">
	   Note: The font set with this function will only be used if the game:print or game:drawString functions are called. It is recommend that you use the text functions instead.
	   <param name="name" brief="The name of the font." />
	   <example>
game:addFont("tiny font", "FreeSans.ttf", 8);
game:setFont("tiny font");
	   </example>
	   <see name="text:setFont( name )" url="TODO" />
	  </function>
	  
	  <function name="print" brief="Prints some text onto the screen.">
	   Note: The text function should be used instead of this one.
	   <param name="x" brief="x-position" />
	   <param name="y" brief="y-position" />
	   <param name="text" brief="The actual text to be printed." />
	   <example>
game:print(100,100,"This is some text!");
	   </example>
	   <see name="text:print( x, y, text )" url="TODO" />
	  </function>
	  
	  <function name="drawString" brief="Prints some text onto the screen.">
	   Note: The text function should be used instead of this one.
	   <param name="x" brief="x-position" />
	   <param name="y" brief="y-position" />
	   <param name="text" brief="The actual text to be printed." />
	   <example>
game:drawString(100,100,"This is some text!");
	   </example>
	   <see name="text:print( x, y, text )" url="TODO" />
	  </function>
	  
	  <!--
	  *****
	  * BASIC SHAPES
	  ***** -->
	  
	  <separator />
	  
	  <function name="setRotation" brief="Sets the global rotation for the basic shapes.">
	   <param name="rotation" brief="The rotation." />
	   <example>
-- An unrotated box
game:setRotation(0);
game:fillRect(100,100,100,100);

-- A rotated box
game:setRotation(40);
game:fillRect(100,100,100,100);
	   </example>
	  </function>
	  
	  <function name="getRotation" brief="Gets the global rotation.">
	   <returns type="number" brief="The current global rotation." />
	  </function>
	  
	  <function name="drawLine" brief="Draws a line from (x1,y1) to (x2,y2).">
	   Affected by the global rotation.
	   <param name="x1" brief="First x-position" />
	   <param name="y1" brief="First y-position" />
	   <param name="x1" brief="Second x-position" />
	   <param name="y1" brief="Second y-position" />
	   <param name="lineWidth" brief="The width of the line." />
	   <example>
-- This draws a line from (20,20) to (100,20) which is 1 pixel thick
game:drawLine(20,20,100,20);

-- This draws a line from (40,100) to (100,40) which is 5 pixels thick
game:drawLine(20,20,100,20,5);
	   </example>
	  </function>
	  
	   <function name="drawTriangle" brief="Draws a triangle using lines.">
	   Affected by the global rotation. The x and y coordinates denote the center of the shape.
	   <param name="x" brief="x-position" />
	   <param name="y" brief="y-position" />
	   <param name="width" brief="Width of the triangle." />
	   <param name="height" brief="Height of the triangle." />
	   <param name="lineWidth" brief="The width of the lines." />
	   <example>
-- This draws a triangle at (20,20) with lines of 1 pixel thickness
game:drawRect(20,20,100,100);

-- This draws a triangle at (20,20) with lines of 2 pixel thickness
game:drawRect(20,20,200,100,2);
	   </example>
	  </function>
	  
	  <function name="fillTriangle" brief="Draws a filled triangle.">
	   Affected by the global rotation. The x and y coordinates denote the center of the shape.
	   <param name="x" brief="x-position" />
	   <param name="y" brief="y-position" />
	   <param name="width" brief="Width of the triangle." />
	   <param name="height" brief="Height of the triangle." />
	   <example>
-- This draws a triangle at (20,20)
game:fillRect(20,20,100,100);
	   </example>
	  </function>
	  
	  <function name="drawRect" brief="Draws a rectangle using lines.">
	   Affected by the global rotation. The x and y coordinates denote the center of the shape.
	   <param name="x" brief="x-position" />
	   <param name="y" brief="y-position" />
	   <param name="width" brief="Width of the rectangle." />
	   <param name="height" brief="Height of the rectangle." />
	   <param name="lineWidth" brief="The width of the lines." />
	   <example>
-- This draws a square at (20,20) with lines of 1 pixel thickness
game:drawRect(20,20,100,100);

-- This draws a rectangle at (20,20) with lines of 2 pixel thickness
game:drawRect(20,20,200,100,2);
	   </example>
	  </function>
	  
	  <function name="fillRect" brief="Draws a filled rectangle.">
	   Affected by the global rotation. The x and y coordinates denote the center of the shape.
	   <param name="x" brief="x-position" />
	   <param name="y" brief="y-position" />
	   <param name="width" brief="Width of the rectangle." />
	   <param name="height" brief="Height of the rectangle." />
	   <example>
-- This draws a square at (20,20)
game:fillRect(20,20,100,100);
	   </example>
	  </function>
	  
	  <function name="drawCircle" brief="Draws a circle using lines.">
	   Affected by the global rotation. The x and y coordinates denote the center of the shape.
	   <param name="x" brief="x-position" />
	   <param name="y" brief="y-position" />
	   <param name="radius" brief="Radius of the circle." />
	   <param name="points" brief="The amount of points which makeup the circle." />
	   <param name="lineWidth" brief="The width of the lines." />
	   <example>
-- This draws a "choppy" circle at (20,20)
game:drawCircle(20,20,70,10);
	   </example>
	  </function>
	  
	  <function name="fillCircle" brief="Draws a filled circle.">
	   Affected by the global rotation. The x and y coordinates denote the center of the shape.
	   <param name="x" brief="x-position" />
	   <param name="y" brief="y-position" />
	   <param name="radius" brief="Radius of the circle." />
	   <param name="points" brief="The amount of points which makeup the circle." />
	   <example>
-- This draws a "fine" circle at (20,20)
game:drawCircle(20,20,70,36);
	   </example>
	  </function>
	  
	  <!--
	  ******
	  * SOUND
	  ******
	  -->
	  
	  <separator />
	  
	  <function name="addSound" brief="Creates a new Sound.">
	   Only samples (WAVE, AIFF, RIFF, OGG and VOC) files are accepted.
	   <param name="name" brief="The name of the sound." />
	   <param name="filepath" brief="Filepath to the sound file." />
	   <param name="volume" brief="Volume of the new file (from 0 to 128)." />
	   <returns type="sound" brief="A pointer to a Sound object." />
	   <example>
-- Creates a sound with the default volume
blast = game:addSound("blast", "blast.wav");

-- Creates a sound with very low volume
explosion = game:addSound("explosion", "explosion.wav", 20);
	   </example>
	  </function>
	  
	  <function name="getSound" brief="Gets an existing Sound.">
	   <param name="name" brief="The name of the sound." />
	   <returns type="sound" brief="A pointer to a Sound object." />
	   <example>
game:addSound("blast", "blast.wav");
blast = game:getSound("blast");
	   </example>
	  </function>
	  
	  <function name="stopAllSounds" brief="Stops every playing sound.">
	   <param name="seconds" brief="The amount of fade time." />
	   <example>
-- Fades the sounds out over 1.5 seconds
game:stopAllSounds(1.5);

-- Stops all sounds instantly
game:stopAllSounds();
	   </example>
	  </function>
	  
	  <function name="pauseAllSounds" brief="Pause every playing sound.">
	   <example>
-- Pause the current sounds
game:pauseAllSounds();

-- Resume them
game:resumeAllSounds();
	   </example>
	  </function>
	  
	  <function name="resumeAllSounds" brief="Resumes every paused sounds.">
	   <example>
-- Pause the current sounds
game:pauseAllSounds();

-- Resume them
game:resumeAllSounds();
	   </example>
	  </function>
	 
	  <!--
	  *****
	  * OTHER FUNCTIONS
	  ***** -->

      <separator />
	  
	  <function name="say" brief="Prints a line of text on the console.">
	   <param name="text" brief="A line of text." />
	  </function>

      <function name="getFps" brief="Gets the current FPS.">
        <returns type="number" brief="The current FPS." />
      </function>

      <function name="getDisplayWidth" brief="Gets the current width of the display.">
        <returns type="number" brief="The current width of the display in pixels." />
      </function>

      <function name="getDisplayHeight" brief="Gets the current height of the display.">
        <returns type="number" brief="The current height of the display in pixels." />
      </function>
      
    </object>

	<!-- :::::::::::::::::::::::::: GL :::::::::::::::::::::::::: -->

    <object name="gl" brief="OpenGL Wrapper.">
	 Only 2D functions are available.
	 
	 <function name="translate" brief="Moves to the designated coordinates.">
	  <param name="x" brief="x-coordinate" />
	  <param name="y" brief="y-coordinate" />
	  <example>
-- This will render at 0,0
someimage:render();

-- Now it will render at 100,100
gl:translate(100,100);
someimage:render();
	  </example>
	 </function>
	 
	 <function name="rotate" brief="Rotates the current matrix.">
	  <param name="alpha" brief="The degree of rotation." />
	  <example>
-- This will render normally
someimage:render();

-- This will render bit askew
gl:rotate(12);
someimage:render();
	  </example>
	 </function>
	 
	 <function name="scale" brief="Scale the current matrix.">
	  <param name="x" brief="The amount of horizontal scaling." />
	  <param name="y" brief="The amount of vertical scaling." />
	  <example>
-- This will render normally
someimage:render();

-- This will render the same image twice as big
gl:scale(2,2);
someimage:render();
	  </example>
	 </function>
	 
	 <separator />
	 
	 <function name="loadIdentity" brief="Replace the current matrix with the identity matrix.">
	 </function>
	 
	 <function name="pushMatrix" brief="Push the current matrix to stack.">
	 </function>
	 
	 <function name="popMatrix" brief="Pop the current matrix from stack.">
	 </function>
	 
	 <separator />
	 
	 <function name="begin" brief="Begins a drawing mode.">
	  <param name="mode" brief="The mode to begin." />
	 </function>
	 
	 <function name="finish" brief="Finishes the drawing mode.">
	 </function>
	 
	 <separator />
	 
	 <function name="vertex" brief="Designates a vertex for drawing a primitive.">
	  The vertexii must be designated in a counter-clockwise order for the primitive to be drawn correctly.
	  <param name="x" brief="x-coordinate" />
	  <param name="y" brief="y-coordinate" />
	  <example>
-- Draws a 200x200 square around the current location
gl:begin("QUADS");
gl:vertex(100,100);
gl:vertex(-100,100);
gl:vertex(-100,-100);
gl:vertex(100,-100);
gl:finish();
	  </example>
	 </function>
	 
	 <function name="texCoord" brief="TODO">
	  <param name="s" brief="TODO" />
	  <param name="t" brief="TODO" />
	 </function>
	 
	 <separator />
	 
	 <function name="color" brief="Designates a color to be used by OpenGL.">
	  <param name="r" brief="Amount of red in the color (from 0 to 255)." />
	  <param name="g" brief="Amount of green in the color (from 0 to 255)." />
	  <param name="b" brief="Amount of blue in the color (from 0 to 255)." />
	  <param name="a" brief="Amount of alpha in the color (from 0 to 255). Default is 255." />
	  <example>
-- A slightly transparent pink color
gl:color(246, 9, 104, 150);

-- A completely opaque pink color
gl:color(246, 9, 104);
	  </example>
	 </function>
	 
	 <function name="color" brief="Designates a color to be used by OpenGL.">
	  <param name="color" brief="Pointer to a Color object." />
	  <example>
pink = game:addColor("opaque pink", 246, 9, 104);
gl:color(pink);
	  </example>
	 </function>
	 
	 <separator />
	 
	 <function name="enable" brief="Enables an OpenGL capability.">
	  <param name="str" brief="OpenGL capability to enable." />
	  <example>
-- Enables texturing
gl:enable("TEXTURE_2D");
	  </example>
	 </function>
	 
	 <function name="disable" brief="Disables an OpenGL capability.">
	  <param name="str" brief="OpenGL capability to disable." />
	  <example>
-- Disables texturing
gl:disable("TEXTURE_2D");
	  </example>
	 </function>
	 
	 <separator />
	 
	 <function name="hint" brief="TODO">
	  <param name="target" brief="TODO" />
	  <param name="mode" brief="TODO" />
	 </function>
	 
	 <separator />
	 
	 <function name="shadeModel" brief="TODO">
	  <param name="str" brief="TODO" />
	 </function>
	 
	 <separator />
	 
	 <function name="blendFunc" brief="TODO">
	  <param name="source" brief="TODO" />
	  <param name="destination" brief="TODO" />
	 </function>
	 
	 <function name="blendFuncNormal" brief="TODO">
	 </function>
	 
	 <function name="blendFuncAdditive" brief="TODO">
	 </function>
	 
	 <separator />
	 
	 <function name="alphaFunc" brief="TODO">
	  <param name="func" brief="TODO" />
	  <param name="ref" brief="TODO" />
	 </function>
	 
	 <separator />
	 
	 <function name="clear" brief="TODO">
	  <param name="str" brief="TODO" />
	 </function>
	</object>
	
	<!-- :::::::::::::::::::::::::: TEXT :::::::::::::::::::::::::: -->
	
    <object name="text" brief="Contains methods for displaying text.">
	
	 <function name="print" brief="Prints text onto the screen.">
	  <param name="x" brief="x-coordinate" />
	  <param name="y" brief="y-coordinate" />
	  <param name="text" brief="The text to be printed." />
	  <example>
-- A long line of text
text:print(100, 100, "This is a really long line of text. Depending on your resolution, font size and other such settings this might actually go outside the screen meaning you won't be able to read this part.");

-- A multi-line piece of text
text:print(100, 200, "This is the first line!\nThis is the second line!\nThis is not the third line!\nThe third line is a liar!");
	  </example>
	 </function>
	 
	 <separator />
	 
	 <function name="setFont" brief="Sets the current font.">
	  <param name="font" brief="A pointer to the Font object." />
	  <example>
tinyfont = game:addFont("tiny font", FreeSans.ttf, 8);
text:setFont(tinyfont);
	  </example>
	  <see name="game:addFont()" url="NEED TO FIX THIS" />
	 </function>
	 
	 <function name="setFont" brief="Sets the current font.">
	  <param name="name" brief="The name of the font." />
	  <example>
game:addFont("tiny font", FreeSans.ttf, 8);
text:setFont("tiny font");
	  </example>
	  <see name="game:addFont()" url="NEED TO FIX THIS" />
	 </function>
	 
	 <function name="setColor" brief="Sets the current color.">
	  <param name="color" brief="A pointer to the Color object." />
	  <example>
red = game:addColor("very red", 255, 0, 0);
text:setColor(red);
	  </example>
	  <see name="game:addColor()" url="NEED TO FIX THIS" />
	 </function>
	 
	 <function name="setColor" brief="Sets the current color.">
	  <param name="name" brief="The name of the color." />
	  <example>
game:addColor("very red", 255, 0, 0);
text:setColor("very red");
	  </example>
	  <see name="game:addColor()" url="NEED TO FIX THIS" />
	 </function>
	 
	 <function name="setLimit" brief="Sets the size limit for auto-wrapping text.">
	  Passing 0 as the limit parameter removes the limitation.
	  <param name="limit" brief="The size (in pixels)." />
	  <example>
-- Limits the text to a container of 400 pixels with
text:setLimit(400);
text:print(100, 100, "This text will wrap due to its length and the fact that you have set the wrap limit. Maybe even get a third line out of it!");

-- Clear the limit
text:setLimit(0);
	  </example>
	  <see name="game:addColor()" url="NEED TO FIX THIS" />
	 </function>
	 
	 <function name="align" brief="Aligns the text.">
	  <param name="alignment" brief="left, right or center" />
	  <example>
text:align("left");
text:print(100, 100, "Aligned to the left!");

text:align("right");
text:print(100, 200, "Aligned to the right!");

-- This is not going to work
text:align("a little bit more to the right");
text:print(100, 300, "Aligned to the what?");
	  </example>
	 </function>
	 
	 <separator />
	 
	 <function name="getLineHeight" brief="Returns the height of the font.">
	  The height of the font is the size including any spacing; the height which it will need.
	 </function>
	 
	 <function name="getLineWidth" brief="Returns the width of the line.">
	  Determines the line length by checking the size of the current font. Does not support line-breaks.
	  <param name="line" brief="A line of text." />
	 </function>
	 
	</object>
	
	<!-- :::::::::::::::::::::::::: MOUSE :::::::::::::::::::::::::: -->
	
    <object name="mouse" brief="Keeps track of the state of the mouse.">
	
	 <function name="getX" brief="Gets the current x-position of the mouse.">
	  <returns type="number" brief="Current x-position." />
	  <example>
text:print(100, 100, "mouse is at: " .. mouse:getX() .. "x" .. mouse:getY());
	  </example>
	 </function>
	 
	 <function name="getY" brief="Gets the current y-position of the mouse.">
	  <returns type="number" brief="Current y-position." />
	   <example>
text:print(100, 100, "mouse is at: " .. mouse:getX() .. "x" .. mouse:getY());
	  </example>
	 </function>
	 
	 <separator />
	 
	 <function name="isDown" brief="Checks whether a certain button is down.">
	  <param name="button" brief="A mouse button." />
	  <returns type="boolean" brief="Whether the button is down." />
	   <example>
if mouse:isDown(LOVE_MOUSE_LEFT) then
	text:print(100, 100, "the left mouse button is being pressed ^.^");
end
	  </example>
	 </function>
	
	</object>
	
	<!-- :::::::::::::::::::::::::: KEYBOARD :::::::::::::::::::::::::: -->
	
    <object name="keyboard" brief="Keeps track of the state of the keyboard.">
	 
	 <function name="isDown" brief="Checks whether a certain key is down.">
	  <param name="key" brief="The key in question." />
	  <returns type="boolean" brief="Whether the passed key is pressed down." />
	  <example>
if keyboard:isDown('x') then
	print("x is down");
end
	  </example>
	 </function>
	 
	</object>
	
  </objects>
  
</documentation>